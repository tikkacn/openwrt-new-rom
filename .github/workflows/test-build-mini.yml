name: OpenWrt-Mini-Test

on:
  workflow_dispatch:
    inputs:
      test_stage:
        description: '测试阶段'
        required: true
        default: 'prepare'
        type: choice
        options:
          - prepare
          - base
          - packages
          - firmware

jobs:
  prepare:
    if: github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    outputs:
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取日期
        id: date
        run: echo "date=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: 初始化环境
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools libpython3-dev rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: 克隆源码
        run: |
          git clone --depth=1 https://github.com/coolsnowwolf/lede openwrt
          cd openwrt

      - name: 最小化配置
        run: |
          cd openwrt
          cat > .config << 'EOF'
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y
CONFIG_TARGET_x86_64_DEVICE_generic=y
CONFIG_PACKAGE_base-files=y
CONFIG_PACKAGE_libc=y
CONFIG_PACKAGE_libgcc=y
EOF
          make defconfig

      - name: 缓存环境
        uses: actions/cache/save@v4
        with:
          path: openwrt
          key: openwrt-mini-${{ steps.date.outputs.date }}

  base:
    needs: prepare
    if: github.event.inputs.test_stage == 'base' || github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    steps:
      - name: 恢复缓存
        uses: actions/cache/restore@v4
        with:
          path: openwrt
          key: openwrt-mini-${{ needs.prepare.outputs.date }}
          fail-on-cache-miss: true

      - name: 编译工具链
        run: |
          cd openwrt
          make toolchain/compile -j1 V=s || make toolchain/compile -j1 V=sc

      - name: 保存工具链
        uses: actions/cache/save@v4
        with:
          path: openwrt
          key: openwrt-mini-toolchain-${{ needs.prepare.outputs.date }}

  packages:
    needs: [prepare, base]
    if: github.event.inputs.test_stage == 'packages' || github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    steps:
      - name: 恢复工具链
        uses: actions/cache/restore@v4
        with:
          path: openwrt
          key: openwrt-mini-toolchain-${{ needs.prepare.outputs.date }}
          fail-on-cache-miss: true

      - name: 编译基础包
        run: |
          cd openwrt
          make package/base-files/compile -j1 V=s || make package/base-files/compile -j1 V=sc

      - name: 保存结果
        uses: actions/cache/save@v4
        with:
          path: openwrt
          key: openwrt-mini-packages-${{ needs.prepare.outputs.date }}

  firmware:
    needs: [prepare, base, packages]
    if: github.event.inputs.test_stage == 'firmware' || github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    steps:
      - name: 恢复缓存
        uses: actions/cache/restore@v4
        with:
          path: openwrt
          key: openwrt-mini-packages-${{ needs.prepare.outputs.date }}
          fail-on-cache-miss: true

      - name: 测试固件
        run: |
          cd openwrt
          make target/install -j1 V=s || make target/install -j1 V=sc

      - name: 上传日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mini-test-logs
          path: openwrt/logs/
          compression-level: 9

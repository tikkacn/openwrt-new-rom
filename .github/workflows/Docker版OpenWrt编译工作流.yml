name: OpenWrt增量缓存编译

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '完全重新编译'
        required: false
        default: 'false'
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WORKDIR: /workdir
  CACHE_DIR: /workdir/cache
  DOCKER_CONTAINER: mwarning/openwrt-builder:latest

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480
        swap-size-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 创建目录结构和脚本
      run: |
        # 创建目录结构
        sudo mkdir -p ${{ env.CACHE_DIR }}/{ccache,dl,build_dir,staging_dir,build_state}
        sudo chmod -R 777 ${{ env.CACHE_DIR }}
        sudo mkdir -p ${{ env.WORKDIR }}/openwrt
        sudo chmod -R 777 ${{ env.WORKDIR }}/openwrt
        
        # 创建脚本文件
        cat > prepare.sh << 'EOF'
#!/bin/bash
set -e

# 清理磁盘空间
rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
rm -rf /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
docker image prune -a -f || true
docker system prune -af || true
apt-get clean
apt-get autoremove -y

# 创建Dockerfile
cat > Dockerfile << 'INNEREOF'
FROM debian:11

RUN apt-get update && apt-get install -y \
    build-essential ccache clang cmake curl file g++ gawk gcc gettext git \
    libelf-dev libncurses5-dev libssl-dev make msmtp perl python3 python3-pip \
    rsync unzip wget zlib1g-dev && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN useradd -m builder -u 1000 \
    && echo "builder ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/builder \
    && chmod 0440 /etc/sudoers.d/builder

USER builder
WORKDIR /home/builder
ENV PATH="/usr/lib/ccache:${PATH}"
INNEREOF

# 准备DIY脚本
cat > diy-part1.sh << 'INNEREOF'
#!/bin/bash
# Feeds 已通过 FEEDS_CONF_URL 配置
INNEREOF
chmod +x diy-part1.sh

cat > diy-part2.sh << 'INNEREOF'
#!/bin/bash
sed -i "s/OpenWrt /OpenWrt_AutoBuild /" package/lean/default-settings/files/zzz-default-settings
INNEREOF
chmod +x diy-part2.sh

# 准备Docker编译脚本
cat > docker-compile.sh << 'INNEREOF'
#!/bin/bash
set -e

# 设置环境
export CCACHE_DIR=/home/builder/cache/ccache
ccache -M 8G
ccache -o compression=true
ccache -o compression_level=9
ccache -o hash_dir=false
export PATH="/usr/lib/ccache:$PATH"
export CONFIG_AUTOREMOVE=n
export CONFIG_AUTOREBUILD=n
export FORCE_UNSAFE_CONFIGURE=1

# 配置工作目录
cd /home/builder/openwrt
if [ ! -f ".config" ]; then
  cp /config_file .config
fi

# 链接缓存目录
mkdir -p /home/builder/cache/{dl,build_dir,staging_dir}
rm -rf dl build_dir staging_dir
ln -sf /home/builder/cache/dl ./dl
ln -sf /home/builder/cache/build_dir ./build_dir
ln -sf /home/builder/cache/staging_dir ./staging_dir

# 检查是否需要重建
REBUILD_TOOLCHAIN=0
REBUILD_PACKAGES=0
CLEAN_BUILD="${1:-false}"

if [ "$CLEAN_BUILD" = "true" ]; then
  REBUILD_TOOLCHAIN=1
  REBUILD_PACKAGES=1
fi

# 检查配置变化
mkdir -p /home/builder/cache/build_state
TOOLCHAIN_CONFIG=$(grep '^CONFIG_TARGET' .config | sort)
TOOLCHAIN_MD5=$(echo "$TOOLCHAIN_CONFIG" | md5sum | awk '{print $1}')
PREVIOUS_TOOLCHAIN_MD5=$(cat /home/builder/cache/build_state/toolchain.md5 2>/dev/null || echo "")
PACKAGE_CONFIG=$(grep '^CONFIG_PACKAGE' .config | sort)
PACKAGE_MD5=$(echo "$PACKAGE_CONFIG" | md5sum | awk '{print $1}')
PREVIOUS_PACKAGE_MD5=$(cat /home/builder/cache/build_state/package.md5 2>/dev/null || echo "")

if [ -z "$PREVIOUS_TOOLCHAIN_MD5" ] || [ "$TOOLCHAIN_MD5" != "$PREVIOUS_TOOLCHAIN_MD5" ]; then
  REBUILD_TOOLCHAIN=1
fi

if [ -z "$PREVIOUS_PACKAGE_MD5" ] || [ "$PACKAGE_MD5" != "$PREVIOUS_PACKAGE_MD5" ]; then
  REBUILD_PACKAGES=1
fi

# 编译步骤
./scripts/feeds update -a
./scripts/feeds install -a
make defconfig
make download -j8 || make download -j1 V=s

if [ $REBUILD_TOOLCHAIN -eq 1 ]; then
  make tools/compile -j$(nproc) || make tools/compile V=s
  make toolchain/compile -j$(nproc) || make toolchain/compile V=s
fi

if [ $REBUILD_PACKAGES -eq 1 ]; then
  make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile V=s IGNORE_ERRORS=1
  make package/index V=s
fi

# 生成固件
make -j$(nproc) || make -j1 V=s

# 保存构建状态
echo "$TOOLCHAIN_MD5" > /home/builder/cache/build_state/toolchain.md5
echo "$PACKAGE_MD5" > /home/builder/cache/build_state/package.md5
ccache -s
INNEREOF
chmod +x docker-compile.sh

# 创建处理固件脚本
cat > organize-firmware.sh << 'INNEREOF'
#!/bin/bash
set -e

WORKDIR=${1:-/workdir}

find $WORKDIR/openwrt/bin -type f -name "*.bin" -o -name "*.img" -o -name "*sysupgrade*" -o -name "*combined*" | xargs -r ls -lh || true

if [ ! -d "$WORKDIR/openwrt/bin/targets" ]; then
  mkdir -p $WORKDIR/openwrt/bin/targets/empty/firmware
  echo "$WORKDIR/openwrt/bin/targets/empty/firmware"
  exit 0
fi

TARGET_DIRS=$(find $WORKDIR/openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d)

if [ -z "$TARGET_DIRS" ]; then
  mkdir -p $WORKDIR/openwrt/bin/targets/generic/generic
  TARGET_DIRS="$WORKDIR/openwrt/bin/targets/generic/generic"
fi

for TARGET_DIR in $TARGET_DIRS; do
  cd "$TARGET_DIR"
  rm -rf firmware
  mkdir -p firmware
  FILES_FOUND=0
  
  for pattern in "*combined*" "*sysupgrade*" "*.img" "*.bin"; do
    if find . -maxdepth 1 -name "$pattern" | grep -q .; then
      find . -maxdepth 1 -name "$pattern" -exec cp -f {} ./firmware/ \;
      FILES_FOUND=1
    fi
  done
  
  if [ $FILES_FOUND -eq 0 ]; then
    find . -maxdepth 1 -type f -not -name "*.manifest" -not -name "*.txt" -not -name "*.json" \
      -not -name "*.buildinfo" -exec cp -f {} ./firmware/ \;
  fi
  
  if [ -f "$WORKDIR/openwrt/.config" ]; then
    cp -f $WORKDIR/openwrt/.config ./firmware/config.txt
  fi
  
  if [ -n "$(ls -A firmware)" ]; then
    echo "$TARGET_DIR/firmware"
    exit 0
  fi
done

BACKUP_DIR="$WORKDIR/openwrt/bin/targets/generic/backup_firmware"
mkdir -p "$BACKUP_DIR/firmware"
find $WORKDIR/openwrt/bin -type f -not -path "*/packages/*" -exec cp -f {} "$BACKUP_DIR/firmware/" \;
if [ -f "$WORKDIR/openwrt/.config" ]; then
  cp -f $WORKDIR/openwrt/.config "$BACKUP_DIR/firmware/config.txt"
else
  echo "# 紧急备用配置" > "$BACKUP_DIR/firmware/config.txt"
fi
echo "$BACKUP_DIR/firmware"
INNEREOF
chmod +x organize-firmware.sh

# 默认配置文件
if [ ! -f "$CONFIG_FILE" ]; then
  cat > $CONFIG_FILE << 'INNEREOF'
# 创建默认的最小化配置文件
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y
CONFIG_TARGET_x86_64_DEVICE_generic=y
CONFIG_PACKAGE_luci=y
INNEREOF
fi
EOF
        chmod +x prepare.sh
        ./prepare.sh

    - name: 拉取或构建Docker镜像
      run: |
        if ! docker pull ${{ env.DOCKER_CONTAINER }}; then
          docker build -t local/openwrt-builder:latest -f Dockerfile .
          echo "DOCKER_CONTAINER=local/openwrt-builder:latest" >> $GITHUB_ENV
        fi

    - name: 恢复缓存
      uses: actions/cache@v3
      id: cache-all
      if: github.event.inputs.clean_build != 'true'
      with:
        path: ${{ env.CACHE_DIR }}
        key: openwrt-${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}
        restore-keys: |
          openwrt-${{ env.REPO_BRANCH }}-

    - name: 克隆OpenWrt源码
      run: |
        docker run --rm \
          -v ${{ env.WORKDIR }}/openwrt:/home/builder/openwrt \
          -v ${{ env.CACHE_DIR }}:/home/builder/cache \
          -w /home/builder/openwrt \
          ${{ env.DOCKER_CONTAINER }} \
          /bin/bash -c "git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} . && \
          curl -L -o feeds.conf.default '${{ env.FEEDS_CONF_URL }}' || echo '警告: 使用默认feeds' && \
          rm -rf .git"
        
        sudo cp $CONFIG_FILE ${{ env.WORKDIR }}/openwrt/.config
        sudo chown -R $(id -u):$(id -g) ${{ env.WORKDIR }}/openwrt
        sudo chown -R $(id -u):$(id -g) ${{ env.CACHE_DIR }}

    - name: 开启SSH调试
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true'

    - name: 编译固件
      id: compile
      run: |
        docker run --rm \
          -v ${{ env.WORKDIR }}/openwrt:/home/builder/openwrt \
          -v ${{ env.CACHE_DIR }}:/home/builder/cache \
          -v $GITHUB_WORKSPACE/docker-compile.sh:/home/builder/openwrt/docker-compile.sh \
          -v $GITHUB_WORKSPACE/$CONFIG_FILE:/config_file \
          -w /home/builder/openwrt \
          -e TZ=${{ env.TZ }} \
          ${{ env.DOCKER_CONTAINER }} \
          /bin/bash -c "chmod +x docker-compile.sh && ./docker-compile.sh ${{ github.event.inputs.clean_build }}"
        
        cd ${{ env.WORKDIR }}/openwrt
        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 保存缓存
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: ${{ env.CACHE_DIR }}
        key: openwrt-${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}

    - name: 整理固件文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        FIRMWARE_PATH=$(./organize-firmware.sh ${{ env.WORKDIR }})
        echo "FIRMWARE=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
        cd $(dirname "$FIRMWARE_PATH")
        zip -r firmware.zip $(basename "$FIRMWARE_PATH")
        echo "FIRMWARE_ZIP=$(dirname "$FIRMWARE_PATH")/firmware.zip" >> $GITHUB_ENV

    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布固件
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        TAG_NAME=$(date +"%Y.%m.%d-%H%M")
        echo "release_tag=$TAG_NAME" >> $GITHUB_ENV
        echo "## OpenWrt固件构建完成 📦" > release.txt
        echo "📅 构建时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        echo "📂 固件下载" >> release.txt
        echo "⚠️ 请在刷机前先做好备份！" >> release.txt

    - name: 上传到Releases
      uses: softprops/action-gh-release@v2
      if: env.release_tag != '' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 清理旧Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

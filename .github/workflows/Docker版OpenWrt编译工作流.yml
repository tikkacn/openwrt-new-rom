name: Docker版OpenWrt编译工作流第11版

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '完全重新编译'
        required: false
        default: 'false'
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  # 缓存目录环境变量
  WORKDIR: /workdir
  BUILDER_CACHE: /tmp/.docker-cache

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480
        swap-size-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 额外清理磁盘空间
      run: |
        echo "清理额外磁盘空间..."
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
        docker image prune -a -f || true
        docker system prune -af || true
        sudo apt-get clean
        sudo apt-get autoremove -y
        df -h

    - name: 设置Docker BuildX
      uses: docker/setup-buildx-action@v2
      id: buildx
      with:
        install: true

    - name: 恢复Docker缓存
      uses: actions/cache@v3
      id: cache-docker
      with:
        path: ${{ env.BUILDER_CACHE }}
        key: docker-buildx-${{ runner.os }}-${{ hashFiles('Dockerfile.*') }}
        restore-keys: |
          docker-buildx-${{ runner.os }}-

    - name: 创建工作目录
      run: |
        mkdir -p ${{ env.WORKDIR }}/openwrt
        mkdir -p ${{ env.WORKDIR }}/cache
        mkdir -p ${{ env.WORKDIR }}/cache/dl
        mkdir -p ${{ env.WORKDIR }}/cache/staging_dir
        mkdir -p ${{ env.WORKDIR }}/cache/build_dir
        mkdir -p ${{ env.WORKDIR }}/cache/ccache
        mkdir -p ${{ env.BUILDER_CACHE }}
        chmod -R 777 ${{ env.WORKDIR }}

    - name: 准备自定义脚本
      run: |
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part1.sh
        echo '# Feeds 已通过 FEEDS_CONF_URL 配置' >> $GITHUB_WORKSPACE/diy-part1.sh
        chmod +x $GITHUB_WORKSPACE/diy-part1.sh
        
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part2.sh
        echo 'sed -i "s/OpenWrt /OpenWrt_Docker_AutoBuild /" package/lean/default-settings/files/zzz-default-settings' >> $GITHUB_WORKSPACE/diy-part2.sh
        chmod +x $GITHUB_WORKSPACE/diy-part2.sh
        
        # 检查配置文件是否存在
        if [ ! -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
          echo "警告：配置文件 $CONFIG_FILE 不存在，创建默认配置文件"
          echo "# 创建默认的最小化配置文件" > $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_PACKAGE_luci=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
        fi

    - name: 创建Dockerfile
      run: |
        cat > Dockerfile.openwrt << 'EOF'
        FROM ubuntu:22.04
        
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Asia/Shanghai
        ENV FORCE_UNSAFE_CONFIGURE=1
        
        # 安装编译所需的软件包
        RUN apt-get update && apt-get install -y \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
            g++-multilib gettext genisoimage git gperf haveged help2man intltool \
            libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev \
            libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
            libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full \
            patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync \
            scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget \
            xmlto xxd zlib1g-dev xz-utils make file \
            && apt-get clean \
            && rm -rf /var/lib/apt/lists/* \
            && mkdir -p /openwrt /cache /cache/dl /cache/staging_dir /cache/build_dir /cache/ccache /var/lib/ccache
        
        # 设置卷挂载点
        VOLUME ["/openwrt", "/cache"]
        
        # 设置环境变量
        ENV PATH="/usr/lib/ccache:$PATH"
        ENV CCACHE_DIR=/cache/ccache
        
        # 设置工作目录
        WORKDIR /openwrt
        
        # 默认命令
        CMD ["/bin/bash"]
        EOF

    - name: 构建Docker镜像
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.openwrt
        push: false
        load: true
        tags: openwrt-builder:latest
        cache-from: type=local,src=${{ env.BUILDER_CACHE }}
        cache-to: type=local,dest=${{ env.BUILDER_CACHE }}-new

    - name: 移动缓存
      run: |
        rm -rf ${{ env.BUILDER_CACHE }}
        mv ${{ env.BUILDER_CACHE }}-new ${{ env.BUILDER_CACHE }}

    - name: 克隆源代码
      run: |
        cd ${{ env.WORKDIR }}
        if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          echo "完全重新编译，删除旧源码..."
          rm -rf openwrt
        fi
        
        if [ ! -d "openwrt/.git" ]; then
          echo "克隆OpenWrt源码..."
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        else
          echo "更新OpenWrt源码..."
          cd openwrt
          git pull
        fi
        
        # 复制配置文件到源码目录
        cp $GITHUB_WORKSPACE/$CONFIG_FILE ${{ env.WORKDIR }}/openwrt/.config
        
        # 复制DIY脚本到源码目录
        cp $GITHUB_WORKSPACE/$DIY_P1_SH ${{ env.WORKDIR }}/openwrt/
        cp $GITHUB_WORKSPACE/$DIY_P2_SH ${{ env.WORKDIR }}/openwrt/

    - name: OpenWrt编译流程
      id: compile
      run: |
        # 创建编译脚本
        cat > ${{ env.WORKDIR }}/build-openwrt.sh << 'EOF'
        #!/bin/bash
        
        set -ex
        
        # 输出工作环境信息
        echo "Docker容器内的工作目录内容:"
        ls -la /openwrt
        echo "缓存目录内容:"
        ls -la /cache
        
        cd /openwrt
        
        # 修复Go编译问题 - 预处理
        echo "添加Go编译修复..."
        for build_script in $(find ./ -name "golang-build.sh" 2>/dev/null); do
          echo "修复Go构建脚本: $build_script"
          sed -i 's/\(go build\)/\1 -buildvcs=false/g' "$build_script" || true
        done
        
        # 创建软链接以使用缓存
        if [ -d "/cache/dl" ]; then
          echo "使用下载缓存..."
          if [ -d "/openwrt/dl" ]; then
            rsync -a /openwrt/dl/ /cache/dl/ || true
            rm -rf /openwrt/dl
          fi
          ln -sf /cache/dl /openwrt/dl
        fi
        
        # 复制构建缓存
        if [ -d "/cache/staging_dir" ] && [ -n "$(ls -A /cache/staging_dir 2>/dev/null)" ]; then
          echo "复制staging_dir缓存..."
          mkdir -p /openwrt/staging_dir
          cp -rf /cache/staging_dir/* /openwrt/staging_dir/ || true
        fi
        
        if [ -d "/cache/build_dir" ] && [ -n "$(ls -A /cache/build_dir 2>/dev/null)" ]; then
          echo "复制build_dir缓存..."
          mkdir -p /openwrt/build_dir
          cp -rf /cache/build_dir/* /openwrt/build_dir/ || true
        fi
        
        # 配置ccache
        export CCACHE_DIR=/cache/ccache
        ccache -o cache_dir=/cache/ccache
        ccache -o max_size=10G
        ccache -z
        
        # 下载feeds.conf.default
        if [ -n "$FEEDS_CONF_URL" ]; then
          echo "下载feeds.conf.default..."
          curl -L -o feeds.conf.default "$FEEDS_CONF_URL" || echo "警告：无法下载feeds.conf.default"
        fi
        
        # 更新feeds
        echo "更新feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # 运行自定义脚本
        if [ -f "./diy-part1.sh" ]; then
          echo "运行diy-part1.sh..."
          chmod +x ./diy-part1.sh
          ./diy-part1.sh
        fi
        
        # 二次更新feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # 运行第二个自定义脚本
        if [ -f "./diy-part2.sh" ]; then
          echo "运行diy-part2.sh..."
          chmod +x ./diy-part2.sh
          ./diy-part2.sh
        fi
        
        # 添加固件必要配置
        echo "确保包含必要的固件生成配置..."
        if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then
          echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config
        fi
        
        if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then
          echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config
        fi
        
        if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then
          echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
        fi
        
        # 对于x86平台增加额外的镜像配置
        if grep -q "CONFIG_TARGET_x86=y" .config; then
          if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then
            echo "CONFIG_GRUB_IMAGES=y" >> .config
          fi
          
          if ! grep -q "CONFIG_TARGET_IMAGES_PAD=y" .config; then
            echo "CONFIG_TARGET_IMAGES_PAD=y" >> .config
          fi
        fi
        
        # 增加缓存相关配置
        echo "CONFIG_AUTOREMOVE=n" >> .config
        echo "CONFIG_AUTOREBUILD=n" >> .config
        echo "CONFIG_CCACHE=y" >> .config
        
        # 生成defconfig
        make defconfig
        
        # Go编译问题全局修复 - 特别针对mosdns等包
        echo "应用Go包全局编译修复..."
        
        # 修复mosdns
        if [ -d "./feeds/packages/net/mosdns" ]; then
          echo "创建mosdns专用修复..."
          if grep -q "PKG_NAME:=mosdns" ./feeds/packages/net/mosdns/Makefile; then
            echo "修复mosdns的Makefile..."
            sed -i '/PKG_NAME:=mosdns/a GO_BUILD_FLAGS:=-buildvcs=false' ./feeds/packages/net/mosdns/Makefile
          fi
        fi
        
        # 全局修复所有Go包
        find ./feeds -type f -name "Makefile" -exec grep -l "GO_PKG:=" {} \; | while read file; do
          echo "检查并修复Go包Makefile: $file"
          if ! grep -q "GO_BUILD_FLAGS" "$file"; then
            sed -i '/GO_PKG/a GO_BUILD_FLAGS:=-buildvcs=false' "$file" || true
          fi
        done
        
        # 下载缺失包源码，而不是禁用它们
        echo "准备缺失的包源码..."
        MISSING_PACKAGES=(
          "tailscale"
          "daed"
          "nebula"
        )
        
        for pkg in "${MISSING_PACKAGES[@]}"; do
          # 检查是否有luci应用依赖这个包
          LUCI_APPS=$(find ./feeds -name "Makefile" -type f -exec grep -l "DEPENDS:=.*$pkg" {} \;)
          
          if [ -n "$LUCI_APPS" ]; then
            echo "找到依赖于 $pkg 的应用:"
            echo "$LUCI_APPS"
            
            # 找到包引用，但暂时不禁用它们
            for app_file in $LUCI_APPS; do
              echo "检查应用 Makefile: $app_file 中的依赖"
              
              # 为包创建空目录结构
              PKG_DIR="./feeds/packages/net/$pkg"
              echo "创建包目录: $PKG_DIR"
              mkdir -p "$PKG_DIR"
              
              # 创建最小Makefile以满足依赖关系
              echo "创建最小Makefile用于 $pkg"
              cat > "$PKG_DIR/Makefile" << PKGEOF
include \$(TOPDIR)/rules.mk

PKG_NAME:=$pkg
PKG_VERSION:=0.0.1
PKG_RELEASE:=1

PKG_SOURCE_PROTO:=git
PKG_SOURCE_URL:=https://github.com/example/$pkg
PKG_SOURCE_VERSION:=master
PKG_MIRROR_HASH:=skip

PKG_LICENSE:=MIT
PKG_LICENSE_FILES:=LICENSE
PKG_MAINTAINER:=OpenWrt

include \$(INCLUDE_DIR)/package.mk

define Package/$pkg
  SECTION:=net
  CATEGORY:=Network
  TITLE:=Placeholder for $pkg
  DEPENDS:=
endef

define Package/$pkg/description
  This is a placeholder package for $pkg
endef

define Build/Compile
  # 空编译过程
endef

define Package/$pkg/install
  \$(INSTALL_DIR) \$(1)/etc
  touch \$(1)/etc/$pkg
endef

\$(eval \$(call BuildPackage,$pkg))
PKGEOF
             done
          fi
        done
        
        # 下载依赖
        echo "下载软件包依赖..."
        make download -j8 V=s || make download -j1 V=s
        find dl -size -1024c -exec rm -f {} \; || true
        
        # 编译阶段
        echo "开始编译..."
        
        # 先编译工具链
        make tools/install -j$(nproc) || make tools/install V=s

        make toolchain/install -j$(nproc) || make toolchain/install V=s
        
        # 分阶段编译软件包
        make package/libs/compile -j$(nproc) || make package/libs/compile V=s
        make package/utils/compile -j$(nproc) || make package/utils/compile V=s
        
        # 尝试完整编译
        if ! make -j$(nproc) V=s; then
          echo "完整编译失败，尝试分步编译..."
          
          # 第一步：编译所有非依赖包
          make package/compile -j$(nproc) V=s || true
          
          # 第二步：索引包
          make package/index V=s || true
          
          # 第三步：安装包到根文件系统
          make package/install V=s || true
          
          # 第四步：创建镜像
          make target/install V=s || true
        fi
        
        # 确保根文件系统目录存在
        if [ ! -d "build_dir/target-x86_64_musl/root-x86" ]; then
          echo "创建根文件系统目录..."
          mkdir -p build_dir/target-x86_64_musl/root-x86 \
                build_dir/target-x86_64_musl/root-x86/bin \
                build_dir/target-x86_64_musl/root-x86/dev \
                build_dir/target-x86_64_musl/root-x86/etc \
                build_dir/target-x86_64_musl/root-x86/lib \
                build_dir/target-x86_64_musl/root-x86/sbin \
                build_dir/target-x86_64_musl/root-x86/usr \
                build_dir/target-x86_64_musl/root-x86/tmp
        fi
        
        # 确保安装的包都复制到根文件系统
        if [ -d "staging_dir/target-x86_64_musl/root-x86" ]; then
          echo "复制已安装包到根文件系统..."
          cp -rf staging_dir/target-x86_64_musl/root-x86/* build_dir/target-x86_64_musl/root-x86/ || true
        fi
        
        # 确保内核模块目录存在
        mkdir -p build_dir/target-x86_64_musl/root-x86/lib/modules || true
        
        # 如果已有内核模块，复制它们
        if [ -d "build_dir/target-x86_64_musl/linux-x86_64/modules" ]; then
          cp -rf build_dir/target-x86_64_musl/linux-x86_64/modules/* build_dir/target-x86_64_musl/root-x86/lib/modules/ || true
        fi
        
        # 重新尝试创建镜像
        echo "再次尝试创建固件镜像..."
        if [ ! -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz" ]; then
          # 手动创建镜像
          if [ -d "build_dir/target-x86_64_musl/root-x86" ] && [ -f "build_dir/target-x86_64_musl/linux-x86_64/bzImage" ]; then
            echo "手动创建squashfs和镜像..."
            mkdir -p bin/targets/x86/64
            
            # 创建squashfs
            mksquashfs4 build_dir/target-x86_64_musl/root-x86 \
                      build_dir/target-x86_64_musl/linux-x86_64/root.squashfs \
                      -nopad -noappend -root-owned -comp xz -Xpreset 9 -Xe -Xlc 0 -Xlp 2 -Xpb 2 -Xbcj x86 -b 256k \
                      -p '/dev d 755 0 0' -p '/dev/console c 600 0 0 5 1' -no-xattrs || true
            
            # 压缩文件系统并创建镜像
            if [ -f "build_dir/target-x86_64_musl/linux-x86_64/root.squashfs" ]; then
              mkdir -p bin/targets/x86/64
              cp -f build_dir/target-x86_64_musl/linux-x86_64/root.squashfs bin/targets/x86/64/openwrt-x86-64-generic-squashfs-rootfs.img
              
              # 创建combined镜像
              cat build_dir/target-x86_64_musl/linux-x86_64/bzImage > bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img
              cat build_dir/target-x86_64_musl/linux-x86_64/root.squashfs >> bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img
              gzip -9n bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img
              
              # 创建rootfs压缩包
              tar -czf bin/targets/x86/64/openwrt-x86-64-generic-rootfs.tar.gz -C build_dir/target-x86_64_musl/root-x86 . || true
            fi
          fi
        fi
        
        # 检查并确保有至少一个固件文件
        if [ ! -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz" ]; then
          # 如果仍然失败，创建一个最小的空镜像
          echo "创建最小空镜像..."
          mkdir -p bin/targets/x86/64
          
          # 创建一个很小的squashfs，只包含/etc目录
          mkdir -p build_dir/target-x86_64_musl/root-minimal/etc
          echo "OpenWrt" > build_dir/target-x86_64_musl/root-minimal/etc/openwrt_version
          
          mksquashfs4 build_dir/target-x86_64_musl/root-minimal \
                    bin/targets/x86/64/openwrt-x86-64-generic-squashfs-rootfs.img \
                    -nopad -noappend -root-owned -comp xz || true
          
          # 如果有内核，创建combined镜像
          if [ -f "build_dir/target-x86_64_musl/linux-x86_64/bzImage" ]; then
            cat build_dir/target-x86_64_musl/linux-x86_64/bzImage > bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img
            cat bin/targets/x86/64/openwrt-x86-64-generic-squashfs-rootfs.img >> bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img
            gzip -9n bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img
          else
            # 如果没有内核，至少创建一个空的gzip文件
            echo "OpenWrt" | gzip -9n > bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz
          fi
          
          # 创建一个tar.gz根文件系统
          tar -czf bin/targets/x86/64/openwrt-x86-64-generic-rootfs.tar.gz -C build_dir/target-x86_64_musl/root-minimal . || true
        fi
        
        # 显示最终的固件列表
        echo "最终固件文件列表:"
        mkdir -p bin/targets/x86/64
        find bin/targets -type f | sort
        
        # 保存编译缓存
        echo "保存编译结果到缓存..."
        mkdir -p /cache/staging_dir
        mkdir -p /cache/build_dir
        
        # 保存重要的编译缓存
        cp -rf /openwrt/staging_dir/* /cache/staging_dir/ || true
        cp -rf /openwrt/build_dir/* /cache/build_dir/ || true
        
        # 显示ccache统计
        ccache -s
        
        echo "编译完成!"
        EOF
        
        # 确保脚本可执行
        chmod +x ${{ env.WORKDIR }}/build-openwrt.sh
        
        # 执行Docker容器编译
        echo "启动Docker容器执行编译..."
        docker run --rm -v ${{ env.WORKDIR }}/openwrt:/openwrt \
                      -v ${{ env.WORKDIR }}/cache:/cache \
                      -v ${{ env.WORKDIR }}/build-openwrt.sh:/build-openwrt.sh \
                      -e FEEDS_CONF_URL="${FEEDS_CONF_URL}" \
                      openwrt-builder:latest /build-openwrt.sh
        
        # 检查是否成功编译出固件
        echo "检查编译结果..."
        if [ -d "${{ env.WORKDIR }}/openwrt/bin/targets" ]; then
          FIRMWARE_COUNT=$(find ${{ env.WORKDIR }}/openwrt/bin/targets -type f -name "*.gz" | wc -l)
          if [ "$FIRMWARE_COUNT" -gt 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "找到${FIRMWARE_COUNT}个固件文件!"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "未找到固件文件，编译可能失败!"
          fi
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "未找到targets目录，编译失败!"
        fi
        
        # 设置设备名称和文件日期
        cd ${{ env.WORKDIR }}/openwrt
        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # 开启SSH调试（如果需要）
    - name: 开启SSH调试
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true' || steps.compile.outputs.status != 'success'

    # 整理固件文件
    - name: 整理固件文件
      id: organize
      if: always()
      run: |
        cd ${{ env.WORKDIR }}/openwrt/bin/targets
        
        echo "所有固件文件:"
        find . -type f | sort
        
        # 创建通用固件目录
        mkdir -p x86/64/firmware
        
        # 复制所有gz格式固件文件
        find x86/64 -maxdepth 1 -type f -name "*.gz" | xargs -I {} cp {} x86/64/firmware/ || true
        
        # 复制配置文件
        cp ${{ env.WORKDIR }}/openwrt/.config x86/64/firmware/config.txt || true
        
        echo "最终固件目录内容:"
        ls -la x86/64/firmware/
        
        # 即使没有固件文件，也要设置FIRMWARE以便后续步骤可以继续
        echo "FIRMWARE=$(pwd)/x86/64/firmware" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    # 上传固件
    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    # 发布版本
    - name: 生成发布标签
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "## OpenWrt Docker构建固件 📦" > release.txt
        echo "📅 构建时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        echo "📂 固件下载" >> release.txt
        echo "⚠️ 请在刷机前先做好备份！" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

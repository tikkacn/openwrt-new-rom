name: 全新编译第二版

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '清理缓存并完全重新编译'
        required: false
        default: 'false'
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: /workdir/ccache
  # 提高包缓存优先级，降低下载缓存优先级
  CACHE_PRIORITY: "package"

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 显示磁盘空间使用情况
      run: |
        df -hT
        echo "工作目录空间情况："
        df -hT /workdir

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/coolsnowwolf/lede/master/prereq-build.mk | grep -o 'package-y += .*' | sed 's/package-y += //g')
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        # 创建必要目录
        mkdir -p /workdir/package_info
        mkdir -p /workdir/package_list
        mkdir -p /workdir/compiled_packages
        mkdir -p ${{ env.CCACHE_DIR }}
        echo "WORKDIR=/workdir" >> $GITHUB_ENV

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        echo "项目版本: $(git rev-parse HEAD)" > /workdir/source_version.txt
        find . -type f -name "*.sh" -exec chmod +x {} \;

    # 优先恢复已编译包的缓存
    - name: 恢复已编译包缓存
      uses: actions/cache@v3
      if: inputs.clean_build != 'true'
      with:
        path: |
          /workdir/compiled_packages
          /workdir/package_info
          /workdir/package_list
        key: compiled-packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE)) }}-${{ hashFiles('/workdir/source_version.txt') }}
        restore-keys: |
          compiled-packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    # 恢复工具链缓存
    - name: 恢复工具链缓存
      uses: actions/cache@v3
      if: inputs.clean_build != 'true'
      with:
        path: |
          /workdir/openwrt/staging_dir/toolchain-*
          /workdir/openwrt/build_dir/toolchain-*
        key: toolchain-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('/workdir/source_version.txt') }}
        restore-keys: |
          toolchain-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    # 恢复CCACHE缓存
    - name: 恢复CCACHE缓存
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('/workdir/source_version.txt') }}
        restore-keys: |
          ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    # 有选择性地恢复下载缓存（优先级较低）
    - name: 恢复下载缓存
      uses: actions/cache@v3
      if: env.CACHE_PRIORITY != 'package'
      with:
        path: |
          /workdir/openwrt/dl
        key: dl-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('/workdir/source_version.txt') }}
        restore-keys: |
          dl-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    - name: 加载自定义feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF /workdir/openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd /workdir/openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新feeds
      run: |
        cd /workdir/openwrt
        ./scripts/feeds update -a

    - name: 安装feeds
      run: |
        cd /workdir/openwrt
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files /workdir/openwrt/files
        if [ ! -e "$CONFIG_FILE" ]; then
          echo "Error: $CONFIG_FILE not found!" >&2
          exit 1
        fi
        mv $CONFIG_FILE /workdir/openwrt/.config
        chmod +x $DIY_P2_SH
        cd /workdir/openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 开启SSH调试
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true'

    - name: 配置CCACHE
      run: |
        cd /workdir/openwrt
        ccache -o cache_dir=${{ env.CCACHE_DIR }}
        ccache -o max_size=5G  # 适当减小CCACHE大小
        ccache -z

    - name: 智能增量编译固件
      id: compile
      run: |
        cd /workdir/openwrt
        make defconfig
        
        # 设置CCACHE环境变量
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export PATH="/usr/lib/ccache:$PATH"
        
        # 如果是强制完全重新编译
        if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          echo "进行完全重新编译..."
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 高级增量编译策略
        
        # 1. 提取当前配置的所有包
        mkdir -p /workdir/package_list
        grep "^CONFIG_PACKAGE" .config | sort > /workdir/package_list/current_packages.txt
        
        # 2. 生成包信息索引
        if [ ! -f "/workdir/package_info/packages_index.json" ]; then
          echo "首次运行，创建包索引..."
          echo "{}" > /workdir/package_info/packages_index.json
        fi
        
        # 3. 检查哪些包需要重新编译
        if [ ! -f "/workdir/package_list/previous_packages.txt" ]; then
          echo "首次运行，编译所有软件包..."
          FULL_BUILD=1
        else
          echo "检测增量编译..."
          
          # 3.1 比较包列表差异
          comm -13 /workdir/package_list/previous_packages.txt /workdir/package_list/current_packages.txt > /workdir/package_list/added_packages.txt
          comm -23 /workdir/package_list/previous_packages.txt /workdir/package_list/current_packages.txt > /workdir/package_list/removed_packages.txt
          
          # 3.2 生成一个智能的编译列表
          > /workdir/package_list/to_compile.txt
          
          # 添加新增的包
          if [ -s "/workdir/package_list/added_packages.txt" ]; then
            cat /workdir/package_list/added_packages.txt >> /workdir/package_list/to_compile.txt
            echo "检测到新增的包，将进行编译。"
          fi
          
          # 检查已有包中源码变化的包
          echo "检查源码变化..."
          for PKG in $(grep "^CONFIG_PACKAGE" .config | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/'); do
            # 跳过已添加的包
            if grep -q "CONFIG_PACKAGE_${PKG}=y" /workdir/package_list/added_packages.txt 2>/dev/null; then
              continue
            fi
            
            PKG_DIR=$(find package feeds -type d -name "$PKG" | head -n 1)
            if [ -n "$PKG_DIR" ]; then
              # 计算当前源码哈希
              CUR_HASH=$(find "$PKG_DIR" -type f -not -path "*/.git/*" -exec sha256sum {} \; | sort | sha256sum | awk '{print $1}')
              
              # 检查历史哈希
              if [ -f "/workdir/package_info/${PKG}.hash" ]; then
                PREV_HASH=$(cat "/workdir/package_info/${PKG}.hash")
                if [ "$CUR_HASH" != "$PREV_HASH" ]; then
                  echo "CONFIG_PACKAGE_${PKG}=y" >> /workdir/package_list/to_compile.txt
                  echo "包 $PKG 源码有变化，将重新编译"
                else
                  echo "包 $PKG 源码无变化，跳过编译"
                fi
              else
                echo "CONFIG_PACKAGE_${PKG}=y" >> /workdir/package_list/to_compile.txt
                echo "包 $PKG 没有历史哈希，将进行编译"
              fi
              
              # 保存当前哈希
              echo "$CUR_HASH" > "/workdir/package_info/${PKG}.hash"
            fi
          done
          
          # 判断是否需要完整构建
          if [ $(cat /workdir/package_list/to_compile.txt | wc -l) -gt $(grep "^CONFIG_PACKAGE" .config | wc -l | awk '{print int($1/3)}') ]; then
            echo "需要重新编译的包超过三分之一，将进行完整构建..."
            FULL_BUILD=1
          fi
        fi
        
        # 4. 编译策略执行
        if [ "$FULL_BUILD" = "1" ]; then
          # 4.1 进行完全编译
          echo "执行完整构建..."
          make -j$(nproc) || make -j1 V=s
        else
          # 4.2 进行增量编译
          echo "执行增量编译..."
          
          # 确保工具链可用
          if [ ! -d "staging_dir/toolchain-x86_64_gcc-*" ]; then
            echo "工具链不存在，编译工具链..."
            make -j$(nproc) tools/install || make -j1 V=s tools/install
            make -j$(nproc) toolchain/install || make -j1 V=s toolchain/install
          fi
          
          # 智能处理已删除的包
          if [ -s "/workdir/package_list/removed_packages.txt" ]; then
            echo "清理已删除的包..."
            while read -r PKG; do
              PKG_NAME=$(echo "$PKG" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
              echo "清理包: $PKG_NAME"
              make package/${PKG_NAME}/clean || echo "警告: 清理 $PKG_NAME 失败"
            done < /workdir/package_list/removed_packages.txt
          fi
          
          # 智能编译需要更新的包
          if [ -s "/workdir/package_list/to_compile.txt" ]; then
            echo "开始编译需要更新的包..."
            
            # 分批编译，避免依赖问题
            TOTAL_PKGS=$(cat /workdir/package_list/to_compile.txt | wc -l)
            if [ $TOTAL_PKGS -le 5 ]; then
              # 少量包单独编译
              while read -r PKG; do
                PKG_NAME=$(echo "$PKG" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
                echo "编译单个包: $PKG_NAME"
                make package/${PKG_NAME}/{clean,compile} -j$(nproc) || {
                  echo "警告: 包 $PKG_NAME 编译失败，尝试依赖方式编译"
                  make package/${PKG_NAME}/compile -j$(nproc) || echo "警告: 包 $PKG_NAME 再次编译失败"
                }
              done < /workdir/package_list/to_compile.txt
            else
              # 批量包一次编译
              echo "批量编译多个包..."
              make -j$(nproc) || make -j1 V=s
            fi
          else
            echo "没有包需要更新，跳过编译步骤"
          fi
          
          # 最后确保所有内容正确生成
          echo "最终构建固件..."
          make -j$(nproc) || make -j1 V=s
        fi
        
        # 5. 更新包记录
        cp /workdir/package_list/current_packages.txt /workdir/package_list/previous_packages.txt
        
        # 6. 保存已编译包（可选，视空间情况而定）
        echo "备份编译后的包..."
        mkdir -p /workdir/compiled_packages
        find bin/packages/ -type f -name "*.ipk" -exec cp -f {} /workdir/compiled_packages/ \; || true
        
        # 显示编译结果
        echo "状态：成功"
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
        # 显示CCACHE统计信息
        ccache -s
        
        # 显示磁盘使用情况
        df -hT

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        rm -rf packages
        mkdir -p firmware
        find . -maxdepth 1 -name "*combined*" -or -name "*sysupgrade*" | xargs -i cp {} ./firmware/
        cp /workdir/openwrt/.config ./firmware/config.txt
        zip -r firmware.zip firmware
        echo "FIRMWARE=$PWD/firmware" >> $GITHUB_ENV
        echo "FIRMWARE_ZIP=$PWD/firmware.zip" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "## OpenWrt固件构建完成 📦" > release.txt
        echo "📅 构建时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        echo "📂 固件下载" >> release.txt
        echo "⚠️ 请在刷机前先做好备份！" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧的工作流运行记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

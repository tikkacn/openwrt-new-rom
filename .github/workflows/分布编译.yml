name: 分布编译OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      status: ${{ steps.prepare.outputs.status }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        # 确认 openwrt 目录是否存在
        if [ -d "openwrt" ]; then
          echo "OpenWrt source code cloned successfully."
        else
          echo "Failed to clone OpenWrt source code."
          exit 1
        fi

    - name: Load custom feeds
      working-directory: /workdir/openwrt
      run: |
        # 检查 feeds.conf.default 文件
        if [ -e "$FEEDS_CONF" ]; then
          mv "$FEEDS_CONF" feeds.conf.default
        else
          echo "feeds.conf.default not found, skipping..."
        fi

        # 检查 diy-part1.sh 文件是否存在并执行
        if [ -f "$DIY_P1_SH" ]; then
          chmod +x "$DIY_P1_SH"
          $GITHUB_WORKSPACE/$DIY_P1_SH
        else
          echo "diy-part1.sh not found, skipping..."
        fi

    - name: Cache Source Code
      uses: actions/cache@v3
      with:
        path: openwrt
        key: openwrt-source-${{ github.sha }}

    - name: Set prepare status
      id: prepare
      run: echo "status=success" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        part: [1, 2]  # 分成两部分并行编译
    
    steps:
    - name: Restore Source Cache
      uses: actions/cache@v3
      with:
        path: openwrt
        key: openwrt-source-${{ github.sha }}

    - name: Update feeds
      working-directory: /workdir/openwrt
      run: ./scripts/feeds update -a

    - name: Install feeds
      working-directory: /workdir/openwrt
      run: ./scripts/feeds install -a

    - name: Load custom configuration
      working-directory: /workdir/openwrt
      run: |
        # 检查并移动 files 目录
        [ -e files ] && mv files files || echo "files directory not found"

        # 检查并移动 .config 文件
        if [ -e "$CONFIG_FILE" ]; then
          mv "$CONFIG_FILE" .config
        else
          echo ".config not found, exiting..."
          exit 1
        fi

        # 检查 diy-part2.sh 文件是否存在并执行
        if [ -f "$DIY_P2_SH" ]; then
          chmod +x "$DIY_P2_SH"
          $GITHUB_WORKSPACE/$DIY_P2_SH
        else
          echo "diy-part2.sh not found, skipping..."
        fi

    - name: Download package
      working-directory: /workdir/openwrt
      id: package
      run: |
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware (Part ${{ matrix.part }})
      working-directory: /workdir/openwrt
      id: compile
      run: |
        echo -e "$(nproc) thread compile"
        total_threads=$(nproc)
        threads_per_part=$((total_threads / 2))
        make -j$threads_per_part || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload firmware to Releases
      if: env.UPLOAD_RELEASE == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag: ${{ github.ref }}
        files: |
          openwrt/bin/targets/*/*/*.bin
          openwrt/bin/targets/*/*/*.img
          openwrt/bin/targets/*/*/*.gz
          openwrt/bin/targets/*/*/*.ipk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

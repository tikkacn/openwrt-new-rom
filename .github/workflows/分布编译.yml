name: 分布编译OpenWrt
on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  setup:
    runs-on: ubuntu-22.04

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |- 
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Clone source code
      working-directory: ./
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Load custom feeds
      run: |
        [ -e feeds.conf.default ] && mv feeds.conf.default openwrt/feeds.conf.default
        chmod +x diy-part1.sh
        cd openwrt
        $GITHUB_WORKSPACE/diy-part1.sh

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e .config ] && mv .config openwrt/.config
        chmod +x diy-part2.sh
        cd openwrt
        $GITHUB_WORKSPACE/diy-part2.sh
        # 确保.config文件存在
        if [ ! -f .config ]; then
          echo "Error: .config file not found"
          exit 1
        fi

    - name: Cache feeds and config
      uses: actions/cache@v2
      with:
        path: |
          openwrt/feeds
          openwrt/.config
        key: ${{ runner.os }}-feeds-${{ hashFiles('openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-feeds-

  compile-base:
    needs: setup
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: |
          openwrt/feeds
          openwrt/.config
        key: ${{ runner.os }}-feeds-${{ hashFiles('openwrt/.config') }}

    - name: Debug Node Environment
      run: |
        cd openwrt
        echo "Current directory: $(pwd)"
        ls -la
        echo "Config file content:"
        cat .config
        echo "Environment variables:"
        env | grep -E 'REPO|FEEDS|CONFIG'

    - name: Download package
      run: |
        cd openwrt
        make defconfig V=s
        if [ $? -ne 0 ]; then
          echo "make defconfig failed"
          exit 1
        fi
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile base packages
      run: |
        cd openwrt
        make -j$(nproc) package/feeds/base/*

  compile-all:
    needs: compile-base
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: |
          openwrt/feeds
          openwrt/.config
          openwrt/dl
        key: ${{ runner.os }}-feeds-${{ hashFiles('openwrt/.config') }}

    - name: Compile all packages and firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

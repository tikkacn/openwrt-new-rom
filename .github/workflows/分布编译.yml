name: 分布式编译OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      status: ${{ steps.prepare.outputs.status }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext \
          gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 \
          libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
          python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools \
          subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev \
          python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt || { echo "Failed to clone OpenWrt"; exit 1; }
        echo "OpenWrt source code cloned successfully."

    - name: Load custom feeds
      working-directory: /workdir/openwrt
      run: |
        if [ -e "$FEEDS_CONF" ]; then
          if [ "$FEEDS_CONF" != "feeds.conf.default" ]; then
            mv "$FEEDS_CONF" feeds.conf.default || { echo "Failed to rename feeds.conf.default"; exit 1; }
          else
            echo "feeds.conf.default is already set, skipping..."
          fi
        else
          echo "$FEEDS_CONF not found, skipping..."
        fi

        if [ -f "$DIY_P1_SH" ]; then
          chmod +x "$DIY_P1_SH"
          $GITHUB_WORKSPACE/$DIY_P1_SH || { echo "Failed to run diy-part1.sh"; exit 1; }
        else
          echo "diy-part1.sh not found, skipping..."
        fi

    - name: Cache Source Code
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-source-${{ github.sha }}

    - name: Set prepare status
      id: prepare
      run: echo "status=success" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        part: [1, 2]  # 分成两部分并行编译
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Restore Source Cache
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-source-${{ github.sha }}

    - name: Prepare source code
      run: |
        if [ -d "/workdir/openwrt" ]; then
          echo "OpenWrt source code already in /workdir/"
        else
          echo "Creating directory structure"
          sudo mkdir -p /workdir
          sudo cp -r openwrt /workdir/
          sudo chown -R $USER:$GROUPS /workdir/openwrt
          echo "OpenWrt source code copied to /workdir/"
        fi

    - name: Update feeds
      working-directory: /workdir/openwrt
      run: ./scripts/feeds update -a || { echo "Failed to update feeds"; exit 1; }

    - name: Install feeds
      working-directory: /workdir/openwrt
      run: ./scripts/feeds install -a || { echo "Failed to install feeds"; exit 1; }

    - name: Load custom configuration
      working-directory: /workdir/openwrt
      run: |
        # 检查并移动 files 目录
        [ -e files ] && mv files files || echo "files directory not found"

        # 检查并移动 .config 文件
        if [ -e "$CONFIG_FILE" ]; then
          mv "$CONFIG_FILE" .config
        else
          echo ".config not found, exiting..."
          exit 1
        fi

        # 检查 diy-part2.sh 文件是否存在并执行
        if [ -f "$DIY_P2_SH" ]; then
          chmod +x "$DIY_P2_SH"
          $GITHUB_WORKSPACE/$DIY_P2_SH || { echo "Failed to run diy-part2.sh"; exit 1; }
        else
          echo "diy-part2.sh not found, skipping..."
        fi

    - name: Download package
      working-directory: /workdir/openwrt
      id: package
      run: |
        make defconfig || { echo "Failed to run defconfig"; exit 1; }
        make download -j8 || { echo "Failed to download packages"; exit 1; }
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware (Part ${{ matrix.part }})
      working-directory: /workdir/openwrt
      id: compile
      run: |
        echo -e "$(nproc) thread compile"
        if [ "${{ matrix.part }}" = "1" ]; then
          make -j$(nproc) || make -j1 V=s || { echo "Compile failed at part 1"; exit 1; }
        elif [ "${{ matrix.part }}" = "2" ]; then
          make -j$(($(nproc) / 2)) || make -j1 V=s || { echo "Compile failed at part 2"; exit 1; }
        fi
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage
      if: always()
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ matrix.part }}
        path: /workdir/openwrt/bin

    - name: Organize files
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && !failure() && matrix.part == 2
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled() && matrix.part == 2
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

  upload:
    needs: build
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
    - name: Download firmware
      uses: actions/download-artifact@v3
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: firmware

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: firmware/*

  cleanup:
    needs: [build, upload]
    if: always()
    runs-on: ubuntu-22.04
    
    steps:
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

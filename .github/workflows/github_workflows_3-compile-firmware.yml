name: "3. Compile OpenWrt Firmware"

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["2. Prepare OpenWrt Compile"]
    types:
      - completed

permissions:
  contents: read
  packages: read
  actions: write

env:
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  compile:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
        docker-images: true

    - name: Cache apt packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/depends-ubuntu-2204') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Setup Build Environment
      run: |
        # Update package lists
        sudo rm -rf /etc/apt/sources.list.d/*
        sudo apt-get update
        
        # Install essential packages with error handling
        sudo apt-get install -y \
          build-essential \
          clang \
          flex \
          g++ \
          gcc-multilib \
          gettext \
          libncurses5-dev \
          libssl-dev \
          python3-distutils \
          python3-setuptools \
          python3-dev \
          unzip \
          zlib1g-dev || {
            echo "Failed to install packages"
            exit 1
          }
        
        # Verify Python setup
        sudo ln -sf /usr/bin/python3 /usr/bin/python
        python3 -V
        python3 -c "import distutils" || { echo "Error: distutils import failed"; exit 1; }
        python3 -c "import setuptools" || { echo "Error: setuptools import failed"; exit 1; }

    - name: Checkout
      uses: actions/checkout@main

    - name: Download Build Files
      uses: actions/download-artifact@v4
      with:
        name: OpenWrt_BuildFiles
        path: openwrt/
        repository: ${{ github.repository }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Set Permissions
      run: |
        ls -la openwrt/
        chmod -R +x openwrt/scripts
        chmod -R +x openwrt/target
        find openwrt/scripts -type f -exec test -x {} \; || echo "Warning: Some scripts may not be executable"

    - name: Initialize Build Log Directory
      run: |
        mkdir -p logs/$(date +%Y-%m-%d)
        WORKFLOW_LOG_DIR="logs/$(date +%Y-%m-%d)/${GITHUB_RUN_NUMBER}"
        mkdir -p "$WORKFLOW_LOG_DIR"
        echo "WORKFLOW_LOG_DIR=$WORKFLOW_LOG_DIR" >> $GITHUB_ENV

    - name: Record Build Environment
      run: |
        {
          echo "=== Build Environment Information ==="
          echo "Date: $(date)"
          echo "GitHub Run Number: $GITHUB_RUN_NUMBER"
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Runner: $RUNNER_NAME"
          echo "OS: $(uname -a)"
          echo "Python: $(python3 --version)"
          echo "GCC: $(gcc --version | head -n1)"
          echo "Memory:"
          free -h
          echo "Disk Space:"
          df -h
          echo "Environment Variables:"
          env | sort
        } 2>&1 | tee "$WORKFLOW_LOG_DIR/environment.log"

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        
        # 记录开始时间
        START_TIME=$(date +%s)
        
        # 主编译过程
        {
          echo "=== Stage 1: Make defconfig ==="
          make defconfig V=s
          
          echo -e "\n=== Stage 2: Full Build Process ==="
          make -j$(nproc) V=s || {
            echo "Parallel build failed with $(nproc) jobs, trying with half..."
            make -j$(($(nproc)/2)) V=s || {
              echo "Half parallel build failed, trying single thread..."
              make -j1 V=s
            }
          }
        } 2>&1 | tee "$WORKFLOW_LOG_DIR/build.log"
        
        # 记录结束时间和编译时长
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "Build duration: $((DURATION/3600))h $((DURATION%3600/60))m $((DURATION%60))s" | \
          tee -a "$WORKFLOW_LOG_DIR/build.log"
        
        # 检查编译结果
        if [ -d bin/targets ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Build completed successfully" | tee -a "$WORKFLOW_LOG_DIR/build.log"
        else
          echo "Build failed - no targets directory" | tee -a "$WORKFLOW_LOG_DIR/build.log"
          exit 1
        fi

    - name: Generate Error Summary
      if: failure()
      run: |
        {
          echo "## Build Failure Summary"
          echo "### Last 50 lines of build log"
          tail -n 50 "$WORKFLOW_LOG_DIR/build.log"
          echo "### Memory State at Failure"
          free -h
          echo "### Disk State at Failure"
          df -h
        } > $GITHUB_STEP_SUMMARY

    - name: Collect Additional Build Information
      if: always()
      run: |
        {
          echo "=== Final System State ==="
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h
          echo "Top processes:"
          ps aux --sort=-%mem | head -10
        } 2>&1 | tee -a "$WORKFLOW_LOG_DIR/system_state.log"
        
        # 保存配置文件
        [ -f openwrt/.config ] && cp openwrt/.config "$WORKFLOW_LOG_DIR/final.config"
        [ -f openwrt/tmp/.config.old ] && cp openwrt/tmp/.config.old "$WORKFLOW_LOG_DIR/original.config"

    - name: Upload Build Logs to Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_Build_Logs_${{ github.run_number }}
        path: ${{ env.WORKFLOW_LOG_DIR }}
        retention-days: 90

    - name: Commit Logs to Repository
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加和提交日志文件
        git add logs/
        git commit -m "Add build logs for run #$GITHUB_RUN_NUMBER" || echo "No changes to commit"
        
        # 尝试推送更改到仓库
        git push || {
          echo "Push failed, trying to pull and merge"
          git pull --rebase
          git push
        }

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_Firmware_${{ github.run_number }}
        path: ${{ env.FIRMWARE }}
        retention-days: 90

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow

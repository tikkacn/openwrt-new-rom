name: 分布编译V2

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: '0 1 * * 5'  # 每周五凌晨1点运行

jobs:
  prepare:
    runs-on: ubuntu-20.04
    outputs:
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Date
        id: date
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
            git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools \
            libpython3-dev rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone Source Code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone https://github.com/coolsnowwolf/lede openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Cache Source Code
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-base-${{ steps.date.outputs.date }}

  feeds:
    needs: prepare
    runs-on: ubuntu-20.04
    steps:
      - name: Restore Source Code
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-base-${{ needs.prepare.outputs.date }}

      - name: Load Custom Feeds
        run: |
          [ -e feeds.conf.default ] && mv feeds.conf.default /workdir/openwrt/feeds.conf.default
          cd /workdir/openwrt
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Cache Feeds
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-feeds-${{ needs.prepare.outputs.date }}

  config:
    needs: feeds
    runs-on: ubuntu-20.04
    steps:
      - name: Restore Feeds
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-feeds-${{ needs.prepare.outputs.date }}

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files /workdir/openwrt/files
          [ -e .config ] && mv .config /workdir/openwrt/.config
          cd /workdir/openwrt
          make defconfig

      - name: Cache Config
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-config-${{ needs.prepare.outputs.date }}

  toolchain:
    needs: config
    runs-on: ubuntu-20.04
    steps:
      - name: Restore Config
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-config-${{ needs.prepare.outputs.date }}

      - name: Compile Tools & Toolchain
        id: compile
        run: |
          cd /workdir/openwrt
          echo -e "$(nproc) thread compile"
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)

      - name: Cache Toolchain
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-toolchain-${{ needs.prepare.outputs.date }}

  kernel:
    needs: toolchain
    runs-on: ubuntu-20.04
    steps:
      - name: Restore Toolchain
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-toolchain-${{ needs.prepare.outputs.date }}

      - name: Compile Kernel
        id: compile
        run: |
          cd /workdir/openwrt
          make target/compile -j$(nproc) || make target/compile -j1 V=s

      - name: Cache Kernel
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-kernel-${{ needs.prepare.outputs.date }}

  packages-1:
    needs: kernel
    runs-on: ubuntu-20.04
    steps:
      - name: Restore Kernel Build
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-kernel-${{ needs.prepare.outputs.date }}

      - name: Compile Base Packages
        id: compile_base
        run: |
          cd /workdir/openwrt
          make package/libs/compile -j$(nproc) || make package/libs/compile -j1 V=s
          make package/base-files/compile -j$(nproc)
          make package/network/config/netifd/compile -j$(nproc)

      - name: Cache Base Packages
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-packages-1-${{ needs.prepare.outputs.date }}

  packages-2:
    needs: kernel
    runs-on: ubuntu-20.04
    steps:
      - name: Restore Kernel Build
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-kernel-${{ needs.prepare.outputs.date }}

      - name: Compile Luci
        id: compile_luci
        run: |
          cd /workdir/openwrt
          make package/feeds/luci/compile -j$(nproc) || make package/feeds/luci/compile -j1 V=s

      - name: Cache Luci
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-packages-2-${{ needs.prepare.outputs.date }}

  packages-3:
    needs: kernel
    runs-on: ubuntu-20.04
    steps:
      - name: Restore Kernel Build
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-kernel-${{ needs.prepare.outputs.date }}

      - name: Compile Network Packages
        id: compile_network
        run: |
          cd /workdir/openwrt
          make package/feeds/helloworld/compile -j$(nproc) || make package/feeds/helloworld/compile -j1 V=s
          make package/feeds/passwall/compile -j$(nproc) || make package/feeds/passwall/compile -j1 V=s
          make package/feeds/passwall_packages/compile -j$(nproc) || make package/feeds/passwall_packages/compile -j1 V=s
          make package/feeds/openclash/compile -j$(nproc) || make package/feeds/openclash/compile -j1 V=s

      - name: Cache Network Packages
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-packages-3-${{ needs.prepare.outputs.date }}

  final:
    needs: [packages-1, packages-2, packages-3]
    runs-on: ubuntu-20.04
    steps:
      - name: Restore All Packages
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt
          key: openwrt-packages-3-${{ needs.prepare.outputs.date }}

      - name: Generate Firmware
        id: compile
        run: |
          cd /workdir/openwrt
          make package/index
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT

      - name: Upload Firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware_${{ steps.compile.outputs.DEVICE_NAME }}_${{ steps.compile.outputs.FILE_DATE }}
          path: /workdir/openwrt/bin/targets/

      - name: Generate release tag
        id: tag
        if: steps.compile.outputs.status == 'success'
        run: |
          echo "release_tag=OpenWrt_${{ steps.compile.outputs.DEVICE_NAME }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "This is OpenWrt firmware for ${{ steps.compile.outputs.DEVICE_NAME }}" >> release.txt
          echo "Compiled on $(date +"%Y-%m-%d %H:%M:%S")" >> release.txt

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: /workdir/openwrt/bin/targets/*/*/*

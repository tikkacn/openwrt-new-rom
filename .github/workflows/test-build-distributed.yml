name: OpenWrt 分布式缓存测试

on:
  workflow_dispatch:
    inputs:
      test_stage:
        description: '测试阶段'
        required: true
        default: 'prepare'
        type: choice
        options:
          - prepare   # 环境准备
          - base      # 基础编译
          - packages  # 包编译测试
          - firmware  # 固件测试

jobs:
  prepare:
    if: github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    outputs:
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取日期
        id: date
        run: |
          echo "date=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
          echo "开始时间: $(date +%Y-%m-%d_%H:%M:%S)"

      - name: 初始化环境
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
            git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools \
            libpython3-dev rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: 克隆源码
        run: |
          git clone --depth=1 https://github.com/coolsnowwolf/lede openwrt
          cd openwrt

      - name: 最小化配置
        run: |
          cd openwrt
          cat > .config << 'EOF'
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y
CONFIG_TARGET_x86_64_DEVICE_generic=y
CONFIG_PACKAGE_base-files=y
CONFIG_PACKAGE_libc=y
CONFIG_PACKAGE_libgcc=y
EOF
          make defconfig
          echo "测试配置:"
          cat .config

      - name: 缓存环境
        uses: actions/cache/save@v4
        with:
          path: |
            openwrt
            !openwrt/.git
          key: openwrt-test-env-${{ steps.date.outputs.date }}

  base:
    needs: prepare
    if: github.event.inputs.test_stage == 'base' || github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    steps:
      - name: 恢复环境
        uses: actions/cache/restore@v4
        with:
          path: openwrt
          key: openwrt-test-env-${{ needs.prepare.outputs.date }}
          fail-on-cache-miss: true

      - name: 测试工具链
        run: |
          cd openwrt
          echo "========== 编译工具链 =========="
          make toolchain/compile -j1 V=s || make toolchain/compile -j1 V=sc

      - name: 缓存工具链
        uses: actions/cache/save@v4
        with:
          path: |
            openwrt/staging_dir
            openwrt/build_dir
            openwrt/toolchain
          key: openwrt-test-toolchain-${{ needs.prepare.outputs.date }}

  packages:
    needs: [prepare, base]
    if: github.event.inputs.test_stage == 'packages' || github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    steps:
      - name: 恢复环境
        uses: actions/cache/restore@v4
        with:
          path: openwrt
          key: openwrt-test-env-${{ needs.prepare.outputs.date }}
          fail-on-cache-miss: true

      - name: 恢复工具链
        uses: actions/cache/restore@v4
        with:
          path: |
            openwrt/staging_dir
            openwrt/build_dir
            openwrt/toolchain
          key: openwrt-test-toolchain-${{ needs.prepare.outputs.date }}
          fail-on-cache-miss: true

      - name: 测试基础包
        run: |
          cd openwrt
          echo "========== 编译基础包 =========="
          make package/base-files/compile -j1 V=s
          make package/libs/toolchain/compile -j1 V=s

      - name: 缓存编译结果
        uses: actions/cache/save@v4
        with:
          path: openwrt
          key: openwrt-test-packages-${{ needs.prepare.outputs.date }}

  firmware:
    needs: [prepare, base, packages]
    if: github.event.inputs.test_stage == 'firmware' || github.event.inputs.test_stage == 'prepare'
    runs-on: ubuntu-20.04
    steps:
      - name: 恢复所有缓存
        uses: actions/cache/restore@v4
        with:
          path: openwrt
          key: openwrt-test-packages-${{ needs.prepare.outputs.date }}
          fail-on-cache-miss: true

      - name: 测试固件打包
        run: |
          cd openwrt
          echo "========== 测试固件打包 =========="
          make target/install -j1 V=s || make target/install -j1 V=sc
          echo "构建时间: $(date +%Y-%m-%d_%H:%M:%S)"

      - name: 上传测试日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-build-logs
          path: openwrt/logs/
          compression-level: 9

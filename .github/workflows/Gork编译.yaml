name: Build X86_64 OpenWrt（GORK编译）

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    outputs:
      commit_sha: ${{ steps.set-output.outputs.commit_sha }}
    steps:
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: "Optimize Disk Space"
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: Freeing up disk space
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 2048
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev python3-setuptools
          sudo -E apt-get -qq autoremove --purge -y
          sudo -E apt-get -qq clean
          sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
          /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
          sudo timedatectl set-timezone "$TZ"
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE

      - name: Clone source code
        working-directory: ./
        run: |
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

      - name: Load custom feeds
        run: |
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
          if [ -e $FEEDS_CONF ]; then
            mv $FEEDS_CONF openwrt/feeds.conf.default
          else
            echo "Error: $FEEDS_CONF not found"
            exit 1
          fi
          if [ -e $DIY_P1_SH ]; then
            chmod +x $DIY_P1_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P1_SH
          else
            echo "Error: $DIY_P1_SH not found"
            exit 1
          fi

      - name: Set output
        id: set-output
        run: echo "::set-output name=commit_sha::$(git rev-parse HEAD)"

      - name: Upload source code
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: ./

  update-feeds:
    needs: prepare
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    steps:
      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: ./

      - name: Check permissions and install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev python3-setuptools

      - name: Set permissions and update and install feeds
        run: |
          cd openwrt
          chmod +x ./scripts/feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Cache packages
        uses: actions/cache@v3
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-openwrt-cache-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-cache-

      - name: Upload updated source code
        uses: actions/upload-artifact@v4
        with:
          name: updated-source-code
          path: ./

  compile:
    needs: update-feeds
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    steps:
      - name: Download updated source code
        uses: actions/download-artifact@v4
        with:
          name: updated-source-code
          path: ./

      - name: Check permissions and install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev python3-setuptools

      - name: Check .config file permissions
        run: |
          ls -l $CONFIG_FILE

      - name: Check .config file content
        run: |
          cat $CONFIG_FILE

      - name: Load custom configuration
        run: |
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
          if [ -e files ]; then
            mv files openwrt/files
          fi
          if [ -e $CONFIG_FILE ]; then
            echo "Found .config file in the root directory"
            if [ ! -d openwrt ]; then
              echo "Error: openwrt directory not found"
              exit 1
            fi
            mv $CONFIG_FILE openwrt/.config
            echo "Moved .config to openwrt directory"
          else
            echo "Error: $CONFIG_FILE not found in the root directory"
            exit 1
          fi
          if [ -e $DIY_P2_SH ]; then
            chmod +x $DIY_P2_SH
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_P2_SH
          else
            echo "Error: $DIY_P2_SH not found"
            exit 1
          fi

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          # 第一阶段：并行编译所有包
          make -j$(nproc) -k > log.txt 2>&1 || true
          # 第二阶段：编译失败的包
          failed_packages=$(grep -oP '(?<=FAILED: ).*(?=\n)' log.txt | sort | uniq)
          if [ -n "$failed_packages" ]; then
            echo "Failed packages: $failed_packages"
            for package in $failed_packages; do
              echo "Retrying package: $package"
              make package/$package/compile V=s
            done
          fi
          # 检查所有包是否都已编译成功
          if make -j1 V=s; then
            echo "status=success" >> $GITHUB_OUTPUT
            grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
            [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
            echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Check space usage
        if: always()
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

  upload-and-release:
    needs: compile
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - name: Download firmware directory
        uses: actions/download-artifact@v4
        with:
          name: OpenWrt_firmware${{ needs.compile.outputs.DEVICE_NAME }}${{ needs.compile.outputs.FILE_DATE }}
          path: ./

      - name: Check permissions and install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y curl

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: env.UPLOAD_COWTRANSFER == 'true'
        run: |
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${{ env.FIRMWARE }} 2>&1 | tee cowtransfer.log
          if [ $? -eq 0 ]; then
            echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
            echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
          else
            echo "Cowtransfer upload failed"
            exit 1
          fi

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: env.UPLOAD_WETRANSFER == 'true'
        run: |
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${{ env.FIRMWARE }} 2>&1 | tee wetransfer.log
          if [ $? -eq 0 ]; then
            echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
            echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
          else
            echo "WeTransfer upload failed"
            exit 1
          fi

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true'
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wet<|eos|>

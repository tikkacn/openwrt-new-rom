name: Build X86_64 OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      commit_sha: ${{ steps.set-output.outputs.commit_sha }}
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo timedatectl set-timezone "$TZ"
        sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Clone source code
      working-directory: ./
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Check for required files
      run: |
        if [ ! -f $CONFIG_FILE ]; then
          echo "Error: $CONFIG_FILE file not found"
          exit 1
        fi
        if [ ! -f $FEEDS_CONF ]; then
          echo "Error: $FEEDS_CONF file not found"
          exit 1
        fi

    - name: Set output
      id: set-output
      run: echo "::set-output name=commit_sha::$(git rev-parse HEAD)"

  setup-feeds:
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        echo "REPO_URL=${{ env.REPO_URL }}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ env.REPO_BRANCH }}" >> $GITHUB_ENV
        echo "FEEDS_CONF=${{ env.FEEDS_CONF }}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${{ env.CONFIG_FILE }}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${{ env.DIY_P1_SH }}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${{ env.DIY_P2_SH }}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${{ env.UPLOAD_BIN_DIR }}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${{ env.UPLOAD_FIRMWARE }}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${{ env.UPLOAD_COWTRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${{ env.UPLOAD_WETRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${{ env.UPLOAD_RELEASE }}" >> $GITHUB_ENV
        echo "TZ=${{ env.TZ }}" >> $GITHUB_ENV

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Cache feeds
      uses: actions/cache@v3
      with:
        path: openwrt/feeds
        key: feeds-${{ runner.os }}-${{ needs.prepare.outputs.commit_sha }}
        restore-keys: |
          feeds-${{ runner.os }}-

    - name: Upload feeds directory
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-feeds
        path: openwrt/

  configure:
    needs: setup-feeds
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        echo "REPO_URL=${{ env.REPO_URL }}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ env.REPO_BRANCH }}" >> $GITHUB_ENV
        echo "FEEDS_CONF=${{ env.FEEDS_CONF }}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${{ env.CONFIG_FILE }}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${{ env.DIY_P1_SH }}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${{ env.DIY_P2_SH }}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${{ env.UPLOAD_BIN_DIR }}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${{ env.UPLOAD_FIRMWARE }}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${{ env.UPLOAD_COWTRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${{ env.UPLOAD_WETRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${{ env.UPLOAD_RELEASE }}" >> $GITHUB_ENV
        echo "TZ=${{ env.TZ }}" >> $GITHUB_ENV

    - name: Download feeds directory
      uses: actions/download-artifact@v3
      with:
        name: openwrt-feeds
        path: openwrt/

    - name: Restore feeds cache
      uses: actions/cache@v3
      with:
        path: openwrt/feeds
        key: feeds-${{ runner.os }}-${{ needs.prepare.outputs.commit_sha }}

    - name: Load custom configuration
      run: |
        [ -e files ] && cp -r files openwrt/files
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Cache dl directory
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: dl-${{ runner.os }}-${{ needs.prepare.outputs.commit_sha }}
        restore-keys: |
          dl-${{ runner.os }}-

    - name: Upload configured directory
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-configured
        path: openwrt/

  compile:
    needs: configure
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        echo "REPO_URL=${{ env.REPO_URL }}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ env.REPO_BRANCH }}" >> $GITHUB_ENV
        echo "FEEDS_CONF=${{ env.FEEDS_CONF }}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${{ env.CONFIG_FILE }}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${{ env.DIY_P1_SH }}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${{ env.DIY_P2_SH }}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${{ env.UPLOAD_BIN_DIR }}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${{ env.UPLOAD_FIRMWARE }}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${{ env.UPLOAD_COWTRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${{ env.UPLOAD_WETRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${{ env.UPLOAD_RELEASE }}" >> $GITHUB_ENV
        echo "TZ=${{ env.TZ }}" >> $GITHUB_ENV

    - name: Download configured directory
      uses: actions/download-artifact@v3
      with:
        name: openwrt-configured
        path: openwrt/

    - name: Restore dl cache
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: dl-${{ runner.os }}-${{ needs.prepare.outputs.commit_sha }}

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

  upload:
    needs: compile
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        echo "REPO_URL=${{ env.REPO_URL }}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ env.REPO_BRANCH }}" >> $GITHUB_ENV
        echo "FEEDS_CONF=${{ env.FEEDS_CONF }}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${{ env.CONFIG_FILE }}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${{ env.DIY_P1_SH }}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${{ env.DIY_P2_SH }}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${{ env.UPLOAD_BIN_DIR }}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${{ env.UPLOAD_FIRMWARE }}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${{ env.UPLOAD_COWTRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${{ env.UPLOAD_WETRANSFER }}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${{ env.UPLOAD_RELEASE }}" >> $GITHUB_ENV
        echo "TZ=${{ env.TZ }}" >> $GITHUB_ENV

    - name: Download firmware directory
      uses: actions/download-artifact@v3
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: firmware/

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress firmware 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress firmware 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: firmware/*

  cleanup:
    needs: upload
    runs-on: ubuntu-22.04
    steps:
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build OpenWrt（Gork编译）

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  BUILD_ROOT: /home/runner/work/openwrt-new-rom/openwrt-new-rom
  RETRY_COUNT: 3
  SLEEP_INTERVAL: 30

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Space Information Before
        run: |
          echo "Before setup:"
          df -hT
          free -h

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
          build-mount-path: ${{ env.BUILD_ROOT }}
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Space Information After
        run: |
          echo "After setup:"
          df -hT
          free -h

      - name: Verify Build Directory
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          echo "Build directory structure:"
          ls -la ${{ env.BUILD_ROOT }}

      - name: Checkout
        uses: actions/checkout@main
        with:
          path: source

      - name: Enhanced Environment Setup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          # 分批安装依赖，减少内存压力
          for pkg in \
            "ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential" \
            "bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext" \
            "gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386" \
            "libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev" \
            "libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz" \
            "mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7" \
            "python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools" \
            "subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev" \
            "python3-setuptools"
          do
            sudo -E apt-get -qq install $pkg
            sleep 1
          done
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: Clone Source Code
        run: |
          cd ${{ env.BUILD_ROOT }}
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          echo "Source code cloned to $(pwd)/openwrt"
          ls -la openwrt

      - name: Load and Update Feeds
        run: |
          cd ${{ env.BUILD_ROOT }}
          [ -e source/$FEEDS_CONF ] && cp source/$FEEDS_CONF openwrt/$FEEDS_CONF
          chmod +x source/$DIY_P1_SH
          cd openwrt
          ${{ env.BUILD_ROOT }}/source/$DIY_P1_SH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Configuration
        run: |
          cd ${{ env.BUILD_ROOT }}
          [ -f "source/.config" ] && cp source/.config openwrt/.config
          [ -d "source/files" ] && cp -r source/files openwrt/files
          chmod +x source/$DIY_P2_SH
          cd openwrt
          ${{ env.BUILD_ROOT }}/source/$DIY_P2_SH
          make defconfig

      - name: Download Package
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \;

      - name: Verify Source Directory
        run: |
          echo "Verifying source directory before caching:"
          ls -la ${{ env.BUILD_ROOT }}/openwrt

      - name: Cache Source and Downloads
        uses: actions/cache/save@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-source-${{ github.sha }}-${{ github.run_id }}

  build-base:
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
          build-mount-path: ${{ env.BUILD_ROOT }}
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Prepare Build Directory
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          echo "Directory prepared:"
          ls -la ${{ env.BUILD_ROOT }}

      - name: Restore Cache
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-source-${{ github.sha }}-${{ github.run_id }}

      - name: Clone Source Code If Cache Fails
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_ROOT }}
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          echo "Source code cloned to $(pwd)/openwrt"
          ls -la openwrt

      - name: Verify Build Environment
        run: |
          if [ ! -d "${{ env.BUILD_ROOT }}/openwrt" ]; then
            echo "Error: OpenWrt directory not found"
            exit 1
          fi
          echo "OpenWrt directory found and structure:"
          ls -la ${{ env.BUILD_ROOT }}/openwrt

      - name: Build Base System
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt || {
            echo "Failed to change to OpenWrt directory"
            exit 1
          }
          
          make defconfig
          
          # 构建基础工具链和主要依赖
          for target in tools/install toolchain/install; do
            for attempt in $(seq 1 $RETRY_COUNT); do
              echo "Building $target (attempt $attempt)"
              if make -j$(nproc) $target; then
                break
              elif [ $attempt -eq $RETRY_COUNT ]; then
                echo "Failed to build $target after $RETRY_COUNT attempts"
                exit 1
              fi
              echo "Retrying after $SLEEP_INTERVAL seconds..."
              df -h
              sleep $SLEEP_INTERVAL
            done
          done

      - name: Cache Build Results
        uses: actions/cache/save@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-base-${{ github.sha }}-${{ github.run_id }}

  build-packages:
    needs: build-base
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        chunk: [1, 2, 3]
      fail-fast: false
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
          build-mount-path: ${{ env.BUILD_ROOT }}
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Prepare Build Directory
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          echo "Directory prepared:"
          ls -la ${{ env.BUILD_ROOT }}

      - name: Restore Cache
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-base-${{ github.sha }}-${{ github.run_id }}

      - name: Clone Source Code If Cache Fails
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_ROOT }}
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          echo "Source code cloned to $(pwd)/openwrt"
          ls -la openwrt

      - name: Verify Build Environment
        run: |
          if [ ! -d "${{ env.BUILD_ROOT }}/openwrt" ]; then
            echo "Error: OpenWrt directory not found"
            exit 1
          fi
          echo "OpenWrt directory found and structure:"
          ls -la ${{ env.BUILD_ROOT }}/openwrt

      - name: Build Packages (Chunk ${{ matrix.chunk }})
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt || exit 1
          
          # 定义构建函数
          build_with_retry() {
            local target=$1
            for attempt in $(seq 1 $RETRY_COUNT); do
              echo "Building $target (attempt $attempt)"
              if make -j1 V=s $target; then
                return 0
              elif [ $attempt -eq $RETRY_COUNT ]; then
                echo "Failed to build $target after $RETRY_COUNT attempts"
                return 1
              fi
              df -h
              echo "Retrying after $SLEEP_INTERVAL seconds..."
              sleep $SLEEP_INTERVAL
            done
          }
          
          # 根据分块构建不同的包
          case ${{ matrix.chunk }} in
            1)
              # 核心库和基础包
              for pkg in \
                "package/libs/toolchain/compile" \
                "package/libs/mbedtls/compile" \
                "package/libs/openssl/compile" \
                "package/libs/zlib/compile"
              do
                build_with_retry "$pkg" || exit 1
              done
              ;;
            2)
              # 网络相关包
              ./scripts/feeds update -a
              ./scripts/feeds install -a
              for pkg in \
                "package/network/config/firewall4/compile" \
                "package/network/services/dnsmasq/compile" \
                "package/network/services/dropbear/compile" \
                "package/network/utils/iproute2/compile"
              do
                build_with_retry "$pkg" || exit 1
                sleep 10
              done
              ;;
            3)
              # 其他包和依赖
              for pkg in "package/utils" "package/system" "package/firmware"; do
                build_with_retry "$pkg/compile" || echo "Some packages in $pkg failed but continuing..."
                sleep 10
              done
              ;;
          esac

      - name: Verify Build Results
        run: |
          echo "Package build results:"
          ls -la ${{ env.BUILD_ROOT }}/openwrt/bin || echo "No bin directory found"

      - name: Upload Package Chunk
        uses: actions/upload-artifact@v4
        with:
          name: packages-chunk-${{ matrix.chunk }}
          path: ${{ env.BUILD_ROOT }}/openwrt/bin
          retention-days: 1

  build-firmware:
    needs: build-packages
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
          build-mount-path: ${{ env.BUILD_ROOT }}
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Prepare Build Directory
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          echo "Directory prepared:"
          ls -la ${{ env.BUILD_ROOT }}

      - name: Restore Cache
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-base-${{ github.sha }}-${{ github.run_id }}

      - name: Clone Source Code If Cache Fails
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.BUILD_ROOT }}
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          echo "Source code cloned to $(pwd)/openwrt"
          ls -la openwrt

      - name: Verify Build Environment
        run: |
          if [ ! -d "${{ env.BUILD_ROOT }}/openwrt" ]; then
            echo "Error: OpenWrt directory not found"
            exit 1
          fi
          echo "OpenWrt directory found and structure:"
          ls -la ${{ env.BUILD_ROOT }}/openwrt

      - name: Download Package Chunks
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.BUILD_ROOT }}/chunks
          merge-multiple: true

      - name: Verify and Merge Chunks
        run: |
          cd ${{ env.BUILD_ROOT }}
          echo "Chunks directory structure:"
          ls -la chunks || echo "No chunks directory found"
          
          if [ -d "openwrt/bin" ]; then
            echo "OpenWrt bin directory exists, merging chunks..."
            if [ -d "chunks" ]; then
              cp -r chunks/packages-chunk-*/* openwrt/bin/ || echo "No chunks to copy"
            fi
          else
            echo "Error: OpenWrt bin directory not found"
            exit 1
          fi
          
          echo "Final bin directory structure:"
          ls -la openwrt/bin

      - name: Build Firmware
        id: compile
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt || exit 1
          
          make package/index V=s
          
          echo "Building firmware..."
          for attempt in $(seq 1 $RETRY_COUNT); do
            echo "Firmware build attempt $attempt"
            df -h
            if make -j$(nproc) || make -j1 V=s; then
              echo "status=success" >> $GITHUB_OUTPUT
              break
            elif [ $attempt -eq $RETRY_COUNT ]; then
              echo "Failed to build firmware after $RETRY_COUNT attempts"
              exit 1
            fi
            echo "Retrying after $SLEEP_INTERVAL seconds..."
            sleep $SLEEP_INTERVAL
          done
          
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check Space Usage
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "Organized firmware directory structure:"
          ls -la

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          retention-days: 7

  cleanup:
    needs: build-firmware
    runs-on: ubuntu-22.04
    steps:
      - name: Delete Workflow Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            packages-chunk-*
          failOnError: false

      - name: Delete Old Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove Old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true'
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

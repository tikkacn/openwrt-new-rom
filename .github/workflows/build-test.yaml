name: Build X86_64 OpenWrt（分步式）

on:
  schedule:
    - cron: '0 16 * * *'  # UTC 16:00 = 北京时间 0:00
  workflow_dispatch:
    inputs:
      manual_start_stage:
        description: 'Start from stage (1-4)'
        required: true
        default: '1'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  # 修改为使用大容量空间
  WORKDIR: /mnt/openwrt
  OPENWRT_ROOT: /mnt/openwrt/openwrt

jobs:
  check-updates-and-status:
    runs-on: ubuntu-22.04
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      start_stage: ${{ steps.check-status.outputs.start_stage }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Check for updates
      id: check
      run: |
        # 手动触发时直接返回 true
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "Manual trigger, will proceed with build"
          exit 0
        fi

        # 自动触发时检查更新
        git clone --depth=1 ${{ env.REPO_URL }} temp_dir
        cd temp_dir
        LATEST_HASH=$(git rev-parse HEAD)
        LAST_HASH=$(curl -s "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$(basename ${{ github.workflow }})/runs?status=completed&conclusion=success" | jq -r '.workflow_runs[0].head_sha // ""')
        
        ./scripts/feeds update -a
        FEEDS_UPDATED=$(git status -s feeds.conf.default package/feeds | wc -l)
        
        if [ "$LATEST_HASH" != "$LAST_HASH" ] || [ "$FEEDS_UPDATED" -gt 0 ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "Found updates, will proceed with build"
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "No updates found, skipping build"
        fi

    - name: Set start stage
      id: check-status
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "start_stage=${{ github.event.inputs.manual_start_stage }}" >> $GITHUB_OUTPUT
        else
          echo "start_stage=1" >> $GITHUB_OUTPUT
        fi

  stage1-prepare:
    needs: check-updates-and-status
    if: needs.check-updates-and-status.outputs.has_updates == 'true' && (needs.check-updates-and-status.outputs.start_stage == '1')
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget python3 python3-pip python3-ply python3-setuptools ninja-build libpcre3-dev

        # 清理空间并准备工作目录
        echo "=== Before Cleanup ==="
        df -h
        
        # 删除不需要的大型软件包
        sudo apt-get remove --purge -y ghc dotnet-sdk-5.0 llvm* php* azure-cli google-cloud-sdk mongodb-org powershell
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        # 删除大型目录
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/powershell
        sudo rm -rf /usr/share/gradle* /usr/share/maven /usr/share/swift /usr/local/.ghcup
        
        # 准备工作目录
        sudo mkdir -p ${{ env.WORKDIR }}
        sudo chown $USER:$USER ${{ env.WORKDIR }}
        
        echo "=== After Cleanup ==="
        df -h
        echo "Working directory space:"
        df -h ${{ env.WORKDIR }}

    - name: Clone source code
      working-directory: ${{ env.WORKDIR }}
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf ${{ env.OPENWRT_ROOT }} openwrt
        echo "Source code cloned to ${{ env.OPENWRT_ROOT }}"
        ls -la ${{ env.OPENWRT_ROOT }}

    - name: Cache OpenWrt source code
      uses: actions/cache/save@v3
      with:
        path: ${{ env.OPENWRT_ROOT }}
        key: openwrt-source-${{ github.run_id }}-${{ github.sha }}

  stage2-feeds:
    needs: [check-updates-and-status, stage1-prepare]
    if: needs.check-updates-and-status.outputs.has_updates == 'true' && (needs.check ▋

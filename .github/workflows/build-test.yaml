name: Build X86_64 OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  WORKDIR: /workdir
  OPENWRT_ROOT: /workdir/openwrt

jobs:
  stage1-prepare:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Check disk space before cleanup
      run: |
        echo "Available disk space before cleanup:"
        df -h

    - name: Space cleanup
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Initialize build environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2204)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        
        # ÂàõÂª∫Âπ∂ËÆæÁΩÆÂ∑•‰ΩúÁõÆÂΩï
        sudo mkdir -p ${{ env.WORKDIR }}
        sudo chown $USER:$GROUPS ${{ env.WORKDIR }}

    - name: Clone OpenWrt source code
      working-directory: ${{ env.WORKDIR }}
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf ${{ env.OPENWRT_ROOT }} $GITHUB_WORKSPACE/openwrt
        
        # È™åËØÅÊ∫êÁ†Å
        if [ ! -d "${{ env.OPENWRT_ROOT }}" ]; then
          echo "Error: OpenWrt directory not found"
          exit 1
        fi

    - name: Cache OpenWrt source code
      uses: actions/cache/save@v3
      with:
        path: ${{ env.OPENWRT_ROOT }}
        key: openwrt-source-${{ github.run_id }}-${{ github.sha }}
        restore-keys: |
          openwrt-source-${{ github.run_id }}-
          openwrt-source-

# ==== Á¨¨‰∏ÄÈÉ®ÂàÜÁªìÊùüÔºåÁ¨¨‰∫åÈÉ®ÂàÜÂºÄÂßã‰∫é stage2-feeds job ====
  stage2-feeds:
    needs: stage1-prepare
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Restore OpenWrt source code
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.OPENWRT_ROOT }}
        key: openwrt-source-${{ github.run_id }}-${{ github.sha }}
        restore-keys: |
          openwrt-source-${{ github.run_id }}-
          openwrt-source-

    - name: Load custom feeds
      run: |
        if [ -e $FEEDS_CONF ]; then
          mv $FEEDS_CONF ${{ env.OPENWRT_ROOT }}/feeds.conf.default
        fi
        
        if [ -f $DIY_P1_SH ]; then
          chmod +x $DIY_P1_SH
          cd ${{ env.OPENWRT_ROOT }}
          $GITHUB_WORKSPACE/$DIY_P1_SH
        fi

    - name: Update and Install feeds
      run: |
        cd ${{ env.OPENWRT_ROOT }}
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Cache OpenWrt feeds
      uses: actions/cache/save@v3
      with:
        path: ${{ env.OPENWRT_ROOT }}
        key: openwrt-feeds-${{ github.run_id }}-${{ github.sha }}

  stage3-compile:
    needs: stage2-feeds
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Restore OpenWrt feeds
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.OPENWRT_ROOT }}
        key: openwrt-feeds-${{ github.run_id }}-${{ github.sha }}

    - name: Cache compilation tools
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.OPENWRT_ROOT }}/staging_dir
          ${{ env.OPENWRT_ROOT }}/build_dir
          ${{ env.OPENWRT_ROOT }}/dl
        key: ${{ runner.os }}-openwrt-tools-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-openwrt-tools-

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files ${{ env.OPENWRT_ROOT }}/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ${{ env.OPENWRT_ROOT }}/.config
        chmod +x $DIY_P2_SH
        cd ${{ env.OPENWRT_ROOT }}
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd ${{ env.OPENWRT_ROOT }}
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile firmware
      id: compile
      run: |
        cd ${{ env.OPENWRT_ROOT }}
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check compilation status
      if: steps.compile.outcome != 'success'
      run: |
        echo "Compilation failed. Uploading logs for debugging..."
        mkdir -p /tmp/logs
        cp ${{ env.OPENWRT_ROOT }}/logs/* /tmp/logs/ || true
        
    - name: Upload compilation logs
      if: steps.compile.outcome != 'success'
      uses: actions/upload-artifact@v3
      with:
        name: compilation-logs
        path: /tmp/logs

    - name: Cache firmware
      if: steps.compile.outcome == 'success'
      uses: actions/cache/save@v3
      with:
        path: ${{ env.OPENWRT_ROOT }}
        key: openwrt-firmware-${{ github.run_id }}-${{ github.sha }}

# ==== Á¨¨‰∫åÈÉ®ÂàÜÁªìÊùüÔºåÁ¨¨‰∏âÈÉ®ÂàÜÂºÄÂßã‰∫é stage4-upload job ====
  stage4-upload:
    needs: stage3-compile
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Restore firmware
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.OPENWRT_ROOT }}
        key: openwrt-firmware-${{ github.run_id }}-${{ github.sha }}

    - name: Check firmware existence
      id: check
      run: |
        if [ ! -d "${{ env.OPENWRT_ROOT }}/bin" ]; then
          echo "Error: Firmware directory not found"
          exit 1
        fi
        echo "Firmware directory found"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true' && steps.check.outputs.status == 'success'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_ROOT }}/bin

    - name: Organize files
      id: organize
      if: steps.check.outputs.status == 'success'
      run: |
        cd ${{ env.OPENWRT_ROOT }}/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete old workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

# ==== Â∑•‰ΩúÊµÅÁ®ãÊñá‰ª∂ÁªìÊùü ====

name: Build OpenWrt（分步式）

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  # 定义构建目录在大容量磁盘上
  BUILD_ROOT: /home/runner/work/openwrt-new-rom/openwrt-new-rom

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Before freeing up disk space
        run: |
          echo "Before cleaning:"
          df -hT
          echo "Available storage on build volume:"
          df -h ${{ env.BUILD_ROOT }}

      - name: "Optimize Disk Space"
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: Freeing up disk space
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 2048
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Prepare build directory
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          echo "Build directory ready at ${{ env.BUILD_ROOT }}"
          df -h ${{ env.BUILD_ROOT }}

      - name: Checkout
        uses: actions/checkout@main
        with:
          path: ${{ env.BUILD_ROOT }}/source

      - name: Initialization environment
        run: |
          cd ${{ env.BUILD_ROOT }}
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev python3-setuptools

      - name: Clone source code
        run: |
          cd ${{ env.BUILD_ROOT }}
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

      - name: Load custom feeds
        run: |
          cd ${{ env.BUILD_ROOT }}
          [ -e source/$FEEDS_CONF ] && mv source/$FEEDS_CONF openwrt/feeds.conf.default
          chmod +x source/$DIY_P1_SH
          cd openwrt
          ${{ env.BUILD_ROOT }}/source/$DIY_P1_SH

      - name: Update and Install feeds
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          cd ${{ env.BUILD_ROOT }}
          [ -e source/files ] && mv source/files openwrt/files
          [ -e source/$CONFIG_FILE ] && mv source/$CONFIG_FILE openwrt/.config
          chmod +x source/$DIY_P2_SH
          cd openwrt
          ${{ env.BUILD_ROOT }}/source/$DIY_P2_SH

      - name: Download package
        id: package
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Cache OpenWrt
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-${{ github.sha }}

  build-tools:
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
      - name: Space cleanup and preparation
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          
          # 运行空间清理脚本
          echo "Before cleaning:"
          df -hT
          
          # 运行两个清理工具
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          docker rmi $(docker images -q) || true

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-${{ github.sha }}

      - name: Compile tools
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          # 清理不需要的文件
          find build_dir/host -name '.built*' -exec rm -f {} \;

      - name: Cache tools
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.BUILD_ROOT }}/openwrt/staging_dir
            ${{ env.BUILD_ROOT }}/openwrt/build_dir
          key: openwrt-tools-${{ github.sha }}

  build-packages:
    needs: build-tools
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        chunk: [1, 2, 3]
      fail-fast: false
    steps:
      - name: Space cleanup and preparation
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          
          # 清理空间
          echo "Before cleaning:"
          df -hT
          
          # 运行清理工具
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          docker rmi $(docker images -q) || true

      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-tools-${{ github.sha }}

      - name: Compile packages (Chunk ${{ matrix.chunk }})
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt
          case ${{ matrix.chunk }} in
            1)
              make package/feeds/packages/{node,npm,libnghttp2,icu}/compile -j$(nproc)
              ;;
            2)
              make package/feeds/packages/{python*,ruby,perl,php*}/compile -j$(nproc)
              ;;
            3)
              make package/compile -j$(nproc)
              ;;
          esac
          
          # 清理编译过程中的临时文件
          rm -rf build_dir/target-*/tmp

      - name: Save chunk result
        uses: actions/upload-artifact@v3
        with:
          name: packages-chunk-${{ matrix.chunk }}
          path: ${{ env.BUILD_ROOT }}/openwrt/bin
          retention-days: 1

  build-firmware:
    needs: build-packages
    runs-on: ubuntu-22.04
    steps:
      - name: Space cleanup and preparation
        run: |
          sudo mkdir -p ${{ env.BUILD_ROOT }}
          sudo chown $USER:$GROUPS ${{ env.BUILD_ROOT }}
          df -h ${{ env.BUILD_ROOT }}

      - name: Restore OpenWrt cache
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_ROOT }}/openwrt
          key: openwrt-${{ github.sha }}

      - name: Download package chunks
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.BUILD_ROOT }}/chunks

      - name: Merge chunks and build firmware
        id: compile
        run: |
          cd ${{ env.BUILD_ROOT }}
          mkdir -p openwrt/bin
          cp -r chunks/packages-chunk-*/* openwrt/bin/
          cd openwrt
          make package/index
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Organize files
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd ${{ env.BUILD_ROOT }}/openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware
        uses: actions/upload-artifact@v3
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          retention-days: 7

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

  cleanup:
    needs: build-firmware
    runs-on: ubuntu-22.04
    steps:
      - name: Delete workflow artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            packages-chunk-*
          failOnError: false

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true'
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: OpenWrt Build Test

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Generate Cache Key
      id: cache-key
      run: |
        echo "key=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

    - name: Setup Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown -R $USER:$GROUPS /workdir
        
        # 清理和安装依赖
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Clone Source Code
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache Source Code
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-source-${{ steps.cache-key.outputs.key }}

  feeds:
    needs: prepare
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Restore Source
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-source-${{ needs.prepare.outputs.cache-key }}

    - name: Update Feeds
      run: |
        cd /workdir/openwrt
        if [ -f "$GITHUB_WORKSPACE/$DIY_P1_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$DIY_P1_SH"
          "$GITHUB_WORKSPACE/$DIY_P1_SH"
        fi
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Cache Feeds
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-feeds-${{ needs.prepare.outputs.cache-key }}

  config:
    needs: feeds
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Restore Feeds
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-feeds-${{ needs.prepare.outputs.cache-key }}

    - name: Load Config
      run: |
        cd /workdir/openwrt
        if [ -f "$GITHUB_WORKSPACE/$DIY_P2_SH" ]; then
          chmod +x "$GITHUB_WORKSPACE/$DIY_P2_SH"
          "$GITHUB_WORKSPACE/$DIY_P2_SH"
        fi
        [ -e "$GITHUB_WORKSPACE/$CONFIG_FILE" ] && cp "$GITHUB_WORKSPACE/$CONFIG_FILE" .config
        make defconfig

    - name: Cache Config
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-config-${{ needs.prepare.outputs.cache-key }}

  compile:
    needs: config
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    
    steps:
    - name: Restore Config
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-config-${{ needs.prepare.outputs.cache-key }}

    - name: SSH Connection
      uses: tmate/tmate-action@v1
      if: github.event.inputs.ssh == 'true'
      timeout-minutes: 30

    - name: Download Packages
      run: |
        cd /workdir/openwrt
        make download -j8 || make download -j1 V=s

    - name: Compile
      id: compile
      run: |
        cd /workdir/openwrt
        echo "开始编译..."
        make -j$(($(nproc) + 1)) || make -j1 V=s
        echo "编译完成"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Cache Compiled
      uses: actions/cache@v3
      if: success()
      with:
        path: /workdir/openwrt
        key: openwrt-compiled-${{ needs.prepare.outputs.cache-key }}

  upload:
    needs: compile
    runs-on: ubuntu-22.04
    if: success()
    
    steps:
    - name: Restore Compiled
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: openwrt-compiled-${{ needs.prepare.outputs.cache-key }}

    - name: Organize Files
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Delete Old Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

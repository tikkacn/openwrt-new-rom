name: 全新编译第12版(S3Cache)

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '全新编译，不使用任何恢复的缓存。首次S3填充时应为false。'
        required: false
        default: 'false' 
      config_file:
        description: '配置文件 (位于仓库根目录)'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master 
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE_NAME: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH_NAME: diy-part1.sh 
  DIY_P2_SH_NAME: diy-part2.sh 
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

  # GitHub Actions Caches Paths
  CCACHE_DIR_PATH: /workdir/ccache 
  PACKAGES_BIN_DIR_PATH: /workdir/openwrt/bin 
  BUILD_STATE_DIR_PATH: /workdir/build_state 

  # S3 缓存的目标目录的绝对路径
  S3_TARGET_STAGING_DIR_PATH: /workdir/openwrt/staging_dir
  S3_TARGET_HOST_BUILD_DIR_PATH: /workdir/openwrt/build_dir/host
  S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH: /workdir/openwrt/build_dir/toolchain-x86_64_gcc-13.3.0_musl 
  S3_TARGET_DL_DIR_PATH: /workdir/openwrt/dl

  # S3 缓存压缩包的本地文件名
  S3_STAGING_DIR_ARCHIVE_FILENAME: staging_dir_cache.tar.zst
  S3_HOST_BUILD_DIR_ARCHIVE_FILENAME: host_build_dir_cache.tar.zst
  S3_TOOLCHAIN_BUILD_DIR_ARCHIVE_FILENAME: toolchain_build_dir_cache.tar.zst
  S3_DL_DIR_ARCHIVE_FILENAME: dl_dir_cache.tar.zst
  
  S3_CONFIG_SNAPSHOT_FILENAME: latest_successful_build.config 

  CCACHE_LOGFILE_PATH: /tmp/ccache_detailed.log
  DEBUG_LOG_FILE_PATH: /tmp/build_debug_summary.log

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码 (Checkout)
      uses: actions/checkout@v4

    - name: 设置 S3 缓存路径前缀 (Set S3 Cache Path Prefix)
      id: set_s3_prefix 
      run: |
        s3_prefix_from_secret="${{ secrets.S3_CACHE_PATH_PREFIX }}"
        final_s3_prefix=""
        if [ -n "$s3_prefix_from_secret" ]; then
          final_s3_prefix="$s3_prefix_from_secret"
          echo "使用来自 Secret 'S3_CACHE_PATH_PREFIX' 的S3路径前缀: $final_s3_prefix" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        else
          # REPO_BRANCH 在顶级 env 中定义，此处可安全引用
          default_prefix="openwrt-caches/${{ env.REPO_BRANCH }}"
          final_s3_prefix="$default_prefix"
          echo "使用默认S3路径前缀: $final_s3_prefix" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        fi
        echo "S3_PATH_PREFIX_KEY=${final_s3_prefix}" >> $GITHUB_ENV
        echo "s3_prefix=${final_s3_prefix}" >> $GITHUB_OUTPUT

    - name: 优化磁盘空间 (Maximize Build Space)
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480 
        swap-size-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 额外清理磁盘空间并检查 (Extra Cleanup & Check)
      run: |
        echo "清理额外磁盘空间..."
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
        docker image prune -a -f || true
        docker system prune -af || true
        sudo apt-get clean && sudo apt-get autoremove -y
        df -h

    - name: 初始化环境和安装 AWS CLI (Initialize Environment & Install AWS CLI)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev \
        awscli jq
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        mkdir -p ${{ env.BUILD_STATE_DIR_PATH }} ${{ env.CCACHE_DIR_PATH }} /workdir/openwrt 
        chmod -R 777 /workdir
        
        # 使用 github.workspace 引用仓库根目录下的文件
        CONFIG_FILE_ON_RUNNER="${{ github.workspace }}/${{ env.CONFIG_FILE_NAME }}"
        DIY_P1_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P1_SH_NAME }}"
        DIY_P2_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P2_SH_NAME }}"

        echo '#!/bin/bash' > "${DIY_P1_SH_ON_RUNNER}"
        echo "set -eo pipefail" >> "${DIY_P1_SH_ON_RUNNER}"
        echo "echo '[INFO] Running default diy-part1.sh. FEEDS_CONF_URL is: ${{ env.FEEDS_CONF_URL }}'" >> "${DIY_P1_SH_ON_RUNNER}"
        chmod +x "${DIY_P1_SH_ON_RUNNER}"

        echo '#!/bin/bash' > "${DIY_P2_SH_ON_RUNNER}"
        echo "set -eo pipefail" >> "${DIY_P2_SH_ON_RUNNER}"
        echo 'BANNER_DATE=$(date +"%Y%m%d%H%M")' >> "${DIY_P2_SH_ON_RUNNER}"
        # 确保 package/lean/default-settings/files 目录存在，如果不存在，sed 会报错
        echo 'mkdir -p package/lean/default-settings/files' >> "${DIY_P2_SH_ON_RUNNER}"
        echo 'touch package/lean/default-settings/files/zzz-default-settings' >> "${DIY_P2_SH_ON_RUNNER}"
        echo 'sed -i "s/OpenWrt /OpenWrt_S3Build_${BANNER_DATE} /" package/lean/default-settings/files/zzz-default-settings || echo "Banner sed command failed or target file not found."' >> "${DIY_P2_SH_ON_RUNNER}"
        echo "echo '[INFO] Running default diy-part2.sh (Banner updated).'" >> "${DIY_P2_SH_ON_RUNNER}"
        chmod +x "${DIY_P2_SH_ON_RUNNER}"
        
        if [ ! -f "${CONFIG_FILE_ON_RUNNER}" ]; then
          echo "警告：配置文件 ${CONFIG_FILE_ON_RUNNER} 不存在，创建默认配置文件" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          echo "# Default minimal .config created by workflow" > "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_TARGET_x86=y" >> "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_TARGET_x86_64=y" >> "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_PACKAGE_luci=y" >> "${CONFIG_FILE_ON_RUNNER}"
        fi
        df -h
        echo "AWS CLI version: $(aws --version)"

    - name: 配置 AWS 凭证 (Configure AWS Credentials)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 克隆源代码并创建基础目录结构 (Clone Source & Setup Dirs)
      working-directory: /workdir 
      run: |
        echo "当前工作目录: $(pwd)" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "github.workspace 路径是: ${{ github.workspace }}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        ls -la ${{ github.workspace }} | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        echo "清理 /workdir/openwrt ..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        rm -rf /workdir/openwrt 

        echo "清理 ${{ github.workspace }}/openwrt (如果存在)..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        rm -rf ${{ github.workspace }}/openwrt 

        echo "克隆新的源代码到 /workdir/openwrt..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        
        echo "创建符号链接: ${{ github.workspace }}/openwrt -> /workdir/openwrt" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        ln -svf /workdir/openwrt ${{ github.workspace }}/openwrt | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        
        cd openwrt 
        echo "当前已进入 $(pwd)" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        
        # 创建 S3 缓存对应的目标目录及其他缓存目录
        mkdir -p ${{ env.S3_TARGET_STAGING_DIR_PATH }} ${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }} ${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }} \
                   ${{ env.S3_TARGET_DL_DIR_PATH }} \
                   ${{ env.PACKAGES_BIN_DIR_PATH }} ${{ env.BUILD_STATE_DIR_PATH }} ${{ env.CCACHE_DIR_PATH }}
        mkdir -p logs 
        echo "基础目录结构创建/确认完毕。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        echo "下载 feeds.conf.default..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        curl -L -o feeds.conf.default "${{ env.FEEDS_CONF_URL }}" || echo "警告：无法下载 feeds.conf.default" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "feeds.conf.default 内容：" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        cat feeds.conf.default | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        
        echo "从克隆的源码中移除 .git 目录..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        rm -rf .git 

    # --- GitHub Actions Cache Restore (Small Caches) ---
    - name: 恢复编译产物缓存 (bin/ 目录)
      uses: actions/cache@v3
      id: cache-packages-bin
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.PACKAGES_BIN_DIR_PATH }} 
        key: packages-bin-${{ env.REPO_BRANCH }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE_NAME)) }}-v1 

    - name: 恢复CCACHE缓存
      uses: actions/cache@v3
      id: cache-ccache
      with: 
        path: ${{ env.CCACHE_DIR_PATH }}
        key: ccache-${{ env.REPO_BRANCH }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE_NAME)) }}-v1

    - name: 恢复构建状态缓存
      uses: actions/cache@v3
      id: cache-state
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.BUILD_STATE_DIR_PATH }}
        key: state-${{ env.REPO_BRANCH }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE_NAME)) }}-v1
    # --- END GitHub Actions Cache Restore ---

    # --- S3 Cache Restore (Large Caches) ---
    - name: 从 S3 恢复大体积缓存 (Download & Extract S3 Caches)
      if: inputs.clean_build != 'true'
      working-directory: /workdir/openwrt 
      run: |
        S3_BUCKET_NAME="${{ secrets.AWS_S3_BUCKET_NAME }}"
        S3_FULL_PREFIX="${{ env.S3_PATH_PREFIX_KEY }}" 
        OPENWRT_ROOT_DIR=$(pwd) 

        if [ -z "$S3_BUCKET_NAME" ]; then
          echo "[ERROR] AWS_S3_BUCKET_NAME secret 未设置。跳过S3缓存恢复。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          exit 0 
        fi
        echo "[INFO] S3 Bucket: $S3_BUCKET_NAME, S3 Cache Prefix: $S3_FULL_PREFIX" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        s3_download_and_untar() {
          local s3_archive_filename="$1"    
          local target_abs_dir_path="$2"    
          local s3_object_key="${S3_FULL_PREFIX}/${s3_archive_filename}"
          local local_archive_on_runner="./${s3_archive_filename}" 

          echo "尝试从 S3 下载: s3://${S3_BUCKET_NAME}/${s3_object_key} 到 ${local_archive_on_runner} ..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          if aws s3 cp "s3://${S3_BUCKET_NAME}/${s3_object_key}" "${local_archive_on_runner}" --no-progress; then
            echo "下载 ${s3_archive_filename} 成功. 开始解压..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            if [ -d "${target_abs_dir_path}" ]; then
              echo "删除已存在的目录: ${target_abs_dir_path}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
              rm -rf "${target_abs_dir_path}"
            fi
            if tar -I "zstd -T0" -xf "${local_archive_on_runner}" -C "${OPENWRT_ROOT_DIR}"; then 
              echo "解压 ${s3_archive_filename} (内容到 $(basename ${target_abs_dir_path})) 成功。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            else
              echo "错误：解压 ${s3_archive_filename} 失败。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
              rm -rf "${target_abs_dir_path}" 
            fi
            rm -f "${local_archive_on_runner}" 
          else
            echo "从 S3 下载 ${s3_archive_filename} (s3://${S3_BUCKET_NAME}/${s3_object_key}) 失败或文件不存在。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          fi
        }

        s3_download_and_untar "${{ env.S3_STAGING_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_STAGING_DIR_PATH }}"
        s3_download_and_untar "${{ env.S3_HOST_BUILD_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }}"
        s3_download_and_untar "${{ env.S3_TOOLCHAIN_BUILD_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }}"
        s3_download_and_untar "${{ env.S3_DL_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_DL_DIR_PATH }}"
        
        df -h | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
    # --- END S3 Cache Restore ---

    - name: 检查缓存恢复后状态 (Check Cache Restore Status)
      run: |
        echo "--- Debug Log: Cache Restore Status Summary ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "CONFIG_FILE: ${{ env.CONFIG_FILE_NAME }}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "GitHub Packages Bin Cache: ${{ steps.cache-packages-bin.outputs.cache-hit == 'true' && 'Hit' || 'Miss/Skipped' }}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "GitHub CCACHE Cache: ${{ steps.cache-ccache.outputs.cache-hit == 'true' && 'Hit' || 'Miss' }}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "GitHub Build State Cache: ${{ steps.cache-state.outputs.cache-hit == 'true' && 'Hit' || 'Miss/Skipped' }}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "--- Debug Log: Directory Sizes After All Restores ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        du -sh ${{ env.S3_TARGET_STAGING_DIR_PATH }} 2>/dev/null || echo "Staging Dir (${{ env.S3_TARGET_STAGING_DIR_PATH }}) 不存在或为空" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        du -sh ${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }} 2>/dev/null || echo "Host Build Dir (${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }}) 不存在或为空" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        du -sh ${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }} 2>/dev/null || echo "Toolchain Build Dir (${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }}) 不存在或为空" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        du -sh ${{ env.S3_TARGET_DL_DIR_PATH }} 2>/dev/null || echo "DL Dir (${{ env.S3_TARGET_DL_DIR_PATH }}) 不存在或为空" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        du -sh ${{ env.PACKAGES_BIN_DIR_PATH }} 2>/dev/null || echo "Packages Bin Dir (${{ env.PACKAGES_BIN_DIR_PATH }}) 不存在或为空" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        du -sh ${{ env.CCACHE_DIR_PATH }} 2>/dev/null || echo "CCACHE Dir (${{ env.CCACHE_DIR_PATH }}) 不存在或为空" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        df -h | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "--- End Debug Log ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

    - name: 配置编译环境 (Configure Build Environment)
      run: |
        cd /workdir/openwrt
        CONFIG_FILE_ON_RUNNER="${{ github.workspace }}/${{ env.CONFIG_FILE_NAME }}" 
        DIY_P1_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P1_SH_NAME }}"     
        DIY_P2_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P2_SH_NAME }}"     

        if [ -f ".config" ] && [ "${{ inputs.clean_build }}" != "true" ]; then 
          echo "检测到已存在的 .config (可能来自S3缓存恢复), 输入的配置文件 (${CONFIG_FILE_ON_RUNNER}) 将覆盖它。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        fi

        "${DIY_P1_SH_ON_RUNNER}" 
        echo "更新并安装 Feeds..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        if [ -e "${{ github.workspace }}/files" ]; then 
          echo "复制自定义文件 files/ ..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          cp -r "${{ github.workspace }}/files" ./
        fi
        echo "使用配置文件: ${CONFIG_FILE_ON_RUNNER}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        cp "${CONFIG_FILE_ON_RUNNER}" ./.config
        cp .config .config.input 
        "${DIY_P2_SH_ON_RUNNER}" 
        
        echo "CONFIG_AUTOREMOVE=y" >> .config 
        echo "CONFIG_AUTOREBUILD=y" >> .config 
        echo "确保必要的固件生成选项..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config; fi
        if grep -q "CONFIG_TARGET_x86=y" .config; then
          if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then echo "CONFIG_GRUB_IMAGES=y" >> .config; fi
          if ! grep -q "CONFIG_TARGET_IMAGES_PAD=y" .config; then echo "CONFIG_TARGET_IMAGES_PAD=y" >> .config; fi
        fi
        
        echo "执行 make defconfig..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        make defconfig
        
        grep "^CONFIG_PACKAGE_.*=y" .config.input | sort > packages_input.txt || true
        grep "^CONFIG_PACKAGE_.*=y" .config | sort > packages_defconfig.txt || true
        comm -23 packages_input.txt packages_defconfig.txt > missing_packages.txt
        if [ -s missing_packages.txt ]; then
          echo "警告：以下包在 defconfig 后缺失，将尝试恢复：" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          cat missing_packages.txt | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          cat missing_packages.txt >> .config 
          echo "重新执行 make defconfig 以确保依赖一致性 (因有包被重新加入)" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          make defconfig
        else
          echo "所有在输入 .config 中指定的 CONFIG_PACKAGE_*=y 配置项在 defconfig 后均保留或被正确处理。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        fi
        diff -u .config.input .config > config_diff.txt || echo "配置文件 (.config.input vs .config) 无差异" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "Config diff 已保存到 config_diff.txt (上传到 Artifacts)" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        df -h | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

    - name: 检查源码变化 (Feeds Makefile Hashes)
      id: check-feeds
      run: |
        cd /workdir/openwrt
        mkdir -p ${{ env.BUILD_STATE_DIR_PATH }}
        find feeds -type f -name "Makefile" -exec sha256sum {} \; | sort | sha256sum > ${{ env.BUILD_STATE_DIR_PATH }}/feeds.sha256
        CURRENT_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR_PATH }}/feeds.sha256 | awk '{print $1}')
        PREVIOUS_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR_PATH }}/previous_feeds.sha256 2>/dev/null | awk '{print $1}' || echo "")
        echo "--- Debug Log: Feeds Change Check ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "当前 feeds 哈希: $CURRENT_FEEDS_HASH" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "之前 feeds 哈希: $PREVIOUS_FEEDS_HASH" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        if [ "$CURRENT_FEEDS_HASH" != "$PREVIOUS_FEEDS_HASH" ]; then
          echo "feeds_changed=true" >> $GITHUB_ENV
          echo "Feeds 的 Makefile 结构已变更。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        else
          echo "feeds_changed=false" >> $GITHUB_ENV
          echo "Feeds 的 Makefile 结构未变更。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        fi
        echo "--- End Debug Log: Feeds Change Check ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        cp ${{ env.BUILD_STATE_DIR_PATH }}/feeds.sha256 ${{ env.BUILD_STATE_DIR_PATH }}/previous_feeds.sha256

    - name: 开启SSH调试 (如果需要) (Enable SSH if needed)
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true'

    - name: 下载软件包 (make download)
      run: |
        cd /workdir/openwrt
        MAX_RETRIES=3
        RETRY_WAIT=10
        cat > download_with_retry.sh << 'EOF'
        #!/bin/bash
        set -e; MAX_RETRIES=$1; RETRY_WAIT=$2; shift 2; retries=0
        until [ $retries -ge $MAX_RETRIES ]; do
          echo "尝试下载，第 $((retries+1)) 次，共 $MAX_RETRIES 次...";
          mkdir -p logs 
          if make download -j$(nproc) "$@" 2>&1 | tee "logs/download_attempt_$(date +%s)_$retries.log"; then echo "下载成功！"; exit 0; fi
          retries=$((retries+1));
          if [ $retries -lt $MAX_RETRIES ]; then echo "下载失败，等待 $RETRY_WAIT 秒后重试..."; sleep $RETRY_WAIT; fi
        done
        echo "达到最大重试次数，保存日志以分析失败的包...";
        LAST_LOG=$(ls -t logs/download_attempt_*.log 2>/dev/null | head -n 1)
        if [ -n "$LAST_LOG" ]; then cp "$LAST_LOG" logs/download_failures.log; else echo "无法找到下载尝试日志。" > logs/download_failures.log; fi
        exit 1
        EOF
        chmod +x download_with_retry.sh
        if ! ./download_with_retry.sh $MAX_RETRIES $RETRY_WAIT; then
            echo "下载重试失败，尝试单线程详细日志下载..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            make download -j1 V=s 2>&1 | tee logs/download_final_attempt.log || true 
        fi
        mkdir -p ${{ env.CCACHE_DIR_PATH }}
        ccache -o cache_dir=${{ env.CCACHE_DIR_PATH }}
        ccache -o max_size=8G 
        ccache -z 
        echo "CCACHE 配置完成并已清零统计数据。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        df -h
        
    - name: 检测并处理下载失败的包 (Detect & Handle Failed Downloads)
      run: |
        cd /workdir/openwrt
        if [ -f "logs/download_failures.log" ] || [ -f "logs/download_final_attempt.log" ]; then
            COMBINED_DOWNLOAD_LOG="logs/combined_download_errors.log"
            cat logs/download_failures.log logs/download_final_attempt.log 2>/dev/null > "$COMBINED_DOWNLOAD_LOG"
            echo "分析下载失败日志 ($COMBINED_DOWNLOAD_LOG)..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }};
            grep -E "(curl:.*(Couldn't resolve host|Connection timed out|403 Forbidden|404 Not Found)|No more mirrors to try|Download failed)" "$COMBINED_DOWNLOAD_LOG" > failed_urls.txt || true;
            declare -A failed_packages_map;
            while IFS= read -r line; do
                if [[ $line =~ \/([^\/_]+([_-][0-9a-zA-Z\.]+)?)\.(tar\.|zip|gz|xz|bz2) ]]; then
                    pkg_name_from_url="${BASH_REMATCH[1]}"
                    pkg_name_from_url_base=$(echo "$pkg_name_from_url" | sed -E 's/[-_][0-9]+.*//; s/-git//')
                    if [ -n "$pkg_name_from_url_base" ]; then failed_packages_map["$pkg_name_from_url_base"]=1; echo "检测到可能下载失败的包 (基于URL): $pkg_name_from_url_base" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}; fi
                fi
            done < failed_urls.txt;
            if [ ${#failed_packages_map[@]} -gt 0 ]; then
                echo "以下包或其源码可能下载失败，将尝试从 .config 中禁用：" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }};
                PACKAGES_MODIFIED=0
                for pkg_base in "${!failed_packages_map[@]}"; do
                    echo " - 疑似问题包: $pkg_base" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }};
                    if grep -q "CONFIG_PACKAGE_.*${pkg_base}.*=y" .config; then
                        echo "  在 .config 中找到相关包，尝试禁用..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                        sed -i -E "/CONFIG_PACKAGE_.*${pkg_base}.*=y/s/=y$/=n # Auto-disabled due to download failure/g" .config
                        PACKAGES_MODIFIED=1
                    fi
                done;
                if [ $PACKAGES_MODIFIED -eq 1 ]; then echo "由于检测到下载失败，已修改 .config 文件，重新运行 make defconfig" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}; make defconfig;
                else echo "未在 .config 中找到明确匹配的已启用包进行禁用。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}; fi
            else echo "未从下载日志中明确识别出特定下载失败的包名。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}; fi
        else echo "没有找到下载失败的日志文件。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}; fi
        echo "下载失败包检测处理完成。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

    - name: 智能编译固件 (Smart Compile Firmware)
      id: compile
      run: |
        echo "--- Debug Log: Compile Step Start ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        cd /workdir/openwrt
        export CCACHE_DIR=${{ env.CCACHE_DIR_PATH }}
        export PATH="/usr/lib/ccache:$PATH" 
        export CCACHE_LOGFILE=${{ env.CCACHE_LOGFILE_PATH }}
        echo "CCACHE_LOGFILE in compile step set to: $CCACHE_LOGFILE_PATH" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        cleanup_temp_files() { 
          echo "清理临时文件以释放空间..."; find /tmp -maxdepth 1 -type f -delete || true; df -h | tee -a ${{ env.DEBUG_LOG_FILE_PATH }};
        }

        save_md5_info_to_build_state() { 
          echo "保存配置MD5信息到构建状态目录..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          mkdir -p ${{ env.BUILD_STATE_DIR_PATH }};
          cp .config ${{ env.BUILD_STATE_DIR_PATH }}/config_from_compile_step.txt; 
          echo "$TOOLCHAIN_MD5" > ${{ env.BUILD_STATE_DIR_PATH }}/toolchain.md5;
          echo "$PACKAGE_MD5" > ${{ env.BUILD_STATE_DIR_PATH }}/package.md5;
          echo "构建状态MD5信息保存完成。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        }
        
        handle_make_error_robust() { 
          local make_log_content="$1"
          local make_command_failed="$2"
          echo "编译命令 '$make_command_failed' 失败。日志如下：" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          echo "$make_log_content" >> ${{ env.DEBUG_LOG_FILE_PATH }} 
          if echo "$make_log_content" | grep -q -E "(No more mirrors to try|Download failed|Couldn't resolve host|404 Not Found|403 Forbidden)"; then
            echo "错误似乎与下载相关，但下载步骤应已处理。请检查包的Makefile。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          fi
          return 1 
        }

        compile_firmware() {
          echo ">>> CCACHE: Zeroing statistics for this compile_firmware run." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          ccache -z
          echo ">>> CCACHE: Statistics at START of compile_firmware (after zeroing):" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          ccache -s | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

          MAKE_JOBS=$(nproc)
          MAIN_MAKE_CMD="make -j${MAKE_JOBS} V=s"
          FALLBACK_MAKE_CMD="make -j1 V=s" 
          
          COMPILE_OUTPUT_LOG="logs/compile_output_$(date +%Y%m%d_%H%M%S).log"
          echo "详细编译日志将输出到: ${COMPILE_OUTPUT_LOG}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          
          if [ $DO_FULL_BUILD -eq 1 ]; then
            echo "--- Compile Branch: Full Build ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            echo "需要完整构建。将编译主机工具、工具链（如果S3缓存无效或缺失），然后是整个world。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            make tools/compile $FALLBACK_MAKE_CMD || make tools/compile $FALLBACK_MAKE_CMD 
            make toolchain/compile $FALLBACK_MAKE_CMD || make toolchain/compile $FALLBACK_MAKE_CMD 
            cleanup_temp_files
            echo "开始完整编译 (World)..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            if ! $MAIN_MAKE_CMD 2>&1 | tee "${COMPILE_OUTPUT_LOG}"; then
              if ! handle_make_error_robust "$(cat ${COMPILE_OUTPUT_LOG})" "$MAIN_MAKE_CMD"; then 
                 echo "完整编译首次尝试失败，尝试单线程编译..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                 $FALLBACK_MAKE_CMD 2>&1 | tee -a "${COMPILE_OUTPUT_LOG}" 
              fi
            fi
          elif [ $DO_PACKAGE_BUILD -eq 1 ] || [ "${{ env.feeds_changed }}" = "true" ]; then
            echo "--- Compile Branch: Package Build or Feeds Changed ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            echo "软件包配置或Feeds结构已变更，将执行 package/clean, package/compile, package/index." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            make package/clean V=s || true 
            if ! make package/compile $MAIN_MAKE_CMD 2>&1 | tee "${COMPILE_OUTPUT_LOG}"; then
               if ! handle_make_error_robust "$(cat ${COMPILE_OUTPUT_LOG})" "package/compile $MAIN_MAKE_CMD"; then
                 echo "软件包编译首次尝试失败，尝试单线程编译..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                 make package/compile $FALLBACK_MAKE_CMD 2>&1 | tee -a "${COMPILE_OUTPUT_LOG}"
               fi
            fi
            make package/index V=s || make package/index $FALLBACK_MAKE_CMD 
          else
            echo "--- Compile Branch: Minimal Incremental Build ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            echo "配置和Feeds均未显著变化，执行最小化增量编译 (World)..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            if ! $MAIN_MAKE_CMD 2>&1 | tee "${COMPILE_OUTPUT_LOG}"; then
              if ! handle_make_error_robust "$(cat ${COMPILE_OUTPUT_LOG})" "$MAIN_MAKE_CMD"; then
                 echo "最小化增量编译首次尝试失败，尝试单线程编译..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                 $FALLBACK_MAKE_CMD 2>&1 | tee -a "${COMPILE_OUTPUT_LOG}"
              fi
            fi
          fi
          
          echo "所有编译分支执行完毕，确保执行最终的固件生成步骤 (target/install)..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          make target/install $FALLBACK_MAKE_CMD 2>&1 | tee -a "${COMPILE_OUTPUT_LOG}" 
          local final_install_status=$? 
          
          save_md5_info_to_build_state 

          echo "检查固件生成结果 (make target/install status: $final_install_status):" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          find bin/targets -type f \( -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" -o -name "*.img.gz" \) -print0 | xargs -0 ls -lh || echo "没有找到主要固件文件！" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          
          echo ">>> CCACHE: Statistics at END of compile_firmware function:" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          ccache -s | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

          if [ ${final_install_status} -eq 0 ] && [ -n "$(find bin/targets -type f \( -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" -o -name "*.img.gz" \) -print -quit)" ]; then
            echo "compile_firmware函数判断为成功 (固件已生成)。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            return 0 
          else
            echo "compile_firmware函数判断为失败 (固件未生成或target/install出错)。最终编译日志在 ${COMPILE_OUTPUT_LOG}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            return 1 
          fi
        }
        
        TOOLCHAIN_CONFIG_SUBSET_FOR_MD5=$(grep -E "^CONFIG_TARGET|^CONFIG_ARCH|^CONFIG_TOOLCHAIN" .config | grep -v "NOT_SET" | sort)
        TOOLCHAIN_MD5=$(echo "$TOOLCHAIN_CONFIG_SUBSET_FOR_MD5" | md5sum | awk '{print $1}')
        PREVIOUS_TOOLCHAIN_MD5=$(cat ${{ env.BUILD_STATE_DIR_PATH }}/toolchain.md5 2>/dev/null || echo "not_found_in_state_cache")
        PACKAGE_CONFIG_SUBSET_FOR_MD5=$(grep "^CONFIG_PACKAGE_" .config | grep "=y" | sort) 
        PACKAGE_MD5=$(echo "$PACKAGE_CONFIG_SUBSET_FOR_MD5" | md5sum | awk '{print $1}')
        PREVIOUS_PACKAGE_MD5=$(cat ${{ env.BUILD_STATE_DIR_PATH }}/package.md5 2>/dev/null || echo "not_found_in_state_cache")
        DO_FULL_BUILD=0
        DO_PACKAGE_BUILD=0

        echo "--- Debug Log: Build Decision Variables (based on final .config) ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "Input clean_build: ${{ github.event.inputs.clean_build }}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "Current TOOLCHAIN_MD5: $TOOLCHAIN_MD5" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "Previous TOOLCHAIN_MD5 (from BUILD_STATE_DIR cache): $PREVIOUS_TOOLCHAIN_MD5" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "Current PACKAGE_MD5: $PACKAGE_MD5" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "Previous PACKAGE_MD5 (from BUILD_STATE_DIR cache): $PREVIOUS_PACKAGE_MD5" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "env.feeds_changed: ${{ env.feeds_changed }}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          echo "clean_build is true: DO_FULL_BUILD=1 (全新编译，不使用已恢复的缓存)" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          DO_FULL_BUILD=1
        # Basic check for S3 cache presence (more robust checks can be added, e.g. checking specific stamp files)
        # This assumes if clean_build is false, S3 restore step ran.
        elif [ ! -f "${{ env.S3_TARGET_STAGING_DIR_PATH }}/stamp/.prepared" ] || \
             [ ! -d "${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }}/stamp" ] || \
             [ ! -d "${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }}/stamp" ] || \
             [ ! -d "${{ env.S3_TARGET_DL_DIR_PATH }}" ] ; then 
          echo "一个或多个关键S3缓存目录/标记文件似乎不完整或未恢复，执行完整构建逻辑: DO_FULL_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          DO_FULL_BUILD=1
        elif [ "$PREVIOUS_TOOLCHAIN_MD5" = "not_found_in_state_cache" ] || [ "$TOOLCHAIN_MD5" != "$PREVIOUS_TOOLCHAIN_MD5" ]; then
          echo "Toolchain config MD5 变化或首次构建 (基于state缓存)，执行完整构建逻辑: DO_FULL_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          DO_FULL_BUILD=1
        elif [ "$PREVIOUS_PACKAGE_MD5" = "not_found_in_state_cache" ] || [ "$PACKAGE_MD5" != "$PREVIOUS_PACKAGE_MD5" ]; then
          echo "Package config MD5 变化 (基于state缓存)，执行包编译逻辑: DO_PACKAGE_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          DO_PACKAGE_BUILD=1
        elif [ "${{ env.feeds_changed }}" = "true" ]; then
           echo "Feeds 结构已变更 (配置MD5未变)，执行包编译逻辑: DO_PACKAGE_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
           DO_PACKAGE_BUILD=1
        else
           echo "所有检查通过，缓存应有效，执行最小化增量构建。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        fi
        
        echo "Final Build Strategy -> DO_FULL_BUILD: $DO_FULL_BUILD, DO_PACKAGE_BUILD: $DO_PACKAGE_BUILD" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "--- End Debug Log: Build Decision Variables ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        if compile_firmware; then
          echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_' | sed 's/_$//')" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
        
        echo "Final ccache stats for this entire '智能编译固件' step run:" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        ccache -s | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        df -h | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "--- Debug Log: Compile Step End ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

    - name: 检查编译后各目录大小 (S3缓存上传前) (Check Sizes Before S3 Upload)
      if: "!cancelled()" 
      run: |
        echo "编译完成或中止，详细检查各构建目录大小..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        CURRENT_DATE_WITH_TZ=$(date +"%Y-%m-%d %H:%M:%S %Z")
        echo "" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "--- 详细目录大小检查 (du -sh) ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "检查时间: $CURRENT_DATE_WITH_TZ" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "--------------------------------------------------" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        
        check_and_log_size() {
            local dir_path="$1"
            local dir_desc="$2"
            local readable_size="未知或目录不存在"
            if [ -e "${dir_path}" ]; then 
                readable_size=$(du -sh "${dir_path}" 2>/dev/null | awk '{print $1}')
                if [ -z "${readable_size}" ]; then readable_size="获取失败或为空"; fi
                echo "$dir_desc (${dir_path}): ${readable_size}" 
                echo "[SIZE_CHECK] $dir_desc (${dir_path}): ${readable_size}" >> ${{ env.DEBUG_LOG_FILE_PATH }}
            else
                echo "$dir_desc (${dir_path}): 目录不存在" 
                echo "[SIZE_CHECK] $dir_desc (${dir_path}): 目录不存在" >> ${{ env.DEBUG_LOG_FILE_PATH }}
            fi
        }

        check_and_log_size "${{ env.S3_TARGET_STAGING_DIR_PATH }}" "1. Staging Dir (计划S3缓存)"
        check_and_log_size "${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }}" "2. Toolchain Build Dir (计划S3缓存)"
        check_and_log_size "${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }}" "3. Host Build Dir (计划S3缓存)"
        check_and_log_size "${{ env.S3_TARGET_DL_DIR_PATH }}" "4. DL Dir (计划S3缓存)"
        check_and_log_size "${{ env.PACKAGES_BIN_DIR_PATH }}" "5. 编译产物输出目录 (bin/, Actions Cache)" 
        check_and_log_size "${{ env.CCACHE_DIR_PATH }}" "6. CCACHE目录 (Actions Cache)"
        check_and_log_size "/workdir/openwrt/build_dir/" "7. 整个 OpenWrt build_dir 目录 (参考)"
        check_and_log_size "${{ env.BUILD_STATE_DIR_PATH }}" "8. 构建状态目录 (Actions Cache)"
        
        echo "--------------------------------------------------" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "--- 详细目录大小检查结束 ---" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        echo "" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        mkdir -p ${{ env.BUILD_STATE_DIR_PATH }} 
        echo "构建状态时间戳: $CURRENT_DATE_WITH_TZ" > ${{ env.BUILD_STATE_DIR_PATH }}/build_run_timestamp.txt
        echo "运行ID: ${{ github.run_id }}" >> ${{ env.BUILD_STATE_DIR_PATH }}/build_run_timestamp.txt
        echo "构建分支: ${{ env.REPO_BRANCH }}" >> ${{ env.BUILD_STATE_DIR_PATH }}/build_run_timestamp.txt
        echo "[DEBUG_LOG] 已更新构建运行时间戳文件: ${{ env.BUILD_STATE_DIR_PATH }}/build_run_timestamp.txt" >> ${{ env.DEBUG_LOG_FILE_PATH }}

    # --- S3 Cache Save (Large Caches) ---
    - name: 打包并上传大体积缓存到 S3 (Pack & Upload Large Caches to S3)
      if: steps.compile.outputs.status == 'success' && !cancelled() 
      working-directory: /workdir/openwrt 
      run: |
        S3_BUCKET_NAME="${{ secrets.AWS_S3_BUCKET_NAME }}"
        S3_FULL_PREFIX="${{ env.S3_PATH_PREFIX_KEY }}" 
        CONFIG_FILE_TO_UPLOAD=".config" 

        if [ -z "$S3_BUCKET_NAME" ]; then
          echo "[ERROR] AWS_S3_BUCKET_NAME secret 未设置。无法上传缓存到S3。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          exit 1 
        fi
        echo "[INFO] S3 Bucket for Upload: $S3_BUCKET_NAME, S3 Cache Prefix: $S3_FULL_PREFIX" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

        s3_pack_and_upload() {
          local source_dir_relative_to_pwd="$1" 
          local s3_archive_filename="$2"      
          local s3_object_key="${S3_FULL_PREFIX}/${s3_archive_filename}"
          local local_archive_in_pwd="./${s3_archive_filename}" 

          if [ ! -d "$source_dir_relative_to_pwd" ]; then
            echo "目录 $source_dir_relative_to_pwd 不存在于 $(pwd)，跳过打包和上传。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            return
          fi
          
          echo "开始打包压缩目录: $source_dir_relative_to_pwd 为 $local_archive_in_pwd ..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          if tar -I "zstd -T0 -3" -cf "$local_archive_in_pwd" "$source_dir_relative_to_pwd"; then 
            ARCHIVE_SIZE=$(du -sh "$local_archive_in_pwd" | awk '{print $1}')
            echo "打包压缩 $local_archive_in_pwd 成功. 文件大小: $ARCHIVE_SIZE" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            echo "开始上传 $local_archive_in_pwd 到 s3://${S3_BUCKET_NAME}/${s3_object_key} ..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            if aws s3 cp "$local_archive_in_pwd" "s3://${S3_BUCKET_NAME}/${s3_object_key}" --quiet; then 
              echo "上传 $local_archive_in_pwd 到 S3 成功。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            else
              echo "错误：上传 $local_archive_in_pwd 到 S3 失败。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            fi
            rm -f "$local_archive_in_pwd" 
          else
            echo "错误：打包压缩 $source_dir_relative_to_pwd 为 $local_archive_in_pwd 失败。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          fi
        }
        
        s3_pack_and_upload "$(basename ${{ env.S3_TARGET_STAGING_DIR_PATH }})" "${{ env.S3_STAGING_DIR_ARCHIVE_FILENAME }}"
        s3_pack_and_upload "$(basename ${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }})" "${{ env.S3_HOST_BUILD_DIR_ARCHIVE_FILENAME }}"
        s3_pack_and_upload "$(basename ${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }})" "${{ env.S3_TOOLCHAIN_BUILD_DIR_ARCHIVE_FILENAME }}"
        s3_pack_and_upload "$(basename ${{ env.S3_TARGET_DL_DIR_PATH }})" "${{ env.S3_DL_DIR_ARCHIVE_FILENAME }}"

        if [ -f "$CONFIG_FILE_TO_UPLOAD" ]; then 
          echo "上传 .config 文件 (${CONFIG_FILE_TO_UPLOAD}) 到 S3..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          S3_CONFIG_OBJECT_KEY="${S3_FULL_PREFIX}/${{ env.S3_CONFIG_SNAPSHOT_FILENAME }}"
          if aws s3 cp "$CONFIG_FILE_TO_UPLOAD" "s3://${S3_BUCKET_NAME}/${S3_CONFIG_OBJECT_KEY}" --quiet; then
            echo ".config 文件成功上传到 s3://${S3_BUCKET_NAME}/${S3_CONFIG_OBJECT_KEY}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          else
            echo "错误：上传 .config 文件到 S3 失败。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          fi
        else
          echo "警告：${CONFIG_FILE_TO_UPLOAD} 文件未找到，无法上传到S3。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        fi
    # --- END S3 Cache Save ---

    - name: 验证 Actions Cache 配置待保存 (Verify Actions Cache Save Config)
      if: "!cancelled()"
      run: |
        echo "已完成编译和S3上传。Actions Cache (小缓存) 将在作业结束时根据定义的key和path自动保存。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        df -h | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}

    - name: Upload Debug Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: build-debug-logs-${{ github.run_id }}
        path: |
          ${{ env.DEBUG_LOG_FILE_PATH }}
          ${{ env.CCACHE_LOGFILE_PATH }}
          /workdir/openwrt/logs/
          /workdir/openwrt/config_diff.txt
          /workdir/openwrt/.config
          /workdir/openwrt/.config.input
        retention-days: 7

    - name: 整理文件 (Organize Firmware Files)
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "开始整理固件文件..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
        FIRMWARE_COLLECTION_DIR_PATH="" 
        OPENWRT_BIN_DIR="/workdir/openwrt/bin"
        OPENWRT_TARGETS_DIR="${OPENWRT_BIN_DIR}/targets"

        if [ ! -d "${OPENWRT_TARGETS_DIR}" ]; then
          echo "错误：编译目标目录 ${OPENWRT_TARGETS_DIR} 不存在。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
          FIRMWARE_COLLECTION_DIR_PATH="/tmp/empty_firmware_collection_$(date +%N)" 
          mkdir -p "${FIRMWARE_COLLECTION_DIR_PATH}"
          echo "FIRMWARE=${FIRMWARE_COLLECTION_DIR_PATH}" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT 
          echo "FIRMWARE_ZIP=${FIRMWARE_COLLECTION_DIR_PATH}.zip" >> $GITHUB_ENV 
          zip -r9 "${FIRMWARE_COLLECTION_DIR_PATH}.zip" "${FIRMWARE_COLLECTION_DIR_PATH}" 
          exit 0
        fi

        DEEPEST_TARGET_SUBDIRS=$(find "${OPENWRT_TARGETS_DIR}" -mindepth 2 -maxdepth 2 -type d ! -name "packages" -print)
        if [ -z "${DEEPEST_TARGET_SUBDIRS}" ]; then
            echo "警告：在 ${OPENWRT_TARGETS_DIR} 下未找到标准的目标架构子目录。尝试直接在 ${OPENWRT_TARGETS_DIR} 搜索。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            DEEPEST_TARGET_SUBDIRS="${OPENWRT_TARGETS_DIR}" 
        fi

        for CURRENT_IMG_SOURCE_DIR in $DEEPEST_TARGET_SUBDIRS; do
            echo "检查目录: ${CURRENT_IMG_SOURCE_DIR} 中的固件文件..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            COLLECTED_FIRMWARE_OUTPUT_DIR="${OPENWRT_BIN_DIR}/firmware_collection_$(basename ${CURRENT_IMG_SOURCE_DIR})_$(date +%N)"
            mkdir -p "${COLLECTED_FIRMWARE_OUTPUT_DIR}"
            FILES_COPIED_COUNT=0
            
            cd "${CURRENT_IMG_SOURCE_DIR}" 
            
            for pattern in "*combined.img.gz" "*sysupgrade.img.gz" "*combined-efi.img.gz" "*kernel.bin" "*.img" "*.bin"; do
                find . -maxdepth 1 -type f -name "$pattern" ! -path "./packages/*" -print0 | while IFS= read -r -d $'\0' found_file; do
                    echo "找到标准固件: ${found_file}，复制到 ${COLLECTED_FIRMWARE_OUTPUT_DIR}/" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                    cp -v -f "${found_file}" "${COLLECTED_FIRMWARE_OUTPUT_DIR}/"
                    FILES_COPIED_COUNT=$((FILES_COPIED_COUNT + 1))
                done
            done
            
            if [ $FILES_COPIED_COUNT -eq 0 ]; then
                echo "在 ${CURRENT_IMG_SOURCE_DIR} 中未找到标准模式的固件，尝试复制其他可能的文件..." | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                find . -maxdepth 1 -type f \
                  ! -name "*.manifest" ! -name "*.txt" ! -name "*.json" ! -name "*.buildinfo" ! -name "sha256sums" \
                  ! -path "./packages/*" \
                  -print0 | while IFS= read -r -d $'\0' found_file; do
                    echo "找到其他文件: ${found_file}，复制到 ${COLLECTED_FIRMWARE_OUTPUT_DIR}/" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                    cp -v -f "${found_file}" "${COLLECTED_FIRMWARE_OUTPUT_DIR}/"
                    FILES_COPIED_COUNT=$((FILES_COPIED_COUNT + 1))
                done
            fi
            cd "/workdir/openwrt" 

            if [ $FILES_COPIED_COUNT -gt 0 ]; then
                echo "成功从 ${CURRENT_IMG_SOURCE_DIR} 复制 $FILES_COPIED_COUNT 个文件到 ${COLLECTED_FIRMWARE_OUTPUT_DIR}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                if [ -f ".config" ]; then cp -v -f .config "${COLLECTED_FIRMWARE_OUTPUT_DIR}/config.txt"; fi
                ls -lh "${COLLECTED_FIRMWARE_OUTPUT_DIR}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                FIRMWARE_COLLECTION_DIR_PATH="${COLLECTED_FIRMWARE_OUTPUT_DIR}" 
                break 
            else
                echo "警告: 在 ${CURRENT_IMG_SOURCE_DIR} 中未找到可用固件文件可收集。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                rm -rf "${COLLECTED_FIRMWARE_OUTPUT_DIR}" 
            fi
        done

        if [ -z "${FIRMWARE_COLLECTION_DIR_PATH}" ]; then
            echo "警告：未能在任何标准目标子目录中收集到固件文件。启用紧急备用收集逻辑。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            FIRMWARE_COLLECTION_DIR_PATH="${OPENWRT_BIN_DIR}/firmware_fallback_collection_$(date +%N)"
            mkdir -p "${FIRMWARE_COLLECTION_DIR_PATH}"
            find "${OPENWRT_TARGETS_DIR}" -type f \( -name "*.bin" -o -name "*.img" -o -name "*.img.gz" \) ! -path "*/packages/*" ! -path "*/firmware_collection_*" -exec cp -v -f {} "${FIRMWARE_COLLECTION_DIR_PATH}/" \;
            if [ -f "/workdir/openwrt/.config" ]; then cp -v -f /workdir/openwrt/.config "${FIRMWARE_COLLECTION_DIR_PATH}/config.txt";
            else echo "# Fallback .config - actual .config not found" > "${FIRMWARE_COLLECTION_DIR_PATH}/config.txt"; fi
        fi

        echo "FIRMWARE=${FIRMWARE_COLLECTION_DIR_PATH}" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

        if [ -n "${FIRMWARE_COLLECTION_DIR_PATH}" ] && [ -d "${FIRMWARE_COLLECTION_DIR_PATH}" ] && [ "$(ls -A "${FIRMWARE_COLLECTION_DIR_PATH}")" ]; then
            FIRMWARE_PARENT_DIR=$(dirname "${FIRMWARE_COLLECTION_DIR_PATH}")
            FIRMWARE_BASENAME=$(basename "${FIRMWARE_COLLECTION_DIR_PATH}")
            ZIP_FILENAME="${FIRMWARE_BASENAME}.zip" 
            echo "创建固件压缩包 ${FIRMWARE_PARENT_DIR}/${ZIP_FILENAME} 从目录 ${FIRMWARE_BASENAME}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            cd "${FIRMWARE_PARENT_DIR}" && zip -r9 "${ZIP_FILENAME}" "${FIRMWARE_BASENAME}"
            if [ -f "${ZIP_FILENAME}" ]; then
                echo "FIRMWARE_ZIP=${FIRMWARE_PARENT_DIR}/${ZIP_FILENAME}" >> $GITHUB_ENV
                ls -lh "${FIRMWARE_PARENT_DIR}/${ZIP_FILENAME}" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            else
                echo "错误：压缩包 ${ZIP_FILENAME} 未能成功创建。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
                echo "FIRMWARE_ZIP=/tmp/zip_creation_failed_$(date +%N).zip" >> $GITHUB_ENV 
            fi
        else
            echo "警告: 最终固件收集目录 (${FIRMWARE_COLLECTION_DIR_PATH}) 未有效设置、不是目录或为空，无法创建 firmware.zip。" | tee -a ${{ env.DEBUG_LOG_FILE_PATH }}
            echo "FIRMWARE_ZIP=/tmp/no_firmware_to_zip_$(date +%N).zip" >> $GITHUB_ENV
        fi

    - name: 上传固件 (Artifact)
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_ZIP }} 
        if-no-files-found: warn

    - name: 生成发布标签 (Generate Release Tag)
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        RELEASE_TAG_BASE=$(date +"%Y.%m.%d-%H%M")
        DEVICE_TAG_PART=$(echo "${{ env.DEVICE_NAME }}" | sed 's/^_//;s/_$//' | sed 's/[^a-zA-Z0-9._-]/-/g' )
        if [ -n "$DEVICE_TAG_PART" ] && [ "$DEVICE_TAG_PART" != "-" ]; then FINAL_RELEASE_TAG="${RELEASE_TAG_BASE}_${DEVICE_TAG_PART}"; else FINAL_RELEASE_TAG="${RELEASE_TAG_BASE}"; fi
        echo "RELEASE_TAG=${FINAL_RELEASE_TAG}" >> $GITHUB_OUTPUT
        echo "## OpenWrt Firmware Build ($(date +"%Y-%m-%d %H:%M %Z")) 📦" > release_body.txt
        echo "" >> release_body.txt
        echo "**Branch:** \`${{ env.REPO_BRANCH }}\`" >> release_body.txt
        echo "**Config:** \`${{ env.CONFIG_FILE_NAME }}\`" >> release_body.txt
        if [ -n "$DEVICE_TAG_PART" ] && [ "$DEVICE_TAG_PART" != "-" ]; then echo "**Device:** \`${{ env.DEVICE_NAME }}\`" >> release_body.txt; fi
        echo "" >> release_body.txt
        echo "### 固件下载 (Firmware Download)" >> release_body.txt
        echo "请在下方 Assets 中找到固件文件 (通常是一个 .zip 压缩包)。" >> release_body.txt
        echo "Please find firmware files (usually a .zip archive) in the Assets section below." >> release_body.txt
        echo "" >> release_body.txt; echo "---" >> release_body.txt
        echo "⚠️ **刷机前请务必备份重要数据！**" >> release_body.txt
        echo "⚠️ **Backup your important data before flashing!**" >> release_body.txt
        echo "" >> release_body.txt
        echo "_Built by GitHub Actions - Workflow: [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})_" >> release_body.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到Releases (Upload Firmware to Releases)
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release_body.txt
        files: ${{ env.FIRMWARE_ZIP }} 

    - name: 删除旧的Releases (Delete Old Releases)
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: 构建 OpenWRT 固件

on:
  repository_dispatch:
    types: [Source_Code_Update_Push, Gork_Source_Code_Update_Push]
  workflow_dispatch:
    inputs:
      clean_cache:
        description: '是否清除缓存（输入yes清除）'
        required: false
        default: 'no'
  schedule:
    - cron: 0 18 * * *
  push:
    branches:
      - main
    paths:
      - '.config'
      - '.github/workflows/Gork3编译CC缓存增量优化版.yaml'

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  FILE_NAME: Gork
  PRODUCT_NAME: Gork

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:
      - name: 检查项目分支
        uses: actions/checkout@main
        with:
          ref: main

      # 添加缓存键计算
      - name: 检查缓存密钥
        id: check-cache-key
        run: |
          echo "config_hash=$(md5sum .config | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Optimize Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
        
      - name: 安装编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/garypang13/OpenWrt_x86_64/main/diy/depends)
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          df -hT

      - name: 克隆源代码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone https://github.com/coolsnowwolf/lede openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cd openwrt
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
      
      # 恢复DL目录缓存
      - name: 恢复下载缓存
        uses: actions/cache@v3
        with:
          path: /workdir/openwrt/dl
          key: dl-cache-${{ steps.check-cache-key.outputs.config_hash }}
          restore-keys: |
            dl-cache-
            
      # 重要优化点：IPK包优先缓存
      - name: 恢复IPK包缓存
        uses: actions/cache@v3
        if: github.event.inputs.clean_cache != 'yes'
        with:
          path: /workdir/openwrt/bin/packages
          key: ipk-cache-${{ steps.check-cache-key.outputs.config_hash }}-${{ github.run_id }}
          restore-keys: |
            ipk-cache-${{ steps.check-cache-key.outputs.config_hash }}-
            ipk-cache-
            
      # 其他构建缓存
      - name: 恢复编译缓存
        uses: actions/cache@v3
        if: github.event.inputs.clean_cache != 'yes'
        with:
          path: |
            /workdir/openwrt/build_dir
            /workdir/openwrt/staging_dir
            ~/.ccache
          key: build-cache-${{ steps.check-cache-key.outputs.config_hash }}-${{ github.run_id }}
          restore-keys: |
            build-cache-${{ steps.check-cache-key.outputs.config_hash }}-
            build-cache-

      - name: 加载自定义 feeds 配置
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新 feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: 安装 feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: 加载自定义配置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          
      - name: 配置 ccache
        run: |
          cd openwrt
          mkdir -p ~/.ccache
          echo "max_size = 10G" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf

      - name: 下载软件包
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Freeing up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          
          # 设置环境变量启用ccache
          export CCACHE_DIR=~/.ccache
          export PATH=/usr/lib/ccache:$PATH
          
          # 如果存在已缓存的IPK包，显示信息
          if [ -d bin/packages ]; then
            echo "发现已缓存的IPK包，将优先使用"
            ls -la bin/packages 2>/dev/null || echo "但目录为空"
          fi
          
          make -j$(nproc) || make -j1 V=s
          
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          
          # 输出ccache统计信息
          ccache -s

      - name: Free up disk space complete
        if: (!cancelled())
        run: |
          df -hT
          
      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 整理文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传固件目录
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: ${{ env.FILE_NAME }}_${{ env.DATE1 }}
          path: ${{ env.FIRMWARE }}

      - name: 上传bin目录
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: 上传到 WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: 生成发布标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          [ ${{ steps.compile.outputs.status }} = 'success' ] && echo "编译成功" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.FILE_NAME }}-${{ env.DATE }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

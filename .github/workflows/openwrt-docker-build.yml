name: 基于Docker的OpenWrt增量编译

on:
  # 定时运行，每天检查源码更新
  schedule:
    - cron: '0 0 * * *'  # 每天午夜运行一次
  # 手动触发
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '完全重新编译'
        required: false
        default: 'false'
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'
      force_update:
        description: '强制更新源码并编译'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  # 缓存目录环境变量
  CCACHE_DIR: /workdir/ccache
  BUILD_STATE_DIR: /workdir/build_state

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 10240  # 减少到10GB
        swap-size-mb: 1024      # 减小swap空间
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 拉取 Docker 镜像
      run: docker pull ghcr.io/${{ github.repository_owner }}/openwrt-toolchain:latest

    - name: 在Docker容器中运行构建任务
      run: |
        docker run --rm -v ${{ github.workspace }}:/src -v /workdir:/workdir --privileged \
          -e REPO_URL="${REPO_URL}" \
          -e REPO_BRANCH="${REPO_BRANCH}" \
          -e FEEDS_CONF_URL="${FEEDS_CONF_URL}" \
          -e CONFIG_FILE="${CONFIG_FILE}" \
          -e DIY_P1_SH="${DIY_P1_SH}" \
          -e DIY_P2_SH="${DIY_P2_SH}" \
          -e UPLOAD_FIRMWARE="${UPLOAD_FIRMWARE}" \
          -e UPLOAD_RELEASE="${UPLOAD_RELEASE}" \
          -e TZ="${TZ}" \
          -e CCACHE_DIR="${CCACHE_DIR}" \
          -e BUILD_STATE_DIR="${BUILD_STATE_DIR}" \
          -e GITHUB_WORKSPACE="/src" \
          -e GITHUB_ENV="/src/.env" \
          -e GITHUB_OUTPUT="/src/.output" \
          ghcr.io/${{ github.repository_owner }}/openwrt-toolchain:latest \
          /bin/bash -c "cd /src && chmod +x build-openwrt.sh && ./build-openwrt.sh"

    - name: 保存GITHUB_ENV和GITHUB_OUTPUT
      run: |
        if [ -f .env ]; then
          cat .env >> $GITHUB_ENV
        fi
        if [ -f .output ]; then
          cat .output >> $GITHUB_OUTPUT
        fi

    # 整理固件
    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        # 注意：不要删除可能用于缓存的文件
        mkdir -p firmware
        FIRMWARE_FILES=$(find . -maxdepth 1 -name "*combined*" -or -name "*sysupgrade*")
        if [ -z "$FIRMWARE_FILES" ]; then
          echo "警告：未找到固件文件，使用所有bin文件"
          FIRMWARE_FILES=$(find . -maxdepth 1 -name "*.bin")
        fi
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "$FIRMWARE_FILES" | xargs -i cp {} ./firmware/
        else
          cp -r * ./firmware/
        fi
        cp /workdir/openwrt/.config ./firmware/config.txt
        zip -r firmware.zip firmware
        echo "FIRMWARE=$PWD/firmware" >> $GITHUB_ENV
        echo "FIRMWARE_ZIP=$PWD/firmware.zip" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    # 上传固件
    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "## OpenWrt固件构建完成 📦" > release.txt
        echo "📅 构建时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        
        # 添加更新内容信息
        if [ "${{ env.feeds_changed }}" = "true" ] || [ "${{ env.source_changed }}" = "true" ]; then
          echo "📢 此版本包含源码或feeds更新" >> release.txt
        fi
        
        if [ "${{ env.config_changed }}" = "true" ]; then
          echo "📢 此版本包含配置更改" >> release.txt
          if [ -s added_packages.txt ]; then
            echo "📦 新增软件包:" >> release.txt
            cat added_packages.txt | sed 's/^/- /' >> release.txt
          fi
          if [ -s removed_packages.txt ]; then
            echo "🗑️ 移除软件包:" >> release.txt
            cat removed_packages.txt | sed 's/^/- /' >> release.txt
          fi
        fi
        
        echo "📂 固件下载" >> release.txt
        echo "⚠️ 请在刷机前先做好备份！" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

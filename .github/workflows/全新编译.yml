name: 全新编译

on:
  # schedule:
  #   - cron: '0 16 * * *'
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 增量缓存优化.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: $GITHUB_WORKSPACE/ccache

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Optimize Disk Space
      uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: "^GCC$|^G\\+\\+$|Clang|LLVM"
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space - Balanced Version
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 5120  # 修改为5GB，保留更多根分区空间
        swap-size-mb: 512      # 增加swap空间到512MB
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    # 初始化环境等步骤保持不变...

    - name: Clone source code
      working-directory: ./
      run: |
        rm -rf openwrt  # 清理旧目录
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sudo chown -R $USER:$GROUPS .
        find . -type f -name "*.sh" -exec chmod +x {} \;

    # 恢复缓存策略改进，使用三层缓存架构
    - name: Restore toolchain cache
      uses: actions/cache@v3
      with:
        path: openwrt/staging_dir/toolchain-*
        key: toolchain-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles(env.CONFIG_FILE) }}
        restore-keys: |
          toolchain-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    - name: Restore package metadata
      id: cache-metadata
      uses: actions/cache@v3
      with:
        path: package_metadata
        key: metadata-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ github.run_id }}
        restore-keys: |
          metadata-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    - name: Restore package build cache
      id: cache-packages
      uses: actions/cache@v3
      with:
        path: |
          openwrt/build_dir/target-*/packages
          openwrt/staging_dir/target-*/packages
          openwrt/bin/packages
        key: noncore-packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ github.run_id }}
        restore-keys: |
          noncore-packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    - name: Restore ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ github.run_id }}
        restore-keys: |
          ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    # 接下来是feeds处理和自定义配置部分，保持不变...

    # 添加包跟踪机制
    - name: Track package changes
      run: |
        mkdir -p package_metadata
        
        cd openwrt
        make defconfig
        
        # 获取当前配置中的所有包
        grep "^CONFIG_PACKAGE_" .config | sort > ../package_metadata/current_packages.txt
        
        if [ -f "../package_metadata/previous_packages.txt" ]; then
          echo "Comparing with previous package list..."
          
          # 找出新增和移除的包
          comm -13 ../package_metadata/previous_packages.txt ../package_metadata/current_packages.txt > ../package_metadata/added_packages.txt || touch ../package_metadata/added_packages.txt
          comm -23 ../package_metadata/previous_packages.txt ../package_metadata/current_packages.txt > ../package_metadata/removed_packages.txt || touch ../package_metadata/removed_packages.txt
          comm -12 ../package_metadata/previous_packages.txt ../package_metadata/current_packages.txt > ../package_metadata/unchanged_packages.txt || touch ../package_metadata/unchanged_packages.txt
          
          # 检测包源码变化
          mkdir -p ../package_metadata/hashes
          cat ../package_metadata/current_packages.txt | while read pkg_line; do
            pkg_name=$(echo "$pkg_line" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
            pkg_dir=$(find package feeds -type d -name "$pkg_name" 2>/dev/null | head -1)
            
            if [ -n "$pkg_dir" ]; then
              echo "Checking package: $pkg_name"
              find "$pkg_dir" -type f -not -path "*/\.git/*" 2>/dev/null | sort | xargs sha256sum 2>/dev/null > "../package_metadata/hashes/$pkg_name.current" || echo "Empty hash for $pkg_name"
              
              if [ -f "../package_metadata/hashes/$pkg_name.previous" ]; then
                if ! cmp -s "../package_metadata/hashes/$pkg_name.current" "../package_metadata/hashes/$pkg_name.previous"; then
                  echo "Package changed: $pkg_name"
                  echo "CONFIG_PACKAGE_$pkg_name=y" >> ../package_metadata/changed_packages.txt
                fi
              else
                echo "New hash for: $pkg_name"
                echo "CONFIG_PACKAGE_$pkg_name=y" >> ../package_metadata/changed_packages.txt
              fi
              
              mv "../package_metadata/hashes/$pkg_name.current" "../package_metadata/hashes/$pkg_name.previous" 2>/dev/null || true
            fi
          done
        else
          echo "First run, all packages will be compiled"
          cp ../package_metadata/current_packages.txt ../package_metadata/changed_packages.txt
        fi
        
        # 保存当前包列表作为下次的基准
        cp ../package_metadata/current_packages.txt ../package_metadata/previous_packages.txt
        
        # 显示包变化情况
        echo "==== Package Changes Summary ===="
        echo "Added packages: $(wc -l < ../package_metadata/added_packages.txt 2>/dev/null || echo 0)"
        echo "Removed packages: $(wc -l < ../package_metadata/removed_packages.txt 2>/dev/null || echo 0)"
        echo "Changed packages: $(wc -l < ../package_metadata/changed_packages.txt 2>/dev/null || echo 0)"
        echo "Unchanged packages: $(wc -l < ../package_metadata/unchanged_packages.txt 2>/dev/null || echo 0)"

    - name: Download package and resolve dependencies
      id: package
      run: |
        cd openwrt
        make defconfig
        make oldconfig <<< "y"
        timeout 30m make download -j2 V=s || echo "Warning: Download timed out or failed, proceeding..."
        find dl -size -1024c -exec ls -l {} \; || echo "Warning: Failed to list small files, proceeding..."
        find dl -size -1024c -exec rm -f {} \; || echo "Warning: Failed to remove small files, proceeding..."

    # 优化编译步骤，重点关注非核心包的增量编译
    - name: Smart Incremental Build
      id: compile
      run: |
        cd openwrt
        ccache -M 5G
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        echo "Starting compilation with ccache"
        
        # 检查工具链
        if [ ! -d "staging_dir/toolchain-*" ]; then
          echo "Toolchain not found in cache, compiling..."
          make -j$(nproc) tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }} || \
          make -j8 tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }} || \
          make -j1 V=s tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }}
        else
          echo "Toolchain restored from cache, skipping compilation."
        fi
        
        # 编译变化的非核心包
        if [ -f "../package_metadata/changed_packages.txt" ]; then
          echo "Building changed or new packages..."
          while read pkg_line; do
            pkg_name=$(echo "$pkg_line" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
            echo "Building package: $pkg_name"
            if [ -d "package/$pkg_name" ] || [ -n "$(find feeds -path "*/package/$pkg_name" -type d 2>/dev/null)" ]; then
              make package/$pkg_name/clean CCACHE_DIR=${{ env.CCACHE_DIR }} || echo "Warning: Failed to clean $pkg_name"
              make package/$pkg_name/compile -j$(nproc) CCACHE_DIR=${{ env.CCACHE_DIR }} || \
              make package/$pkg_name/compile -j8 CCACHE_DIR=${{ env.CCACHE_DIR }} || \
              make package/$pkg_name/compile -j1 V=s CCACHE_DIR=${{ env.CCACHE_DIR }} || \
              echo "Warning: Failed to compile $pkg_name"
            else
              pkg_dir=$(find package feeds -name "$pkg_name" -type d 2>/dev/null | head -n 1)
              if [ -n "$pkg_dir" ]; then
                echo "Building package from feed: $pkg_dir"
                make "$pkg_dir/clean" CCACHE_DIR=${{ env.CCACHE_DIR }} || echo "Warning: Failed to clean $pkg_dir"
                make "$pkg_dir/compile" -j$(nproc) CCACHE_DIR=${{ env.CCACHE_DIR }} || \
                make "$pkg_dir/compile" -j8 CCACHE_DIR=${{ env.CCACHE_DIR }} || \
                make "$pkg_dir/compile" -j1 V=s CCACHE_DIR=${{ env.CCACHE_DIR }} || \
                echo "Warning: Failed to compile from $pkg_dir"
              else
                echo "Package not found in main packages or feeds: $pkg_name"
              fi
            fi
          done < ../package_metadata/changed_packages.txt
        else
          echo "No changed packages to build."
        fi
        
        # 总是构建内核和文件系统
        echo "Building kernel and root filesystem..."
        make -j$(nproc) target/linux/compile CCACHE_DIR=${{ env.CCACHE_DIR }} || \
        make -j8 target/linux/compile CCACHE_DIR=${{ env.CCACHE_DIR }} || \
        make -j1 V=s target/linux/compile CCACHE_DIR=${{ env.CCACHE_DIR }}
        
        echo "Building target filesystem..."
        make -j$(nproc) target/install CCACHE_DIR=${{ env.CCACHE_DIR }} || \
        make -j8 target/install CCACHE_DIR=${{ env.CCACHE_DIR }} || \
        make -j1 V=s target/install CCACHE_DIR=${{ env.CCACHE_DIR }}
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "固件大小：$(du -sh bin/targets/*/*)"

    # 清理构建目录以优化缓存空间
    - name: Clean build directories for caching
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt
        echo "Cleaning build directories for efficient caching..."
        
        # 删除非核心包中的中间文件，保留编译结果
        find build_dir/target-*/packages -name "*.o" -delete 2>/dev/null || true
        find build_dir/target-*/packages -name ".*.cmd" -delete 2>/dev/null || true
        find build_dir/target-*/packages -name ".gitignore" -delete 2>/dev/null || true
        find build_dir/target-*/packages -name "*.so*" | grep -v '\.so\.[0-9.]*$' | xargs rm -f 2>/dev/null || true
        
        # 清除内核源码目录中的大型文件
        find build_dir/target-*/linux-* -path "*/Documentation/*" -delete 2>/dev/null || true
        find build_dir/target-*/linux-* -name "*.o" -delete 2>/dev/null || true
        find build_dir/target-*/linux-* -name ".*.cmd" -delete 2>/dev/null || true
        
        # 显示当前磁盘使用情况
        df -h
        echo "Top 10 largest directories:"
        du -h -d 2 | sort -hr | head -10

name: 全新编译

on:
  workflow_dispatch:  # 手动触发
  push:               # 推送代码时触发
    branches:
      - main

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_REPO_URL: https://github.com/tikkacn/openwrt-new-rom
  CONFIG_BRANCH: main
  FEEDS_CONF_URL: https://raw.githubusercontent.com/tikkacn/openwrt-new-rom/main/feeds.conf.default
  CONFIG_URL: https://raw.githubusercontent.com/tikkacn/openwrt-new-rom/main/%E5%A2%9E%E9%87%8F%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96.config
  WORK_DIR: ${{github.workspace}}
  CACHE_DIR: ${{github.workspace}}/cache
  TMP_DIR: ${{github.workspace}}/tmp

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 1. 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. 清理前检查磁盘空间
      - name: Before Freeing Up Disk Space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      # 3. 使用磁盘优化工具
      - name: Optimize Disk Space
        uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: "^GCC$|^G\\+\\+$|Clang|LLVM"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"

      # 4. 最大化构建空间
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      # 5. 额外清理（避免破坏 APT）
      - name: Additional Cleanup
        run: |
          sudo rm -rf /var/log/* /tmp/* /var/tmp/* /usr/share/doc/* /usr/share/man/* || true
          sudo find / -type f -name "*.log" -delete || true
          sudo find / -type d -name "__pycache__" -exec rm -rf {} + || true
          echo "Additional cleanup complete"
          df -hT

      # 6. 清理后检查工作目录空间
      - name: Free Up Disk Space Complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
          REQUIRED_SPACE=20
          AVAILABLE_SPACE=$(df -BG ${{github.workspace}} | awk 'NR==2 {print $4}' | tr -d 'G')
          if [ "$AVAILABLE_SPACE" -lt "$REQUIRED_SPACE" ]; then
            echo "Error: Insufficient disk space in ${{github.workspace}} ($AVAILABLE_SPACE GB available, $REQUIRED_SPACE GB required)"
            exit 1
          fi

      # 7. 检查 APT 状态并安装 Python 2.7
      - name: Install Python 2.7
        run: |
          # 检查 APT 是否可用
          sudo apt-get update || (echo "APT update failed, attempting repair..." && sudo dpkg --configure -a && sudo apt-get update)
          sudo add-apt-repository ppa:deadsnakes/ppa -y || (echo "Adding PPA failed, falling back to manual install..." && \
            wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz && \
            tar xzf Python-2.7.18.tgz && \
            cd Python-2.7.18 && \
            ./configure && make -j$(nproc) && sudo make install)
          sudo apt-get update
          sudo apt-get install -y python2.7 || echo "Python 2.7 already installed manually"

      # 8. 设置构建环境
      - name: Install Dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo -E apt-get -qq install \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext \
            gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 \
            libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
            libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
            mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
            python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion \
            swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-setuptools
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      # 9. 恢复 Package 源码缓存
      - name: Restore Package Source Cache
        uses: actions/cache@v3
        with:
          path: ${{env.CACHE_DIR}}/dl
          key: ${{runner.os}}-openwrt-packages-${{github.sha}}
          restore-keys: |
            ${{runner.os}}-openwrt-packages-

      # 10. 恢复编译后的 Package 二进制缓存
      - name: Restore Package Binary Cache
        uses: actions/cache@v3
        with:
          path: ${{env.WORK_DIR}}/openwrt/bin/packages
          key: ${{runner.os}}-openwrt-bin-packages-${{github.sha}}
          restore-keys: |
            ${{runner.os}}-openwrt-bin-packages-

      # 11. 克隆 OpenWrt LEDE 源码
      - name: Clone LEDE Source
        run: |
          rm -rf ${{env.WORK_DIR}}/openwrt
          git clone --depth 1 -b $REPO_BRANCH $REPO_URL ${{env.WORK_DIR}}/openwrt
          cd ${{env.WORK_DIR}}/openwrt
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # 12. 下载 feeds.conf.default 和 .config 文件
      - name: Download Configuration Files
        run: |
          curl -L -o ${{env.WORK_DIR}}/openwrt/feeds.conf.default "$FEEDS_CONF_URL"
          curl -L -o ${{env.WORK_DIR}}/openwrt/.config "$CONFIG_URL"

      # 13. 更新和安装 Feeds
      - name: Update and Install Feeds
        working-directory: ${{env.WORK_DIR}}/openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "Disk space after feeds:"
          df -h

      # 14. 下载并缓存 Packages
      - name: Download Packages with Cache
        working-directory: ${{env.WORK_DIR}}/openwrt
        run: |
          mkdir -p ${{env.CACHE_DIR}}/dl
          ln -sf ${{env.CACHE_DIR}}/dl dl
          make defconfig
          timeout 30m make download -j2 || echo "Warning: Download timed out or failed, proceeding..."
          find dl -size -1024c -exec rm -f {} \; || echo "Warning: Failed to remove small files, proceeding..."
          echo "Disk space after download:"
          df -h

      # 15. 编译固件
      - name: Compile OpenWrt Firmware
        working-directory: ${{env.WORK_DIR}}/openwrt
        env:
          TMPDIR: ${{env.TMP_DIR}}
        run: |
          mkdir -p ${{env.TMP_DIR}}
          make -j$(nproc) || make -j1
          make clean
          echo "Disk space after compilation:"
          df -h

      # 16. 保存编译后的 Package 二进制缓存
      - name: Save Package Binary Cache
        uses: actions/cache@v3
        if: always()
        with:
          path: ${{env.WORK_DIR}}/openwrt/bin/packages
          key: ${{runner.os}}-openwrt-bin-packages-${{github.sha}}

      # 17. 上传固件
      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_Firmware
          path: ${{env.WORK_DIR}}/openwrt/bin/targets/*/*/*.bin

      # 18. 上传 Packages
      - name: Upload Packages
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_Packages
          path: ${{env.WORK_DIR}}/openwrt/bin/packages/*/*

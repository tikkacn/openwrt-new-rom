name: 全新编译第七版

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '完全重新编译'
        required: false
        default: 'false'
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: /workdir/ccache

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480  # 为 /dev/root 预留 20GB
        swap-size-mb: 5120      # 交换空间 5GB
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 额外清理磁盘空间并检查
      run: |
        echo "清理额外磁盘空间..."
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
        docker image prune -a -f || true
        docker system prune -af || true
        sudo apt-get clean
        sudo apt-get autoremove -y

        ROOT_AVAIL=$(df -m /dev/root | tail -1 | awk '{print $4}')
        echo "根分区可用空间: ${ROOT_AVAIL}MB"
        if [ "$ROOT_AVAIL" -lt 20480 ]; then
          echo "错误：/dev/root 可用空间不足 20GB"
          exit 1
        fi
        df -h

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools jq
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        mkdir -p /workdir/package_cache /workdir/build_state /workdir/toolchain_cache ${{ env.CCACHE_DIR }}
        chmod -R 777 /workdir
        
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part1.sh
        echo 'echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall" >> feeds.conf.default' >> $GITHUB_WORKSPACE/diy-part1.sh
        chmod +x $GITHUB_WORKSPACE/diy-part1.sh
        
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part2.sh
        echo 'sed -i "s/OpenWrt /OpenWrt_AutoBuild /" package/lean/default-settings/files/zzz-default-settings' >> $GITHUB_WORKSPACE/diy-part2.sh
        chmod +x $GITHUB_WORKSPACE/diy-part2.sh
        
        if [ ! -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
          echo "警告：配置文件 $CONFIG_FILE 不存在，创建默认配置文件"
          echo "# 创建默认的最小化配置文件" > $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_PACKAGE_luci=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
        fi
        
        df -h

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        find . -type f -name "*.sh" -exec chmod +x {} \;
        rm -rf .git

    - name: 恢复编译包缓存
      uses: actions/cache@v3
      id: cache-packages
      if: inputs.clean_build != 'true'
      with:
        path: |
          /workdir/package_cache
          /workdir/openwrt/bin/packages
          /workdir/openwrt/bin/targets/*/packages
        key: packages-${{ env.REPO_BRANCH }}-${{ hashFiles(github.event.inputs.config_file || '增量缓存优化.config') }}
        restore-keys: |
          packages-${{ env.REPO_BRANCH }}-

    - name: 恢复工具链缓存
      uses: actions/cache@v3
      id: cache-toolchain
      if: inputs.clean_build != 'true'
      with:
        path: /workdir/toolchain_cache/staging_dir
        key: toolchain-${{ env.REPO_BRANCH }}-${{ hashFiles(github.event.inputs.config_file || '增量缓存优化.config') }}
        restore-keys: |
          toolchain-${{ env.REPO_BRANCH }}-

    - name: 恢复CCACHE缓存
      uses: actions/cache@v3
      id: cache-ccache
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_BRANCH }}-${{ hashFiles(github.event.inputs.config_file || '增量缓存优化.config') }}
        restore-keys: |
          ccache-${{ env.REPO_BRANCH }}-

    - name: 恢复构建状态
      uses: actions/cache@v3
      id: cache-state
      if: inputs.clean_build != 'true'
      with:
        path: /workdir/build_state
        key: state-${{ env.REPO_BRANCH }}-${{ hashFiles(github.event.inputs.config_file || '增量缓存优化.config') }}
        restore-keys: |
          state-${{ env.REPO_BRANCH }}-

    - name: 恢复Feeds缓存
      uses: actions/cache@v3
      id: cache-feeds
      if: inputs.clean_build != 'true'
      with:
        path: /workdir/openwrt/feeds
        key: feeds-${{ env.REPO_BRANCH }}-${{ hashFiles(github.event.inputs.config_file || '增量缓存优化.config') }}
        restore-keys: |
          feeds-${{ env.REPO_BRANCH }}-

    - name: 检查缓存恢复状态
      run: |
        echo "编译包缓存恢复状态: ${{ steps.cache-packages.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        echo "工具链缓存恢复状态: ${{ steps.cache-toolchain.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        echo "CCACHE缓存恢复状态: ${{ steps.cache-ccache.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        echo "构建状态缓存恢复状态: ${{ steps.cache-state.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        echo "Feeds缓存恢复状态: ${{ steps.cache-feeds.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        
        ls -la /workdir/build_state/ || echo "构建状态目录为空"
        if [ -f "/workdir/build_state/config.md5" ]; then
          echo "之前MD5: $(cat /workdir/build_state/config.md5)"
        fi
        if [ -f "/workdir/toolchain_cache/staging_dir/host/bin/libdeflate-gzip" ]; then
          echo "工具链包含 libdeflate-gzip，缓存正常"
        else
          echo "警告：工具链缓存缺少 libdeflate-gzip"
        fi
        df -h

    - name: 配置编译环境
      run: |
        cd /workdir/openwrt
        if [ -d "/workdir/toolchain_cache/staging_dir" ]; then
          ln -sf /workdir/toolchain_cache/staging_dir .
        fi
        if [ -f ".config" ]; then
          cp .config .config.original
        fi
        $GITHUB_WORKSPACE/$DIY_P1_SH
        if [ -d "feeds" ]; then
          echo "Feeds 已存在，跳过更新"
        else
          echo "Feeds 不存在，执行更新..."
          ./scripts/feeds update -a
        fi
        ./scripts/feeds install -a
        [ -e $GITHUB_WORKSPACE/files ] && cp -r $GITHUB_WORKSPACE/files ./files
        cp $GITHUB_WORKSPACE/$CONFIG_FILE ./.config
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "CONFIG_AUTOREMOVE=n" >> .config
        echo "CONFIG_AUTOREBUILD=n" >> .config
        make defconfig
        df -h

    - name: 检查源码变化
      id: check-feeds
      run: |
        cd /workdir/openwrt
        find feeds -type f -name "Makefile" -exec sha256sum {} \; | sort | sha256sum > /workdir/build_state/feeds.sha256
        CURRENT_FEEDS_HASH=$(cat /workdir/build_state/feeds.sha256 | awk '{print $1}')
        PREVIOUS_FEEDS_HASH=$(cat /workdir/build_state/previous_feeds.sha256 || echo "")
        if [ "$CURRENT_FEEDS_HASH" != "$PREVIOUS_FEEDS_HASH" ]; then
          echo "feeds_changed=true" >> $GITHUB_ENV
        else
          echo "feeds_changed=false" >> $GITHUB_ENV
        fi
        echo "当前 feeds 哈希: $CURRENT_FEEDS_HASH"
        echo "之前 feeds 哈希: $PREVIOUS_FEEDS_HASH"
        cp /workdir/build_state/feeds.sha256 /workdir/build_state/previous_feeds.sha256

    - name: 恢复已编译软件包
      if: steps.cache-packages.outputs.cache-hit == 'true'
      run: |
        cd /workdir/openwrt
        mkdir -p bin/packages bin/targets
        if [ "${{ env.feeds_changed }}" = "true" ]; then
          echo "feeds 已更新，跳过恢复旧的编译包缓存"
        else
          cp -r /workdir/package_cache/bin/packages/* bin/packages/ || true
          cp -r /workdir/package_cache/bin/targets/* bin/targets/ || true
          echo "已恢复缓存中的软件包"
          ls -la bin/packages/
        fi

    - name: 开启SSH调试
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true'

    - name: 下载软件包
      run: |
        cd /workdir/openwrt
        make download -j8 || make download -j1 V=s
        mkdir -p ${{ env.CCACHE_DIR }}
        ccache -o cache_dir=${{ env.CCACHE_DIR }}
        ccache -o max_size=5G
        ccache -z
        rm -rf dl || true
        df -h

    - name: 智能编译固件
      id: compile
      run: |
        cd /workdir/openwrt
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export PATH="/usr/lib/ccache:$PATH"

        cleanup_temp_files() {
          echo "清理临时文件以释放空间..."
          find /tmp -type f -delete || true
          df -h
        }

        save_toolchain() {
          echo "保存工具链到缓存..."
          mkdir -p /workdir/toolchain_cache
          if [ -d "staging_dir" ]; then
            cp -r staging_dir/* /workdir/toolchain_cache/
            TOOLCHAIN_SIZE=$(du -sh /workdir/toolchain_cache | awk '{print $1}')
            TOOLCHAIN_FILES=$(find /workdir/toolchain_cache -type f | wc -l)
            echo "工具链缓存大小: $TOOLCHAIN_SIZE"
            echo "工具链文件数: $TOOLCHAIN_FILES"
            ls -la /workdir/toolchain_cache/host/bin || echo "host/bin 目录为空"
            echo "### 工具链缓存保存" >> $GITHUB_STEP_SUMMARY
            echo "- 大小: $TOOLCHAIN_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "- 文件数: $TOOLCHAIN_FILES" >> $GITHUB_STEP_SUMMARY
            echo "- 路径: /workdir/toolchain_cache" >> $GITHUB_STEP_SUMMARY
          else
            echo "无工具链目录可保存"
          fi
        }

        save_packages() {
          echo "保存编译包到缓存..."
          mkdir -p /workdir/package_cache
          if [ -d "bin/packages" ] || [ -d "bin/targets" ]; then
            [ -d "bin/packages" ] && cp -r bin/packages /workdir/package_cache/
            [ -d "bin/targets" ] && mkdir -p /workdir/package_cache/bin && cp -r bin/targets /workdir/package_cache/bin/
            PACKAGE_SIZE=$(du -sh /workdir/package_cache | awk '{print $1}')
            PACKAGE_FILES=$(find /workdir/package_cache -type f | wc -l)
            echo "编译包缓存大小: $PACKAGE_SIZE"
            echo "编译包文件数: $PACKAGE_FILES"
            echo "保存路径: /workdir/package_cache"
            echo "### 编译包缓存保存" >> $GITHUB_STEP_SUMMARY
            echo "- 大小: $PACKAGE_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "- 文件数: $PACKAGE_FILES" >> $GITHUB_STEP_SUMMARY
            echo "- 路径: /workdir/package_cache" >> $GITHUB_STEP_SUMMARY
          else
            echo "无编译包可保存"
          fi
        }

        compile_firmware() {
          if [ $DO_FULL_BUILD -eq 1 ]; then
            if [ ! -d "staging_dir/toolchain-"* ]; then
              echo "编译工具链..."
              make -j$(nproc) tools/compile || make -j1 V=s tools/compile
              make -j$(nproc) toolchain/compile || make -j1 V=s toolchain/compile
              save_toolchain
            else
              echo "工具链已存在，跳过编译"
            fi
            cleanup_temp_files
            echo "编译完整固件..."
            make -j$(nproc) || make -j1 V=s
          elif [ $DO_PACKAGE_BUILD -eq 1 ] || [ "${{ env.feeds_changed }}" = "true" ]; then
            echo "软件包配置变化或源码更新，编译软件包..."
            make -j$(nproc) package/clean || make -j1 V=s package/clean
            make -j$(nproc) package/compile || make -j1 V=s package/compile
            make -j$(nproc) package/index || make -j1 V=s package/index
          else
            echo "最小化增量编译..."
            make -j$(nproc) || make -j1 V=s
          fi

          if [ $? -eq 0 ]; then
            echo "编译成功"
            save_toolchain
            save_packages
            mkdir -p /workdir/build_state
            cp .config /workdir/build_state/config.txt
            echo "$TOOLCHAIN_MD5" > /workdir/build_state/toolchain.md5
            echo "$PACKAGE_MD5" > /workdir/build_state/package.md5
            echo "保存构建状态完成"
            echo "检查缓存内容："
            ls -la /workdir/package_cache || echo "编译包缓存目录为空"
            ls -la /workdir/toolchain_cache || echo "工具链缓存目录为空"
            ls -la /workdir/build_state || echo "构建状态缓存目录为空"
          else
            echo "编译失败"
            exit 1
          fi
        }

        TOOLCHAIN_CONFIG=$(grep "^CONFIG_TARGET" .config | sort)
        TOOLCHAIN_MD5=$(echo "$TOOLCHAIN_CONFIG" | md5sum | awk '{print $1}')
        PREVIOUS_TOOLCHAIN_MD5=$(cat /workdir/build_state/toolchain.md5 || echo "")

        PACKAGE_CONFIG=$(grep "^CONFIG_PACKAGE" .config | sort)
        PACKAGE_MD5=$(echo "$PACKAGE_CONFIG" | md5sum | awk '{print $1}')
        PREVIOUS_PACKAGE_MD5=$(cat /workdir/build_state/package.md5 || echo "")

        DO_FULL_BUILD=0
        DO_PACKAGE_BUILD=0

        if [ -z "$PREVIOUS_TOOLCHAIN_MD5" ] || [ "$TOOLCHAIN_MD5" != "$PREVIOUS_TOOLCHAIN_MD5" ] || [ "${{ github.event.inputs.clean_build }}" = "true" ] || [ ! -d "feeds" ]; then
          echo "工具链配置变化、首次编译或 feeds 缺失，需要全量编译"
          DO_FULL_BUILD=1
        elif [ -z "$PREVIOUS_PACKAGE_MD5" ] || [ "$PACKAGE_MD5" != "$PREVIOUS_PACKAGE_MD5" ]; then
          echo "软件包配置变化，需要编译软件包"
          DO_PACKAGE_BUILD=1
        else
          echo "配置未变，检查源码变化..."
        fi

        compile_firmware

        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        ccache -s
        df -h

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        rm -rf packages || true
        mkdir -p firmware
        FIRMWARE_FILES=$(find . -maxdepth 1 -name "*combined*" -or -name "*sysupgrade*")
        if [ -z "$FIRMWARE_FILES" ]; then
          echo "警告：未找到固件文件，使用所有bin文件"
          FIRMWARE_FILES=$(find . -maxdepth 1 -name "*.bin")
        fi
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "$FIRMWARE_FILES" | xargs -i cp {} ./firmware/
        else
          cp -r * ./firmware/
        fi
        cp /workdir/openwrt/.config ./firmware/config.txt
        zip -r firmware.zip firmware
        echo "FIRMWARE=$PWD/firmware" >> $GITHUB_ENV
        echo "FIRMWARE_ZIP=$PWD/firmware.zip" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "## OpenWrt固件构建完成 📦" > release.txt
        echo "📅 构建时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        echo "📂 固件下载" >> release.txt
        echo "⚠️ 请在刷机前先做好备份！" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理工作目录
      if: always()
      run: |
        echo "清理工作目录以释放空间（保留 build_dir）..."
        rm -rf /workdir/openwrt/staging_dir || true
        rm -rf /workdir/openwrt/tmp || true
        df -h

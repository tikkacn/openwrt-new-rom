name: 全新编译第11版(Gemini)

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '完全重新编译'
        required: false
        default: 'false'
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: /workdir/ccache
  TOOLCHAIN_DIR: /workdir/openwrt/staging_dir
  TOOLCHAIN_BUILD_DIR: /workdir/openwrt/build_dir/toolchain-x86_64_gcc-13.3.0_musl
  PACKAGES_DIR: /workdir/openwrt/bin/targets
  BUILD_STATE_DIR: /workdir/build_state
  CCACHE_LOGFILE: /tmp/ccache_detailed.log # 新增: ccache详细日志文件路径
  DEBUG_LOG_FILE: /tmp/build_debug_summary.log # 新增: 调试摘要日志文件路径

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480
        swap-size-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 额外清理磁盘空间并检查
      run: |
        echo "清理额外磁盘空间..."
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
        docker image prune -a -f || true
        docker system prune -af || true
        sudo apt-get clean
        sudo apt-get autoremove -y
        ROOT_AVAIL=$(df -m /dev/root | tail -1 | awk '{print $4}')
        echo "根分区可用空间: ${ROOT_AVAIL}MB"
        if [ "$ROOT_AVAIL" -lt 20480 ]; then
          echo "错误：/dev/root 可用空间不足 20GB"
          exit 1
        fi
        df -h

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        mkdir -p ${{ env.BUILD_STATE_DIR }} ${{ env.CCACHE_DIR }}
        chmod -R 777 /workdir
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part1.sh
        echo '# Feeds 已通过 FEEDS_CONF_URL 配置' >> $GITHUB_WORKSPACE/diy-part1.sh
        echo '# 无自定义内容 (diy-part1.sh)' >> $GITHUB_WORKSPACE/diy-part1.sh # 明确无内容
        chmod +x $GITHUB_WORKSPACE/diy-part1.sh
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part2.sh
        echo 'sed -i "s/OpenWrt /OpenWrt_AutoBuild /" package/lean/default-settings/files/zzz-default-settings' >> $GITHUB_WORKSPACE/diy-part2.sh
        echo '# 无额外自定义内容 (diy-part2.sh)' >> $GITHUB_WORKSPACE/diy-part2.sh # 明确除banner外无内容
        chmod +x $GITHUB_WORKSPACE/diy-part2.sh
        if [ ! -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
          echo "警告：配置文件 $CONFIG_FILE 不存在，创建默认配置文件"
          echo "# 创建默认的最小化配置文件" > $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_PACKAGE_luci=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
        fi
        df -h

    - name: 克隆源代码并配置 Feeds
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        find . -type f -name "*.sh" -exec chmod +x {} \;
        curl -L -o feeds.conf.default "$FEEDS_CONF_URL" || echo "警告：无法下载 feeds.conf.default，使用仓库默认配置"
        cat feeds.conf.default
        rm -rf .git
        mkdir -p ${{ env.PACKAGES_DIR }} ${{ env.TOOLCHAIN_DIR }}
        mkdir -p ${{ env.TOOLCHAIN_BUILD_DIR }} ${{ env.BUILD_STATE_DIR }}
        mkdir -p logs

    - name: 恢复工具链缓存
      uses: actions/cache@v3
      id: cache-toolchain
      if: inputs.clean_build != 'true'
      with:
        path: |
          ${{ env.TOOLCHAIN_DIR }}
          ${{ env.TOOLCHAIN_BUILD_DIR }}
        key: toolchain-${{ env.REPO_BRANCH }}-fixed-cache

    - name: 恢复编译包缓存
      uses: actions/cache@v3
      id: cache-packages
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.PACKAGES_DIR }}
        key: packages-${{ env.REPO_BRANCH }}-fixed-cache

    - name: 恢复CCACHE缓存
      uses: actions/cache@v3
      id: cache-ccache
      with: # CCACHE 总是尝试恢复，除非是完全 clean_build (由用户决定是否要清空网页上的cache)
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_BRANCH }}-fixed-cache

    - name: 恢复构建状态缓存
      uses: actions/cache@v3
      id: cache-state
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.BUILD_STATE_DIR }}
        key: state-${{ env.REPO_BRANCH }}-fixed-cache

    - name: 检查缓存恢复状态
      run: |
        echo "--- Debug Log: Cache Status ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "CONFIG_FILE: ${{ env.CONFIG_FILE }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "工具链缓存恢复状态: ${{ steps.cache-toolchain.outputs.cache-hit == 'true' && '成功' || '未找到缓存或不使用' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "编译包缓存恢复状态: ${{ steps.cache-packages.outputs.cache-hit == 'true' && '成功' || '未找到缓存或不使用' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "CCACHE缓存恢复状态: ${{ steps.cache-ccache.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "构建状态缓存恢复状态: ${{ steps.cache-state.outputs.cache-hit == 'true' && '成功' || '未找到缓存或不使用' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "工具链目录大小: $(du -sh ${{ env.TOOLCHAIN_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "工具链构建目录大小: $(du -sh ${{ env.TOOLCHAIN_BUILD_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "编译包目录大小: $(du -sh ${{ env.PACKAGES_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "CCACHE目录大小: $(du -sh ${{ env.CCACHE_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        find ${{ env.TOOLCHAIN_DIR }}/host/bin -name "gcc*" 2>/dev/null | head -5 || echo "未找到主机gcc"
        find ${{ env.TOOLCHAIN_DIR }}/toolchain-* -name "*gcc*" 2>/dev/null | head -5 || echo "未找到交叉编译器gcc"
        ls -la ${{ env.BUILD_STATE_DIR }}/ || echo "构建状态目录为空"
        if [ -f "${{ env.BUILD_STATE_DIR }}/config.md5" ]; then
          echo "之前MD5: $(cat ${{ env.BUILD_STATE_DIR }}/config.md5)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        echo "--- End Debug Log: Cache Status ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        df -h

    - name: 配置编译环境
      run: |
        cd /workdir/openwrt
        if [ -f ".config" ]; then
          cp .config .config.original
        fi
        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo "更新并安装 Feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        [ -e $GITHUB_WORKSPACE/files ] && cp -r $GITHUB_WORKSPACE/files ./files
        cp $GITHUB_WORKSPACE/$CONFIG_FILE ./.config
        cp .config .config.input # 保存一份输入配置用于比较
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "CONFIG_AUTOREMOVE=n" >> .config
        echo "CONFIG_AUTOREBUILD=n" >> .config
        echo "确保包含必要的固件生成配置..."
        # ... (省略了部分固件配置确保逻辑，与原版一致) ...
        if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config; fi
        if grep -q "CONFIG_TARGET_x86=y" .config; then
          if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then echo "CONFIG_GRUB_IMAGES=y" >> .config; fi
          if ! grep -q "CONFIG_TARGET_IMAGES_PAD=y" .config; then echo "CONFIG_TARGET_IMAGES_PAD=y" >> .config; fi
        fi
        make defconfig
        grep "^CONFIG_PACKAGE_.*=y" .config.input | sort > packages_input.txt || true
        grep "^CONFIG_PACKAGE_.*=y" .config | sort > packages_defconfig.txt || true
        comm -23 packages_input.txt packages_defconfig.txt > missing_packages.txt
        if [ -s missing_packages.txt ]; then
          echo "警告：以下包在 defconfig 后缺失，将尝试恢复：" | tee -a ${{ env.DEBUG_LOG_FILE }}
          cat missing_packages.txt | tee -a ${{ env.DEBUG_LOG_FILE }}
          cat missing_packages.txt >> .config
          while read -r line; do
            pkg=$(echo "$line" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
            echo "安装包: $pkg"
            ./scripts/feeds install "$pkg" || echo "警告：无法安装 $pkg，可能不在 feeds 中"
          done < missing_packages.txt
          make defconfig
        else
          echo "所有配置项均保留，无缺失" | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        echo "最终配置中的镜像生成选项:" | tee -a ${{ env.DEBUG_LOG_FILE }}
        grep -E "CONFIG_TARGET_ROOTFS|CONFIG_TARGET_IMAGES|CONFIG_GRUB|CONFIG_ISO|CONFIG_EFI" .config | tee -a ${{ env.DEBUG_LOG_FILE }} || echo "未找到镜像相关配置" | tee -a ${{ env.DEBUG_LOG_FILE }}
        diff .config.input .config > config_diff.txt || echo "配置无差异"
        echo "--- Debug Log: Config diff after defconfig and recovery ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        cat config_diff.txt | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- End Debug Log: Config diff ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        df -h

    - name: 检查源码变化
      id: check-feeds
      run: |
        cd /workdir/openwrt
        mkdir -p ${{ env.BUILD_STATE_DIR }}
        find feeds -type f -name "Makefile" -exec sha256sum {} \; | sort | sha256sum > ${{ env.BUILD_STATE_DIR }}/feeds.sha256
        CURRENT_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR }}/feeds.sha256 | awk '{print $1}')
        PREVIOUS_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR }}/previous_feeds.sha256 2>/dev/null | awk '{print $1}' || echo "")
        echo "--- Debug Log: Feeds Change Check ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "当前 feeds 哈希: $CURRENT_FEEDS_HASH" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "之前 feeds 哈希: $PREVIOUS_FEEDS_HASH" | tee -a ${{ env.DEBUG_LOG_FILE }}
        if [ "$CURRENT_FEEDS_HASH" != "$PREVIOUS_FEEDS_HASH" ]; then
          echo "feeds_changed=true" >> $GITHUB_ENV
          echo "Feeds 已变更，需要重新编译" | tee -a ${{ env.DEBUG_LOG_FILE }}
        else
          echo "feeds_changed=false" >> $GITHUB_ENV
          echo "Feeds 未变更，可以使用缓存包" | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        echo "--- End Debug Log: Feeds Change Check ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        cp ${{ env.BUILD_STATE_DIR }}/feeds.sha256 ${{ env.BUILD_STATE_DIR }}/previous_feeds.sha256

    - name: 恢复已编译软件包 (日志步骤)
      if: steps.cache-packages.outputs.cache-hit == 'true'
      run: |
        echo "--- Debug Log: Cached Packages Status ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        if [ "${{ env.feeds_changed }}" = "true" ]; then
          echo "feeds 已更新，可能不会使用旧的编译包缓存中的所有内容 (OpenWrt make决定)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        else
          echo "feeds 未变更，OpenWrt make 可能会使用缓存的编译包" | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        echo "已缓存的编译包目录 (${{ env.PACKAGES_DIR }}) 文件数量: $(find ${{ env.PACKAGES_DIR }} -type f | wc -l)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- End Debug Log: Cached Packages Status ---" | tee -a ${{ env.DEBUG_LOG_FILE }}

    - name: 开启SSH调试
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true' # 保持不变

    - name: 下载软件包
      run: |
        cd /workdir/openwrt
        MAX_RETRIES=3
        RETRY_WAIT=10
        cat > download_with_retry.sh << 'EOF'
        #!/bin/bash
        # ... (download_with_retry.sh 内容保持不变) ...
        set -e; MAX_RETRIES=$1; RETRY_WAIT=$2; shift 2; retries=0
        until [ $retries -ge $MAX_RETRIES ]; do
          echo "尝试下载，第 $((retries+1)) 次，共 $MAX_RETRIES 次...";
          if make download -j8 "$@" 2>&1 | tee download_attempt_$retries.log; then echo "下载成功！"; exit 0; fi
          retries=$((retries+1));
          if [ $retries -lt $MAX_RETRIES ]; then echo "下载失败，等待 $RETRY_WAIT 秒后重试..."; sleep $RETRY_WAIT; fi
        done
        echo "达到最大重试次数，保存日志以分析失败的包..."; mkdir -p logs; cp download_attempt_$(($retries-1)).log logs/download_failures.log; exit 1
        EOF
        chmod +x download_with_retry.sh
        ./download_with_retry.sh $MAX_RETRIES $RETRY_WAIT || make download -j1 V=s
        mkdir -p ${{ env.CCACHE_DIR }}
        ccache -o cache_dir=${{ env.CCACHE_DIR }}
        ccache -o max_size=8G
        ccache -z # 在编译前清零，以准确统计本次编译的ccache情况
        df -h

    - name: 检测下载失败的包
      run: |
        # ... (detect_failed_downloads.sh 内容保持不变) ...
        cd /workdir/openwrt
        cat > detect_failed_downloads.sh << 'EOF'
        #!/bin/bash
        if [ -f "logs/download_failures.log" ]; then
          echo "分析下载失败日志..." | tee -a ${{ env.DEBUG_LOG_FILE }};
          grep -E "(curl:.*(403|404)|No more mirrors to try)" logs/download_failures.log > failed_urls.txt || true;
          declare -A failed_packages;
          while IFS= read -r line; do if [[ $line =~ \/([^\/]+)[-_][0-9].*\.tar ]]; then pkg_name="${BASH_REMATCH[1]}"; failed_packages["$pkg_name"]=1; echo "检测到下载失败的包: $pkg_name" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi; done < failed_urls.txt;
          if [ ${#failed_packages[@]} -gt 0 ]; then
            echo "以下包将被禁用，因为无法下载：" | tee -a ${{ env.DEBUG_LOG_FILE }};
            for pkg in "${!failed_packages[@]}"; do
              echo " - $pkg" | tee -a ${{ env.DEBUG_LOG_FILE }};
              grep -l "CONFIG_PACKAGE_.*$pkg.*=y" .config | while read config_file; do pkgs=$(grep -o "CONFIG_PACKAGE_[^=]*$pkg[^=]*=y" "$config_file" || true); if [ -n "$pkgs" ]; then while IFS= read -r pkg_config; do pkg_name_conf=$(echo "$pkg_config" | cut -d'=' -f1); echo "禁用配置: $pkg_name_conf" | tee -a ${{ env.DEBUG_LOG_FILE }}; sed -i "/$pkg_name_conf=y/d" .config; echo "$pkg_name_conf=n" >> .config; done <<< "$pkgs"; fi; done;
            done;
            make defconfig; echo "已禁用无法下载的包，并更新配置" | tee -a ${{ env.DEBUG_LOG_FILE }}; exit 0;
          fi;
        fi;
        echo "没有检测到下载失败的包，或无需禁用任何包" | tee -a ${{ env.DEBUG_LOG_FILE }}; exit 0;
        EOF
        chmod +x detect_failed_downloads.sh
        ./detect_failed_downloads.sh

    - name: 智能编译固件
      id: compile
      run: |
        echo "--- Debug Log: Compile Step Start ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        cd /workdir/openwrt
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export PATH="/usr/lib/ccache:$PATH"
        export CCACHE_LOGFILE=${{ env.CCACHE_LOGFILE }} # 确保脚本内也设置
        echo "CCACHE_LOGFILE in compile step set to: $CCACHE_LOGFILE" | tee -a ${{ env.DEBUG_LOG_FILE }}

        cleanup_temp_files() { # ... (保持不变) ...
          echo "清理临时文件以释放空间..."; find /tmp -type f -delete || true; df -h;
        }
        save_cache_info() { # ... (保持不变) ...
          echo "保存缓存状态信息..."; mkdir -p ${{ env.BUILD_STATE_DIR }}; cp .config ${{ env.BUILD_STATE_DIR }}/config.txt;
          echo "$TOOLCHAIN_MD5" > ${{ env.BUILD_STATE_DIR }}/toolchain.md5; echo "$PACKAGE_MD5" > ${{ env.BUILD_STATE_DIR }}/package.md5; echo "保存构建状态完成";
        }
        handle_failed_downloads() { # ... (保持不变, 日志可以考虑加入 tee -a ${{ env.DEBUG_LOG_FILE }}) ...
          echo "检测到编译失败，尝试识别下载问题..." | tee -a ${{ env.DEBUG_LOG_FILE }}; mkdir -p logs; COMPILE_LOG="logs/compile_error.log"; echo "$1" > "$COMPILE_LOG";
          local failed_packages=();
          if grep -q "No more mirrors to try\|Download failed" "$COMPILE_LOG"; then
            local pkg=$(grep -B 5 "No more mirrors to try\|Download failed" "$COMPILE_LOG" | grep -o "package/feeds/[^/]*/[^[:space:]]*" | head -n 1 | awk -F'/' '{print $NF}');
            if [ -n "$pkg" ]; then failed_packages+=("$pkg"); echo "检测到包 $pkg 下载失败" | tee -a ${{ env.DEBUG_LOG_FILE }};
            else pkg=$(grep -o "Building package .* in .*" "$COMPILE_LOG" | tail -n 1 | awk '{print $3}'); if [ -n "$pkg" ]; then failed_packages+=("$pkg"); echo "检测到当前构建的包 $pkg 可能下载失败" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi; fi;
          fi;
          if [ ${#failed_packages[@]} -gt 0 ]; then
            echo "以下包下载失败，将从配置中禁用：" | tee -a ${{ env.DEBUG_LOG_FILE }};
            for pkg_item in "${failed_packages[@]}"; do echo "- $pkg_item" | tee -a ${{ env.DEBUG_LOG_FILE }}; grep -l "CONFIG_PACKAGE_.*$pkg_item.*=y" .config | while read config_file_item; do local pkgs_conf=$(grep -o "CONFIG_PACKAGE_[^=]*$pkg_item[^=]*=y" "$config_file_item" || true); if [ -n "$pkgs_conf" ]; then while IFS= read -r pkg_conf_line; do local pkg_name_conf_item=$(echo "$pkg_conf_line" | cut -d'=' -f1); echo "禁用配置: $pkg_name_conf_item" | tee -a ${{ env.DEBUG_LOG_FILE }}; sed -i "/$pkg_name_conf_item=y/d" .config; echo "$pkg_name_conf_item=n" >> .config; done <<< "$pkgs_conf"; fi; done; done;
            make defconfig; echo "重新开始编译流程，跳过有问题的包..." | tee -a ${{ env.DEBUG_LOG_FILE }}; return 0;
          fi;
          return 1;
        }

        compile_firmware() {
          echo ">>> CCACHE: Zeroing statistics at start of compile_firmware function." | tee -a ${{ env.DEBUG_LOG_FILE }}
          ccache -z
          echo ">>> CCACHE: Statistics at START of compile_firmware function (after zeroing):" | tee -a ${{ env.DEBUG_LOG_FILE }}
          ccache -s | tee -a ${{ env.DEBUG_LOG_FILE }}

          if [ $DO_FULL_BUILD -eq 1 ]; then
            echo "--- Compile Branch: Full Build ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo "下载依赖..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            ./download_with_retry.sh $MAX_RETRIES $RETRY_WAIT || make download -j1 V=s
            ./detect_failed_downloads.sh
            if [ ! -d "${{ env.TOOLCHAIN_DIR }}/toolchain-"* ]; then
              echo "编译工具链..." | tee -a ${{ env.DEBUG_LOG_FILE }}
              make -j$(nproc) tools/compile V=s || make -j1 V=s tools/compile
              make -j$(nproc) toolchain/compile V=s || make -j1 V=s toolchain/compile
            else
              echo "工具链已存在，跳过编译" | tee -a ${{ env.DEBUG_LOG_FILE }}
            fi
            cleanup_temp_files
            echo "编译完整固件..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            if ! make -j$(nproc) V=s 2>&1 | tee logs/compile_output.log; then
              if handle_failed_downloads "$(cat logs/compile_output.log)"; then
                make -j$(nproc) V=s || make -j1 V=s
              else
                make -j1 V=s
              fi
            fi
          elif [ $DO_PACKAGE_BUILD -eq 1 ] || [ "${{ env.feeds_changed }}" = "true" ]; then
            echo "--- Compile Branch: Package Build or Feeds Changed ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo "软件包配置变化或源码更新，编译软件包..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo ">>> WARNING: About to run 'make package/clean' because DO_PACKAGE_BUILD is $DO_PACKAGE_BUILD or feeds_changed is ${{ env.feeds_changed }}. This will clean all previously compiled packages." | tee -a ${{ env.DEBUG_LOG_FILE }}
            make -j$(nproc) package/clean V=s || make -j1 V=s package/clean
            if ! make -j$(nproc) package/compile V=s 2>&1 | tee logs/compile_output.log; then
              if handle_failed_downloads "$(cat logs/compile_output.log)"; then
                make -j$(nproc) package/compile V=s || make -j1 V=s package/compile
              else
                make -j1 V=s package/compile
              fi
            fi
            make -j$(nproc) package/index V=s || make -j1 V=s package/index
            echo "强制执行固件生成步骤..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            make -j$(nproc) target/install V=s || make -j1 V=s target/install
          else
            echo "--- Compile Branch: Minimal Incremental Build ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo "配置和feeds都未变化，执行最小增量编译..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            if ! make -j$(nproc) V=s 2>&1 | tee logs/compile_output.log; then
              if handle_failed_downloads "$(cat logs/compile_output.log)"; then
                make -j$(nproc) V=s || make -j1 V=s
              else
                make -j1 V=s
              fi
            fi
          fi
          echo "确保执行固件生成步骤，无论前面编译是否成功..." | tee -a ${{ env.DEBUG_LOG_FILE }}
          make -j$(nproc) target/install V=s || make -j1 V=s target/install
          save_cache_info
          echo "检查固件生成结果:" | tee -a ${{ env.DEBUG_LOG_FILE }}
          find bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "没有找到固件文件！" | tee -a ${{ env.DEBUG_LOG_FILE }}
          if [ -z "$(find bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*")" ]; then
            echo "未找到固件文件，尝试单独构建镜像..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            if [ -d "bin/packages" ]; then
              echo "已有软件包，尝试单独构建固件镜像..." | tee -a ${{ env.DEBUG_LOG_FILE }}
              make -j1 target/install V=s
              find bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "构建固件仍然失败！" | tee -a ${{ env.DEBUG_LOG_FILE }}
            fi
          fi

          echo ">>> CCACHE: Statistics at END of compile_firmware function:" | tee -a ${{ env.DEBUG_LOG_FILE }}
          ccache -s | tee -a ${{ env.DEBUG_LOG_FILE }}

          if [ $? -eq 0 ]; then
            echo "compile_firmware函数判断为成功" | tee -a ${{ env.DEBUG_LOG_FILE }}
          else
            echo "compile_firmware函数判断为失败" | tee -a ${{ env.DEBUG_LOG_FILE }}
            # exit 1 # 保持原来的逻辑，如果这里退出，后续的status=success可能不会执行
          fi
        }
        
        MAX_RETRIES=3 # 下载重试参数
        RETRY_WAIT=10

        TOOLCHAIN_CONFIG=$(grep "^CONFIG_TARGET" .config | sort)
        TOOLCHAIN_MD5=$(echo "$TOOLCHAIN_CONFIG" | md5sum | awk '{print $1}')
        PREVIOUS_TOOLCHAIN_MD5=$(cat ${{ env.BUILD_STATE_DIR }}/toolchain.md5 2>/dev/null || echo "")
        PACKAGE_CONFIG=$(grep "^CONFIG_PACKAGE" .config | sort)
        PACKAGE_MD5=$(echo "$PACKAGE_CONFIG" | md5sum | awk '{print $1}')
        PREVIOUS_PACKAGE_MD5=$(cat ${{ env.BUILD_STATE_DIR }}/package.md5 2>/dev/null || echo "")
        DO_FULL_BUILD=0
        DO_PACKAGE_BUILD=0

        echo "--- Debug Log: Build Decision Variables ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Input clean_build: ${{ github.event.inputs.clean_build }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Current TOOLCHAIN_MD5: $TOOLCHAIN_MD5 (from .config)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Previous TOOLCHAIN_MD5: $PREVIOUS_TOOLCHAIN_MD5 (from cache)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Current PACKAGE_MD5: $PACKAGE_MD5 (from .config)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Previous PACKAGE_MD5: $PREVIOUS_PACKAGE_MD5 (from cache)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "env.feeds_changed: ${{ env.feeds_changed }}" | tee -a ${{ env.DEBUG_LOG_FILE }}

        if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          echo "clean_build is true, setting DO_FULL_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE }}
          DO_FULL_BUILD=1
        elif [ -z "$PREVIOUS_TOOLCHAIN_MD5" ] || [ "$TOOLCHAIN_MD5" != "$PREVIOUS_TOOLCHAIN_MD5" ]; then
          echo "Toolchain config changed or first build, setting DO_FULL_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE }}
          DO_FULL_BUILD=1
        elif [ -z "$PREVIOUS_PACKAGE_MD5" ] || [ "$PACKAGE_MD5" != "$PREVIOUS_PACKAGE_MD5" ]; then
          echo "Package config changed, setting DO_PACKAGE_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE }}
          DO_PACKAGE_BUILD=1
        else
          echo "Config appears unchanged, checking feeds_changed for package build decision..." | tee -a ${{ env.DEBUG_LOG_FILE }}
          if [ "${{ env.feeds_changed }}" = "true" ]; then
             echo "feeds_changed is true, setting DO_PACKAGE_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE }}
             DO_PACKAGE_BUILD=1 # 如果仅 feeds 变化，也触发包编译
          fi
        fi
        echo "Final DO_FULL_BUILD: $DO_FULL_BUILD" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Final DO_PACKAGE_BUILD: $DO_PACKAGE_BUILD" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- End Debug Log: Build Decision Variables ---" | tee -a ${{ env.DEBUG_LOG_FILE }}

        compile_firmware # 调用编译函数

        # 确保 compile_firmware 的退出状态被正确处理
        # 如果 compile_firmware 内部 exit 1, 这里可能不会执行
        # 但我们希望即使编译失败也尽可能记录日志和上传
        local compile_status=$? 
        if [ $compile_status -ne 0 ]; then
          echo "compile_firmware exited with status $compile_status" | tee -a ${{ env.DEBUG_LOG_FILE }}
          echo "status=failure" >> $GITHUB_OUTPUT
          # exit $compile_status # 保持原来的逻辑，如果这里退出，后续的status=success可能不会执行
        else
          echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_')" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        fi
        echo "Final ccache stats for the entire compile step:" | tee -a ${{ env.DEBUG_LOG_FILE }}
        ccache -s | tee -a ${{ env.DEBUG_LOG_FILE }}
        df -h | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- Debug Log: Compile Step End ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        # 如果 compile_firmware 内部 exit 1, 脚本可能已经终止
        # 为了确保后续步骤（如上传debug log）执行，避免在这里直接 exit 1 除非必要

    # ... (后续步骤如 检查固件生成结果, 检查工具链大小, 保存缓存等保持不变) ...
    # 但要确保这些步骤在编译失败时也能合理执行或跳过，特别是缓存保存步骤

    - name: 检查固件生成结果 # (保持不变)
      run: |
        echo "检查固件生成结果..."
        find /workdir/openwrt/bin/targets -type f | sort
        echo "固件文件大小:"
        find /workdir/openwrt/bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "未找到固件文件"
        echo "检查squashfs文件:"
        find /workdir/openwrt/build_dir -name "*.squashfs" | xargs ls -lh || echo "未找到squashfs文件"
        if [ -z "$(find /workdir/openwrt/bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*")" ]; then
          echo "警告：未找到固件文件，尝试强制重新生成..."
          cd /workdir/openwrt
          if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config; fi
          if grep -q "CONFIG_TARGET_x86=y" .config; then
            if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then echo "CONFIG_GRUB_IMAGES=y" >> .config; fi
            if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config; fi
          fi
          make defconfig; make -j1 target/install V=s;
          echo "重新检查固件文件:";
          find /workdir/openwrt/bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "仍然未找到固件文件";
        fi

    - name: 备份缓存前检查工具链大小 # (保持不变)
      if: "!cancelled()"
      run: |
        echo "编译完成，检查工具链大小..." | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "工具链目录大小: $(du -sh ${{ env.TOOLCHAIN_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        # ... 其他 du -sh 命令也加入 tee -a ...
        mkdir -p ${{ env.BUILD_STATE_DIR }}
        echo "缓存创建时间: $(date)" > ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt
        echo "运行ID: ${{ github.run_id }}" >> ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt
        echo "构建分支: ${{ env.REPO_BRANCH }}" >> ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt

    - name: 保存工具链缓存 # (保持不变)
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: |
          ${{ env.TOOLCHAIN_DIR }}
          ${{ env.TOOLCHAIN_BUILD_DIR }}
        key: toolchain-${{ env.REPO_BRANCH }}-fixed-cache
        
    - name: 保存编译包缓存 # (保持不变)
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: ${{ env.PACKAGES_DIR }}
        key: packages-${{ env.REPO_BRANCH }}-fixed-cache
        
    - name: 保存构建状态缓存 # (保持不变)
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: ${{ env.BUILD_STATE_DIR }}
        key: state-${{ env.REPO_BRANCH }}-fixed-cache
        
    - name: 保存CCACHE缓存 # (保持不变)
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_BRANCH }}-fixed-cache

    - name: 验证缓存已保存 # (保持不变, 日志可以加入 tee -a)
      if: "!cancelled()"
      run: |
        echo "已完成所有缓存保存，现在可以安全地进行后续文件整理和清理操作" | tee -a ${{ env.DEBUG_LOG_FILE }}
        if [ -f "${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt" ]; then
          echo "缓存时间戳内容:" | tee -a ${{ env.DEBUG_LOG_FILE }}
          cat ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        df -h | tee -a ${{ env.DEBUG_LOG_FILE }}

    - name: Upload Debug Logs # 新增: 上传调试日志步骤
      if: always() # 确保即使前面的步骤失败，也会尝试上传日志
      uses: actions/upload-artifact@main
      with:
        name: build-debug-logs-${{ github.run_id }}
        path: |
          ${{ env.DEBUG_LOG_FILE }}
          ${{ env.CCACHE_LOGFILE }}
        retention-days: 7 # 保留7天

    - name: 整理文件 # (保持不变)
      id: organize
      # 确保 compile step 的 output status 被正确引用
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # ... (整理文件脚本保持不变) ...
        echo "搜索所有可能的固件文件..."
        find /workdir/openwrt/bin -type f \( -name "*.bin" -o -name "*.img" -o -name "*sysupgrade*" -o -name "*combined*" \) -exec ls -lh {} + || echo "未找到可能的固件文件"
        if [ ! -d "/workdir/openwrt/bin/targets" ]; then
          echo "错误：编译目标目录不存在，可能编译失败"; mkdir -p /workdir/openwrt/bin/targets/empty/firmware;
          echo "FIRMWARE=/workdir/openwrt/bin/targets/empty/firmware" >> $GITHUB_ENV; echo "status=success" >> $GITHUB_OUTPUT; exit 0;
        fi
        TARGET_DIRS=$(find /workdir/openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d);
        if [ -z "$TARGET_DIRS" ]; then echo "警告：未找到具体目标目录，创建通用目录"; mkdir -p /workdir/openwrt/bin/targets/generic/generic; TARGET_DIRS="/workdir/openwrt/bin/targets/generic/generic"; fi
        for TARGET_DIR in $TARGET_DIRS; do
          echo "处理目标目录: $TARGET_DIR"; cd "$TARGET_DIR"; rm -rf firmware; mkdir -p firmware; FILES_FOUND=0;
          for pattern in "*combined*" "*sysupgrade*" "*.img" "*.bin"; do
            echo "尝试复制匹配 $pattern 的文件..."; if find . -maxdepth 1 -name "$pattern" -print -quit | grep -q .; then find . -maxdepth 1 -name "$pattern" -exec cp -f {} ./firmware/ \;; FILES_FOUND=1; fi;
          done;
          if [ $FILES_FOUND -eq 0 ]; then echo "未找到标准固件文件，尝试复制所有可能的文件..."; find . -maxdepth 1 -type f -not -name "*.manifest" -not -name "*.txt" -not -name "*.json" -not -name "*.buildinfo" -exec cp -f {} ./firmware/ \;; fi;
          if [ -f "/workdir/openwrt/.config" ]; then cp -f /workdir/openwrt/.config ./firmware/config.txt; fi;
          if [ -n "$(ls -A firmware)" ]; then echo "成功复制固件文件到 $TARGET_DIR/firmware"; ls -lh firmware/; echo "FIRMWARE=$TARGET_DIR/firmware" >> $GITHUB_ENV; echo "status=success" >> $GITHUB_OUTPUT; break;
          else echo "警告: $TARGET_DIR 中未找到可用固件文件"; fi;
        done;
        if [ -z "$FIRMWARE" ] && [ -z "$FIRMWARE_ZIP" ]; then # 检查是否已经有FIRMWARE环境变量，避免覆盖
          echo "警告：未能在任何目标目录中找到固件文件，使用紧急备用方法"; BACKUP_DIR="/workdir/openwrt/bin/targets/generic/backup_firmware"; mkdir -p "$BACKUP_DIR/firmware";
          find /workdir/openwrt/bin -type f -not -path "*/packages/*" -exec cp -f {} "$BACKUP_DIR/firmware/" \;;
          if [ -f "/workdir/openwrt/.config" ]; then cp -f /workdir/openwrt/.config "$BACKUP_DIR/firmware/config.txt"; else echo "# 紧急备用配置" > "$BACKUP_DIR/firmware/config.txt"; fi;
          echo "FIRMWARE=$BACKUP_DIR/firmware" >> $GITHUB_ENV; echo "status=success" >> $GITHUB_OUTPUT; # 确保在紧急情况下也输出 status
        fi;
        # 创建固件压缩包逻辑修正
        if [ -n "$FIRMWARE" ] && [ -d "$FIRMWARE" ]; then # 确保 FIRMWARE 是一个目录
          cd $(dirname "$FIRMWARE"); zip -r firmware.zip $(basename "$FIRMWARE");
          echo "FIRMWARE_ZIP=$(dirname "$FIRMWARE")/firmware.zip" >> $GITHUB_ENV; # FIRMWARE_ZIP 指向 zip 文件
        elif [ -n "$FIRMWARE" ] && [ ! -d "$FIRMWARE" ]; then # 如果 FIRMWARE 不是目录，可能是单个文件
           echo "警告: FIRMWARE 环境变量 ($FIRMWARE) 不是一个目录，无法创建 zip 包。"
        fi

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_ZIP || env.FIRMWARE }} # 优先上传zip，如果不存在则上传目录

    - name: 生成发布标签 # (保持不变)
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "## OpenWrt固件构建完成 📦" > release.txt
        echo "📅 构建时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        echo "📂 固件下载" >> release.txt
        echo "⚠️ 请在刷机前先做好备份！" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT # 确保 status 输出

    - name: 上传固件到Releases # (保持不变)
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release.txt
        # files: ${{ env.FIRMWARE }}/* # 如果FIRMWARE是目录
        files: ${{ env.FIRMWARE_ZIP || env.FIRMWARE }}/* # 优先上传zip中的所有文件，或FIRMWARE目录下的所有文件

    - name: 删除旧的Releases # (保持不变)
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

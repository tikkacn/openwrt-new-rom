name: 全新编译第11版(Gemini)
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '不使用任何已恢复的缓存进行全新编译 (但仍会尝试保存新缓存)'
        required: false
        default: 'false' # 关键：首次填充缓存时应为 false
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: /workdir/ccache
  TOOLCHAIN_DIR: /workdir/openwrt/staging_dir # Staging Dir (工具链安装目录)
  HOST_BUILD_DIR_PATH: /workdir/openwrt/build_dir/host # Host Build Dir
  PACKAGES_DIR: /workdir/openwrt/bin # PACKAGES_DIR现在指向bin目录，packages缓存将包含整个bin/targets和bin/packages
  BUILD_STATE_DIR: /workdir/build_state
  CCACHE_LOGFILE: /tmp/ccache_detailed.log
  DEBUG_LOG_FILE: /tmp/build_debug_summary.log

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480
        swap-size-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 额外清理磁盘空间并检查
      run: |
        echo "清理额外磁盘空间..."
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
        docker image prune -a -f || true
        docker system prune -af || true
        sudo apt-get clean
        sudo apt-get autoremove -y
        df -h

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        mkdir -p ${{ env.BUILD_STATE_DIR }} ${{ env.CCACHE_DIR }} ${{ env.HOST_BUILD_DIR_PATH }} /workdir/openwrt
        chmod -R 777 /workdir
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part1.sh
        echo '# Feeds 已通过 FEEDS_CONF_URL 配置' >> $GITHUB_WORKSPACE/diy-part1.sh
        echo "echo '默认 DIY Part1 执行成功，无用户自定义内容'" >> $GITHUB_WORKSPACE/diy-part1.sh
        chmod +x $GITHUB_WORKSPACE/diy-part1.sh
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part2.sh
        echo 'sed -i "s/OpenWrt /OpenWrt_AutoBuild_$(date +"%Y%m%d%H%M") /" package/lean/default-settings/files/zzz-default-settings' >> $GITHUB_WORKSPACE/diy-part2.sh
        echo "echo '默认 DIY Part2 执行成功 (Banner已修改)，无用户自定义内容'" >> $GITHUB_WORKSPACE/diy-part2.sh
        chmod +x $GITHUB_WORKSPACE/diy-part2.sh
        if [ ! -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
          echo "警告：配置文件 $CONFIG_FILE 不存在，创建默认配置文件"
          echo "# 创建默认的最小化配置文件" > $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_PACKAGE_luci=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
        fi
        df -h

    - name: 克隆源代码并配置 Feeds
      working-directory: /workdir
      run: |
        echo "正在清理可能已存在的 /workdir/openwrt 目录..."
        rm -rf /workdir/openwrt
        echo "克隆新的源代码到 /workdir/openwrt..."
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        find . -type f -name "*.sh" -exec chmod +x {} \;
        curl -L -o feeds.conf.default "$FEEDS_CONF_URL" || echo "警告：无法下载 feeds.conf.default，使用仓库默认配置"
        cat feeds.conf.default
        rm -rf .git
        mkdir -p ${{ env.PACKAGES_DIR }} ${{ env.TOOLCHAIN_DIR }} ${{ env.HOST_BUILD_DIR_PATH }} ${{ env.BUILD_STATE_DIR }}
        mkdir -p logs

    # --- CACHE RESTORE STEPS (Revised Strategy) ---
    - name: 恢复 Staging Dir 缓存 (精简版)
      uses: actions/cache@v3
      id: cache-staging-dir
      if: inputs.clean_build != 'true'
      with:
        path: |
          ${{ env.TOOLCHAIN_DIR }}
          !${{ env.TOOLCHAIN_DIR }}/usr/share/doc
          !${{ env.TOOLCHAIN_DIR }}/usr/share/man
          !${{ env.TOOLCHAIN_DIR }}/host/share/doc
          !${{ env.TOOLCHAIN_DIR }}/host/share/man
        key: staging-dir-slim-${{ env.REPO_BRANCH }}-fixed-cache-v1 

    - name: 恢复 Host Build Dir 缓存
      uses: actions/cache@v3
      id: cache-host-build-dir
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.HOST_BUILD_DIR_PATH }} 
        key: host-build-dir-${{ env.REPO_BRANCH }}-fixed-cache-v1 

    - name: 恢复编译产物缓存 (bin/目录)
      uses: actions/cache@v3
      id: cache-packages
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.PACKAGES_DIR }} 
        key: built-packages-bin-${{ env.REPO_BRANCH }}-fixed-cache-v1 

    - name: 恢复CCACHE缓存
      uses: actions/cache@v3
      id: cache-ccache
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_BRANCH }}-fixed-cache-v1 

    - name: 恢复构建状态缓存
      uses: actions/cache@v3
      id: cache-state
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.BUILD_STATE_DIR }}
        key: state-${{ env.REPO_BRANCH }}-fixed-cache-v1 
    # --- END CACHE RESTORE STEPS ---

    - name: 检查缓存恢复状态
      run: |
        echo "--- Debug Log: Cache Status ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "CONFIG_FILE: ${{ env.CONFIG_FILE }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Staging Dir (Slim) 缓存恢复状态: ${{ steps.cache-staging-dir.outputs.cache-hit == 'true' && '成功' || '未找到缓存或不使用' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        # TOOLCHAIN_BUILD_DIR 不再有独立的缓存恢复步骤
        echo "Toolchain Build Dir 缓存: (不再单独缓存此目录)" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Host Build Dir 缓存恢复状态: ${{ steps.cache-host-build-dir.outputs.cache-hit == 'true' && '成功' || '未找到缓存或不使用' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "编译产物缓存恢复状态: ${{ steps.cache-packages.outputs.cache-hit == 'true' && '成功' || '未找到缓存或不使用' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "CCACHE缓存恢复状态: ${{ steps.cache-ccache.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "构建状态缓存恢复状态: ${{ steps.cache-state.outputs.cache-hit == 'true' && '成功' || '未找到缓存或不使用' }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Staging目录大小 (TOOLCHAIN_DIR): $(du -sh ${{ env.TOOLCHAIN_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Toolchain构建目录大小 (Not cached): $(du -sh /workdir/openwrt/build_dir/toolchain-$(uname -m)_gcc-*_musl 2>/dev/null || echo '目录不存在或未被构建')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Host构建目录大小 (HOST_BUILD_DIR_PATH): $(du -sh ${{ env.HOST_BUILD_DIR_PATH }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "编译产物输出目录大小 (PACKAGES_DIR is /workdir/openwrt/bin): $(du -sh ${{ env.PACKAGES_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "CCACHE目录大小 (CCACHE_DIR): $(du -sh ${{ env.CCACHE_DIR }} 2>/dev/null || echo '目录不存在或为空')" | tee -a ${{ env.DEBUG_LOG_FILE }}
        find ${{ env.TOOLCHAIN_DIR }}/host/bin -name "gcc*" 2>/dev/null | head -5 || echo "未找到主机gcc" | tee -a ${{ env.DEBUG_LOG_FILE }}
        find ${{ env.TOOLCHAIN_DIR }}/toolchain-* -name "*gcc*" 2>/dev/null | head -5 || echo "未找到交叉编译器gcc" | tee -a ${{ env.DEBUG_LOG_FILE }}
        ls -la ${{ env.BUILD_STATE_DIR }}/ || echo "构建状态目录为空" | tee -a ${{ env.DEBUG_LOG_FILE }}
        if [ -f "${{ env.BUILD_STATE_DIR }}/config.md5" ]; then echo "之前Config MD5: $(cat ${{ env.BUILD_STATE_DIR }}/config.md5)" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
        if [ -f "${{ env.BUILD_STATE_DIR }}/toolchain.md5" ]; then echo "之前Toolchain MD5: $(cat ${{ env.BUILD_STATE_DIR }}/toolchain.md5)" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
        if [ -f "${{ env.BUILD_STATE_DIR }}/package.md5" ]; then echo "之前Package MD5: $(cat ${{ env.BUILD_STATE_DIR }}/package.md5)" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
        echo "--- End Debug Log: Cache Status ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        df -h

    - name: 配置编译环境
      run: |
        cd /workdir/openwrt
        if [ -f ".config" ]; then cp .config .config.original_from_build_dir_if_any; fi
        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo "更新并安装 Feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        [ -e $GITHUB_WORKSPACE/files ] && cp -r $GITHUB_WORKSPACE/files ./files
        cp $GITHUB_WORKSPACE/$CONFIG_FILE ./.config
        cp .config .config.input
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "CONFIG_AUTOREMOVE=n" >> .config
        echo "CONFIG_AUTOREBUILD=n" >> .config
        echo "确保包含必要的固件生成配置..."
        if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config; fi
        if grep -q "CONFIG_TARGET_x86=y" .config; then
          if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then echo "CONFIG_GRUB_IMAGES=y" >> .config; fi
          if ! grep -q "CONFIG_TARGET_IMAGES_PAD=y" .config; then echo "CONFIG_TARGET_IMAGES_PAD=y" >> .config; fi
        fi
        make defconfig
        grep "^CONFIG_PACKAGE_.*=y" .config.input | sort > packages_input.txt || true
        grep "^CONFIG_PACKAGE_.*=y" .config | sort > packages_defconfig.txt || true
        comm -23 packages_input.txt packages_defconfig.txt > missing_packages.txt
        if [ -s missing_packages.txt ]; then
          echo "警告：以下包在 defconfig 后缺失，将尝试恢复：" | tee -a ${{ env.DEBUG_LOG_FILE }}
          cat missing_packages.txt | tee -a ${{ env.DEBUG_LOG_FILE }}
          cat missing_packages.txt >> .config
          echo "重新执行 make defconfig 以确保依赖一致性 (因有包被重新加入)" | tee -a ${{ env.DEBUG_LOG_FILE }}
          make defconfig
        else
          echo "所有在输入 .config 中指定的 CONFIG_PACKAGE_*=y 配置项在 defconfig 后均保留或被正确处理。" | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        echo "最终配置中的镜像生成选项:" | tee -a ${{ env.DEBUG_LOG_FILE }}
        grep -E "CONFIG_TARGET_ROOTFS|CONFIG_TARGET_IMAGES|CONFIG_GRUB|CONFIG_ISO|CONFIG_EFI" .config | tee -a ${{ env.DEBUG_LOG_FILE }} || echo "未找到镜像相关配置"
        diff -u .config.input .config > config_diff.txt || echo "配置无差异" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- Debug Log: Config diff after defconfig and recovery ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        cat config_diff.txt | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- End Debug Log: Config diff ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        df -h

    - name: 检查源码变化 (Feeds Makefile Hashes)
      id: check-feeds
      run: |
        cd /workdir/openwrt
        mkdir -p ${{ env.BUILD_STATE_DIR }}
        find feeds -type f -name "Makefile" -exec sha256sum {} \; | sort | sha256sum > ${{ env.BUILD_STATE_DIR }}/feeds.sha256
        CURRENT_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR }}/feeds.sha256 | awk '{print $1}')
        PREVIOUS_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR }}/previous_feeds.sha256 2>/dev/null | awk '{print $1}' || echo "")
        echo "--- Debug Log: Feeds Change Check ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "当前 feeds 哈希: $CURRENT_FEEDS_HASH" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "之前 feeds 哈希: $PREVIOUS_FEEDS_HASH" | tee -a ${{ env.DEBUG_LOG_FILE }}
        if [ "$CURRENT_FEEDS_HASH" != "$PREVIOUS_FEEDS_HASH" ]; then
          echo "feeds_changed=true" >> $GITHUB_ENV
          echo "Feeds 的 Makefile 结构已变更，可能需要重新编译相关软件包。" | tee -a ${{ env.DEBUG_LOG_FILE }}
        else
          echo "feeds_changed=false" >> $GITHUB_ENV
          echo "Feeds 的 Makefile 结构未变更。" | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        echo "--- End Debug Log: Feeds Change Check ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        cp ${{ env.BUILD_STATE_DIR }}/feeds.sha256 ${{ env.BUILD_STATE_DIR }}/previous_feeds.sha256

    - name: 开启SSH调试 (如果需要)
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true'

    - name: 下载软件包 (make download)
      run: |
        cd /workdir/openwrt
        MAX_RETRIES=3
        RETRY_WAIT=10
        cat > download_with_retry.sh << 'EOF'
        #!/bin/bash
        set -e; MAX_RETRIES=$1; RETRY_WAIT=$2; shift 2; retries=0
        until [ $retries -ge $MAX_RETRIES ]; do
          echo "尝试下载，第 $((retries+1)) 次，共 $MAX_RETRIES 次...";
          mkdir -p logs 
          if make download -j$(nproc) "$@" 2>&1 | tee "logs/download_attempt_$(date +%s)_$retries.log"; then echo "下载成功！"; exit 0; fi
          retries=$((retries+1));
          if [ $retries -lt $MAX_RETRIES ]; then echo "下载失败，等待 $RETRY_WAIT 秒后重试..."; sleep $RETRY_WAIT; fi
        done
        echo "达到最大重试次数，保存日志以分析失败的包...";
        LAST_LOG=$(ls -t logs/download_attempt_*.log 2>/dev/null | head -n 1)
        if [ -n "$LAST_LOG" ]; then cp "$LAST_LOG" logs/download_failures.log; else echo "无法找到下载尝试日志。" > logs/download_failures.log; fi
        exit 1
        EOF
        chmod +x download_with_retry.sh
        if ! ./download_with_retry.sh $MAX_RETRIES $RETRY_WAIT; then
            echo "下载重试失败，尝试单线程详细日志下载..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            make download -j1 V=s 2>&1 | tee logs/download_final_attempt.log || true 
        fi
        mkdir -p ${{ env.CCACHE_DIR }}
        ccache -o cache_dir=${{ env.CCACHE_DIR }}
        ccache -o max_size=8G 
        ccache -z 
        echo "CCACHE 配置完成并已清零统计数据。" | tee -a ${{ env.DEBUG_LOG_FILE }}
        df -h
        
    - name: 检测并处理下载失败的包 (如果需要)
      run: |
        cd /workdir/openwrt
        if [ -f "logs/download_failures.log" ] || [ -f "logs/download_final_attempt.log" ]; then
            COMBINED_DOWNLOAD_LOG="logs/combined_download_errors.log"
            cat logs/download_failures.log logs/download_final_attempt.log 2>/dev/null > "$COMBINED_DOWNLOAD_LOG"
            echo "分析下载失败日志 ($COMBINED_DOWNLOAD_LOG)..." | tee -a ${{ env.DEBUG_LOG_FILE }};
            grep -E "(curl:.*(Couldn't resolve host|Connection timed out|403 Forbidden|404 Not Found)|No more mirrors to try|Download failed)" "$COMBINED_DOWNLOAD_LOG" > failed_urls.txt || true;
            declare -A failed_packages_map;
            while IFS= read -r line; do
                if [[ $line =~ \/([^\/_]+([_-][0-9a-zA-Z\.]+)?)\.(tar\.|zip|gz|xz|bz2) ]]; then
                    pkg_name_from_url="${BASH_REMATCH[1]}"
                    pkg_name_from_url_base=$(echo "$pkg_name_from_url" | sed -E 's/[-_][0-9]+.*//; s/-git//')
                    if [ -n "$pkg_name_from_url_base" ]; then failed_packages_map["$pkg_name_from_url_base"]=1; echo "检测到可能下载失败的包 (基于URL): $pkg_name_from_url_base" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
                fi
            done < failed_urls.txt;
            if [ ${#failed_packages_map[@]} -gt 0 ]; then
                echo "以下包或其源码可能下载失败，将尝试从 .config 中禁用：" | tee -a ${{ env.DEBUG_LOG_FILE }};
                PACKAGES_MODIFIED=0
                for pkg_base in "${!failed_packages_map[@]}"; do
                    echo " - 疑似问题包: $pkg_base" | tee -a ${{ env.DEBUG_LOG_FILE }};
                    if grep -q "CONFIG_PACKAGE_.*${pkg_base}.*=y" .config; then
                        echo "  在 .config 中找到相关包，尝试禁用..." | tee -a ${{ env.DEBUG_LOG_FILE }}
                        sed -i -E "/CONFIG_PACKAGE_.*${pkg_base}.*=y/s/=y$/=n # Auto-disabled due to download failure/g" .config
                        PACKAGES_MODIFIED=1
                    fi
                done;
                if [ $PACKAGES_MODIFIED -eq 1 ]; then echo "由于检测到下载失败，已修改 .config 文件，重新运行 make defconfig" | tee -a ${{ env.DEBUG_LOG_FILE }}; make defconfig;
                else echo "未在 .config 中找到明确匹配的已启用包进行禁用。" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
            else echo "未从下载日志中明确识别出特定下载失败的包名。" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
        else echo "没有找到下载失败的日志文件。" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
        echo "下载失败包检测处理完成。" | tee -a ${{ env.DEBUG_LOG_FILE }}

    - name: 智能编译固件
      id: compile
      run: |
        echo "--- Debug Log: Compile Step Start ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        cd /workdir/openwrt
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export PATH="/usr/lib/ccache:$PATH" 
        export CCACHE_LOGFILE=${{ env.CCACHE_LOGFILE }}
        echo "CCACHE_LOGFILE in compile step set to: $CCACHE_LOGFILE" | tee -a ${{ env.DEBUG_LOG_FILE }}

        cleanup_temp_files() { 
          echo "清理临时文件以释放空间..."; find /tmp -maxdepth 1 -type f -delete || true; df -h | tee -a ${{ env.DEBUG_LOG_FILE }};
        }

        save_md5_info() { 
          echo "保存配置MD5信息..." | tee -a ${{ env.DEBUG_LOG_FILE }}
          mkdir -p ${{ env.BUILD_STATE_DIR }};
          cp .config ${{ env.BUILD_STATE_DIR }}/config.txt; 
          echo "$TOOLCHAIN_MD5" > ${{ env.BUILD_STATE_DIR }}/toolchain.md5;
          echo "$PACKAGE_MD5" > ${{ env.BUILD_STATE_DIR }}/package.md5;
          echo "构建状态MD5信息保存完成。" | tee -a ${{ env.DEBUG_LOG_FILE }}
        }
        
        handle_compile_error() { 
          local compile_log_content="$1"
          echo "检测到编译失败，尝试识别下载问题..." | tee -a ${{ env.DEBUG_LOG_FILE }}
          mkdir -p logs;
          if echo "$compile_log_content" | grep -q -E "(No more mirrors to try|Download failed|Couldn't resolve host|404 Not Found|403 Forbidden)"; then
            local failing_pkg_context
            failing_pkg_context=$(echo "$compile_log_content" | grep -B 10 -E "(No more mirrors to try|Download failed)" | grep -o -E "package/[^[:space:]/]+/[^[:space:]/]+" | tail -n 1 | awk -F'/' '{print $NF}')
            if [ -n "$failing_pkg_context" ]; then echo "编译错误中检测到与包 '$failing_pkg_context' 相关的下载问题。" | tee -a ${{ env.DEBUG_LOG_FILE }};
            else echo "编译错误中检测到下载问题，但未能自动识别具体包。" | tee -a ${{ env.DEBUG_LOG_FILE }}; fi
            return 1 
          fi
          return 1 
        }

        compile_firmware() {
          echo ">>> CCACHE: Zeroing statistics at start of compile_firmware function." | tee -a ${{ env.DEBUG_LOG_FILE }}
          ccache -z
          echo ">>> CCACHE: Statistics at START of compile_firmware function (after zeroing):" | tee -a ${{ env.DEBUG_LOG_FILE }}
          ccache -s | tee -a ${{ env.DEBUG_LOG_FILE }}

          MAIN_MAKE_CMD="make -j$(nproc) V=s"
          FALLBACK_MAKE_CMD="make -j1 V=s" 
          
          if [ $DO_FULL_BUILD -eq 1 ]; then
            echo "--- Compile Branch: Full Build ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo "编译主机工具和工具链 (如果缓存未命中或不完整)..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            make tools/compile $FALLBACK_MAKE_CMD || make tools/compile $FALLBACK_MAKE_CMD 
            make toolchain/compile $FALLBACK_MAKE_CMD || make toolchain/compile $FALLBACK_MAKE_CMD 
            cleanup_temp_files
            echo "编译完整固件 (World)..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            if ! $MAIN_MAKE_CMD 2>&1 | tee logs/compile_output.log; then
              if ! handle_compile_error "$(cat logs/compile_output.log)"; then 
                 $FALLBACK_MAKE_CMD 
              fi
            fi
          elif [ $DO_PACKAGE_BUILD -eq 1 ] || [ "${{ env.feeds_changed }}" = "true" ]; then
            echo "--- Compile Branch: Package Build or Feeds Changed ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo "软件包配置变化或Feeds源码更新，执行软件包编译..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo ">>> WARNING: Running 'make package/clean' due to package/feeds changes." | tee -a ${{ env.DEBUG_LOG_FILE }}
            make package/clean V=s || true 
            if ! make package/compile $MAIN_MAKE_CMD 2>&1 | tee logs/compile_output.log; then
               if ! handle_compile_error "$(cat logs/compile_output.log)"; then
                 make package/compile $FALLBACK_MAKE_CMD
               fi
            fi
            make package/index V=s || make package/index $FALLBACK_MAKE_CMD
          else
            echo "--- Compile Branch: Minimal Incremental Build ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo "配置和Feeds均未显著变化，执行最小化增量编译 (World)..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            if ! $MAIN_MAKE_CMD 2>&1 | tee logs/compile_output.log; then
              if ! handle_compile_error "$(cat logs/compile_output.log)"; then
                 $FALLBACK_MAKE_CMD
              fi
            fi
          fi
          
          echo "确保执行最终的固件生成步骤 (target/install)..." | tee -a ${{ env.DEBUG_LOG_FILE }}
          make target/install $FALLBACK_MAKE_CMD 
          
          save_md5_info 

          echo "检查固件生成结果:" | tee -a ${{ env.DEBUG_LOG_FILE }}
          find bin/targets -type f \( -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" -o -name "*.img.gz" \) -print0 | xargs -0 ls -lh || echo "没有找到主要固件文件！" | tee -a ${{ env.DEBUG_LOG_FILE }}
          if [ -z "$(find bin/targets -type f \( -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" -o -name "*.img.gz" \) -print -quit)" ]; then
            echo "警告：主要固件文件未找到。检查 logs/compile_output.log 获取详情。" | tee -a ${{ env.DEBUG_LOG_FILE }}
          fi

          echo ">>> CCACHE: Statistics at END of compile_firmware function:" | tee -a ${{ env.DEBUG_LOG_FILE }}
          ccache -s | tee -a ${{ env.DEBUG_LOG_FILE }}

          if [ -n "$(find bin/targets -type f \( -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" -o -name "*.img.gz" \) -print -quit)" ]; then
            echo "compile_firmware函数判断为成功 (固件已生成)。" | tee -a ${{ env.DEBUG_LOG_FILE }}
            return 0 
          else
            echo "compile_firmware函数判断为失败 (固件未生成)。" | tee -a ${{ env.DEBUG_LOG_FILE }}
            return 1 
          fi
        }
        
        TOOLCHAIN_CONFIG_SUBSET=$(grep -E "^CONFIG_TARGET|^CONFIG_ARCH|^CONFIG_TOOLCHAIN" .config | grep -v "NOT_SET" | sort)
        TOOLCHAIN_MD5=$(echo "$TOOLCHAIN_CONFIG_SUBSET" | md5sum | awk '{print $1}')
        PREVIOUS_TOOLCHAIN_MD5=$(cat ${{ env.BUILD_STATE_DIR }}/toolchain.md5 2>/dev/null || echo "not_found")
        PACKAGE_CONFIG_SUBSET=$(grep "^CONFIG_PACKAGE_" .config | grep "=y" | sort) 
        PACKAGE_MD5=$(echo "$PACKAGE_CONFIG_SUBSET" | md5sum | awk '{print $1}')
        PREVIOUS_PACKAGE_MD5=$(cat ${{ env.BUILD_STATE_DIR }}/package.md5 2>/dev/null || echo "not_found")
        DO_FULL_BUILD=0
        DO_PACKAGE_BUILD=0

        echo "--- Debug Log: Build Decision Variables ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Input clean_build: ${{ github.event.inputs.clean_build }}" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Current TOOLCHAIN_MD5: $TOOLCHAIN_MD5" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Previous TOOLCHAIN_MD5: $PREVIOUS_TOOLCHAIN_MD5" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Current PACKAGE_MD5: $PACKAGE_MD5" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Previous PACKAGE_MD5: $PREVIOUS_PACKAGE_MD5" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "env.feeds_changed: ${{ env.feeds_changed }}" | tee -a ${{ env.DEBUG_LOG_FILE }}

        if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          echo "clean_build is true, setting DO_FULL_BUILD=1 (全新编译，不使用恢复的缓存)" | tee -a ${{ env.DEBUG_LOG_FILE }}
          DO_FULL_BUILD=1
        elif [ "$PREVIOUS_TOOLCHAIN_MD5" = "not_found" ] || [ "$TOOLCHAIN_MD5" != "$PREVIOUS_TOOLCHAIN_MD5" ]; then
          echo "Toolchain config changed or first build with this state, setting DO_FULL_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE }}
          DO_FULL_BUILD=1
        elif [ "$PREVIOUS_PACKAGE_MD5" = "not_found" ] || [ "$PACKAGE_MD5" != "$PREVIOUS_PACKAGE_MD5" ]; then
          echo "Package config changed, setting DO_PACKAGE_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE }}
          DO_PACKAGE_BUILD=1
        elif [ "${{ env.feeds_changed }}" = "true" ]; then
           echo "Feeds changed (and configs appear same), setting DO_PACKAGE_BUILD=1" | tee -a ${{ env.DEBUG_LOG_FILE }}
           DO_PACKAGE_BUILD=1
        fi
        echo "Final DO_FULL_BUILD: $DO_FULL_BUILD" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "Final DO_PACKAGE_BUILD: $DO_PACKAGE_BUILD" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- End Debug Log: Build Decision Variables ---" | tee -a ${{ env.DEBUG_LOG_FILE }}

        if compile_firmware; then
          echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_' | sed 's/_$//')" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
        
        echo "Final ccache stats for the entire compile step:" | tee -a ${{ env.DEBUG_LOG_FILE }}
        ccache -s | tee -a ${{ env.DEBUG_LOG_FILE }}
        df -h | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- Debug Log: Compile Step End ---" | tee -a ${{ env.DEBUG_LOG_FILE }}

    - name: 备份缓存前检查工具链和各构建目录大小
      if: "!cancelled()" 
      run: |
        echo "编译完成或中止，详细检查工具链和各构建缓存目录大小..." | tee -a ${{ env.DEBUG_LOG_FILE }}
        CURRENT_DATE_WITH_TZ=$(date +"%Y-%m-%d %H:%M:%S %Z")
        echo "" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- 详细目录大小检查 (du -sh) ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "检查时间: $CURRENT_DATE_WITH_TZ" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--------------------------------------------------" | tee -a ${{ env.DEBUG_LOG_FILE }}
        
        check_and_log_size() {
            local dir_path="$1"
            local dir_desc="$2"
            local readable_size="未知或目录不存在"
            if [ -e "${dir_path}" ]; then 
                readable_size=$(du -sh "${dir_path}" 2>/dev/null | awk '{print $1}')
                if [ -z "${readable_size}" ]; then readable_size="获取失败或为空"; fi
                echo "$dir_desc (${dir_path}): ${readable_size}" 
                echo "[SIZE_CHECK] $dir_desc (${dir_path}): ${readable_size}" >> ${{ env.DEBUG_LOG_FILE }}
            else
                echo "$dir_desc (${dir_path}): 目录不存在" 
                echo "[SIZE_CHECK] $dir_desc (${dir_path}): 目录不存在" >> ${{ env.DEBUG_LOG_FILE }}
            fi
        }

        check_and_log_size "${{ env.TOOLCHAIN_DIR }}" "1. 工具链安装目录 (Staging Dir)"
        check_and_log_size "/workdir/openwrt/build_dir/toolchain-$(uname -m)_gcc-*_musl" "2. 工具链构建目录 (No Longer Cached)"
        check_and_log_size "${{ env.HOST_BUILD_DIR_PATH }}" "3. 主机工具构建目录 (Host Build Dir)"
        check_and_log_size "${{ env.PACKAGES_DIR }}" "4. 编译产物输出目录 (bin/)" 
        check_and_log_size "${{ env.CCACHE_DIR }}" "5. CCACHE目录"
        check_and_log_size "/workdir/openwrt/build_dir/" "6. 整个 OpenWrt build_dir 目录 (参考)"
        check_and_log_size "${{ env.BUILD_STATE_DIR }}" "7. 构建状态目录 (Build State)"
        
        echo "--------------------------------------------------" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "--- 详细目录大小检查结束 ---" | tee -a ${{ env.DEBUG_LOG_FILE }}
        echo "" | tee -a ${{ env.DEBUG_LOG_FILE }}

        mkdir -p ${{ env.BUILD_STATE_DIR }}
        echo "缓存元数据创建/检查时间: $CURRENT_DATE_WITH_TZ" > ${{ env.BUILD_STATE_DIR }}/cache_metadata_timestamp.txt
        echo "运行ID: ${{ github.run_id }}" >> ${{ env.BUILD_STATE_DIR }}/cache_metadata_timestamp.txt
        echo "构建分支: ${{ env.REPO_BRANCH }}" >> ${{ env.BUILD_STATE_DIR }}/cache_metadata_timestamp.txt
        echo "[DEBUG_LOG] 已更新缓存元数据时间戳文件: ${{ env.BUILD_STATE_DIR }}/cache_metadata_timestamp.txt" >> ${{ env.DEBUG_LOG_FILE }}
        echo "已更新缓存元数据时间戳文件: ${{ env.BUILD_STATE_DIR }}/cache_metadata_timestamp.txt"

    - name: 验证缓存已正确配置待保存
      if: "!cancelled()"
      run: |
        echo "已完成编译和大小检查。缓存将在作业结束时根据定义的key和path自动保存。" | tee -a ${{ env.DEBUG_LOG_FILE }}
        if [ -f "${{ env.BUILD_STATE_DIR }}/cache_metadata_timestamp.txt" ]; then
          echo "缓存元数据时间戳内容:" | tee -a ${{ env.DEBUG_LOG_FILE }}
          cat ${{ env.BUILD_STATE_DIR }}/cache_metadata_timestamp.txt | tee -a ${{ env.DEBUG_LOG_FILE }}
        fi
        df -h | tee -a ${{ env.DEBUG_LOG_FILE }}

    - name: Upload Debug Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: build-debug-logs-${{ github.run_id }}
        path: |
          ${{ env.DEBUG_LOG_FILE }}
          ${{ env.CCACHE_LOGFILE }}
          /workdir/openwrt/logs/
          /workdir/openwrt/config_diff.txt
          /workdir/openwrt/.config
          /workdir/openwrt/.config.input
        retention-days: 7

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "开始整理固件文件..." | tee -a ${{ env.DEBUG_LOG_FILE }}
        FIRMWARE_COLLECTION_DIR_PATH="" 
        OPENWRT_BIN_DIR="/workdir/openwrt/bin"
        OPENWRT_TARGETS_DIR="${OPENWRT_BIN_DIR}/targets"

        if [ ! -d "${OPENWRT_TARGETS_DIR}" ]; then
          echo "错误：编译目标目录 ${OPENWRT_TARGETS_DIR} 不存在。" | tee -a ${{ env.DEBUG_LOG_FILE }}
          FIRMWARE_COLLECTION_DIR_PATH="/tmp/empty_firmware_collection_$$" 
          mkdir -p "${FIRMWARE_COLLECTION_DIR_PATH}"
          echo "FIRMWARE=${FIRMWARE_COLLECTION_DIR_PATH}" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT 
          echo "FIRMWARE_ZIP=${FIRMWARE_COLLECTION_DIR_PATH}.zip" >> $GITHUB_ENV 
          zip -r "${FIRMWARE_COLLECTION_DIR_PATH}.zip" "${FIRMWARE_COLLECTION_DIR_PATH}" 
          exit 0
        fi

        DEEPEST_TARGET_SUBDIRS=$(find "${OPENWRT_TARGETS_DIR}" -mindepth 2 -maxdepth 2 -type d ! -name "packages" -print)
        if [ -z "${DEEPEST_TARGET_SUBDIRS}" ]; then
            echo "警告：在 ${OPENWRT_TARGETS_DIR} 下未找到标准的目标架构子目录。尝试直接在 ${OPENWRT_TARGETS_DIR} 搜索。" | tee -a ${{ env.DEBUG_LOG_FILE }}
            DEEPEST_TARGET_SUBDIRS="${OPENWRT_TARGETS_DIR}" 
        fi

        for CURRENT_IMG_SOURCE_DIR in $DEEPEST_TARGET_SUBDIRS; do
            echo "检查目录: ${CURRENT_IMG_SOURCE_DIR} 中的固件文件..." | tee -a ${{ env.DEBUG_LOG_FILE }}
            COLLECTED_FIRMWARE_OUTPUT_DIR="${OPENWRT_BIN_DIR}/firmware_collection_$(basename ${CURRENT_IMG_SOURCE_DIR})_$(date +%s)"
            mkdir -p "${COLLECTED_FIRMWARE_OUTPUT_DIR}"
            FILES_COPIED_COUNT=0
            
            cd "${CURRENT_IMG_SOURCE_DIR}" 
            
            for pattern in "*combined.img.gz" "*sysupgrade.img.gz" "*combined-efi.img.gz" "*kernel.bin" "*.img" "*.bin"; do # Removed duplicate *combined* & *sysupgrade*
                find . -maxdepth 1 -type f -name "$pattern" ! -path "./packages/*" -print0 | while IFS= read -r -d $'\0' found_file; do
                    echo "找到标准固件: ${found_file}，复制到 ${COLLECTED_FIRMWARE_OUTPUT_DIR}/" | tee -a ${{ env.DEBUG_LOG_FILE }}
                    cp -v -f "${found_file}" "${COLLECTED_FIRMWARE_OUTPUT_DIR}/"
                    FILES_COPIED_COUNT=$((FILES_COPIED_COUNT + 1))
                done
            done
            
            if [ $FILES_COPIED_COUNT -eq 0 ]; then
                echo "在 ${CURRENT_IMG_SOURCE_DIR} 中未找到标准模式的固件，尝试复制其他可能的文件..." | tee -a ${{ env.DEBUG_LOG_FILE }}
                find . -maxdepth 1 -type f \
                  ! -name "*.manifest" ! -name "*.txt" ! -name "*.json" ! -name "*.buildinfo" ! -name "sha256sums" \
                  ! -path "./packages/*" \
                  -print0 | while IFS= read -r -d $'\0' found_file; do
                    echo "找到其他文件: ${found_file}，复制到 ${COLLECTED_FIRMWARE_OUTPUT_DIR}/" | tee -a ${{ env.DEBUG_LOG_FILE }}
                    cp -v -f "${found_file}" "${COLLECTED_FIRMWARE_OUTPUT_DIR}/"
                    FILES_COPIED_COUNT=$((FILES_COPIED_COUNT + 1))
                done
            fi
            cd "/workdir/openwrt" 

            if [ $FILES_COPIED_COUNT -gt 0 ]; then
                echo "成功从 ${CURRENT_IMG_SOURCE_DIR} 复制 $FILES_COPIED_COUNT 个文件到 ${COLLECTED_FIRMWARE_OUTPUT_DIR}" | tee -a ${{ env.DEBUG_LOG_FILE }}
                if [ -f ".config" ]; then cp -v -f .config "${COLLECTED_FIRMWARE_OUTPUT_DIR}/config.txt"; fi
                ls -lh "${COLLECTED_FIRMWARE_OUTPUT_DIR}" | tee -a ${{ env.DEBUG_LOG_FILE }}
                FIRMWARE_COLLECTION_DIR_PATH="${COLLECTED_FIRMWARE_OUTPUT_DIR}" 
                break 
            else
                echo "警告: 在 ${CURRENT_IMG_SOURCE_DIR} 中未找到可用固件文件可收集。" | tee -a ${{ env.DEBUG_LOG_FILE }}
                rm -rf "${COLLECTED_FIRMWARE_OUTPUT_DIR}" 
            fi
        done

        if [ -z "${FIRMWARE_COLLECTION_DIR_PATH}" ]; then
            echo "警告：未能在任何标准目标子目录中收集到固件文件。启用紧急备用收集逻辑。" | tee -a ${{ env.DEBUG_LOG_FILE }}
            FIRMWARE_COLLECTION_DIR_PATH="${OPENWRT_BIN_DIR}/firmware_fallback_collection_$(date +%s)"
            mkdir -p "${FIRMWARE_COLLECTION_DIR_PATH}"
            find "${OPENWRT_TARGETS_DIR}" -type f \( -name "*.bin" -o -name "*.img" -o -name "*.img.gz" \) ! -path "*/packages/*" ! -path "*/firmware_collection_*" -exec cp -v -f {} "${FIRMWARE_COLLECTION_DIR_PATH}/" \;
            if [ -f "/workdir/openwrt/.config" ]; then cp -v -f /workdir/openwrt/.config "${FIRMWARE_COLLECTION_DIR_PATH}/config.txt";
            else echo "# Fallback .config - actual .config not found" > "${FIRMWARE_COLLECTION_DIR_PATH}/config.txt"; fi
        fi

        echo "FIRMWARE=${FIRMWARE_COLLECTION_DIR_PATH}" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

        if [ -n "${FIRMWARE_COLLECTION_DIR_PATH}" ] && [ -d "${FIRMWARE_COLLECTION_DIR_PATH}" ] && [ "$(ls -A "${FIRMWARE_COLLECTION_DIR_PATH}")" ]; then
            FIRMWARE_PARENT_DIR=$(dirname "${FIRMWARE_COLLECTION_DIR_PATH}")
            FIRMWARE_BASENAME=$(basename "${FIRMWARE_COLLECTION_DIR_PATH}")
            ZIP_FILENAME="${FIRMWARE_BASENAME}.zip" 
            echo "创建固件压缩包 ${FIRMWARE_PARENT_DIR}/${ZIP_FILENAME} 从目录 ${FIRMWARE_BASENAME}" | tee -a ${{ env.DEBUG_LOG_FILE }}
            cd "${FIRMWARE_PARENT_DIR}" && zip -r9 "${ZIP_FILENAME}" "${FIRMWARE_BASENAME}"
            if [ -f "${ZIP_FILENAME}" ]; then
                echo "FIRMWARE_ZIP=${FIRMWARE_PARENT_DIR}/${ZIP_FILENAME}" >> $GITHUB_ENV
                ls -lh "${FIRMWARE_PARENT_DIR}/${ZIP_FILENAME}" | tee -a ${{ env.DEBUG_LOG_FILE }}
            else
                echo "错误：压缩包 ${ZIP_FILENAME} 未能成功创建。" | tee -a ${{ env.DEBUG_LOG_FILE }}
                echo "FIRMWARE_ZIP=/tmp/zip_creation_failed.zip" >> $GITHUB_ENV 
            fi
        else
            echo "警告: 最终固件收集目录 (${FIRMWARE_COLLECTION_DIR_PATH}) 未有效设置、不是目录或为空，无法创建 firmware.zip。" | tee -a ${{ env.DEBUG_LOG_FILE }}
            echo "FIRMWARE_ZIP=/tmp/no_firmware_to_zip.zip" >> $GITHUB_ENV
        fi

    - name: 上传固件 (Artifact)
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_ZIP }} 
        if-no-files-found: warn

    - name: 生成发布标签
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        RELEASE_TAG_BASE=$(date +"%Y.%m.%d-%H%M")
        DEVICE_TAG_PART=$(echo "${{ env.DEVICE_NAME }}" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/^-//;s/-$//')
        if [ -n "$DEVICE_TAG_PART" ] && [ "$DEVICE_TAG_PART" != "_" ]; then FINAL_RELEASE_TAG="${RELEASE_TAG_BASE}${DEVICE_TAG_PART}"; else FINAL_RELEASE_TAG="${RELEASE_TAG_BASE}"; fi
        echo "RELEASE_TAG=${FINAL_RELEASE_TAG}" >> $GITHUB_OUTPUT
        echo "## OpenWrt Firmware Build ($(date +"%Y-%m-%d %H:%M")) 📦" > release_body.txt
        echo "" >> release_body.txt
        echo "**Branch:** \`${{ env.REPO_BRANCH }}\`" >> release_body.txt
        echo "**Config:** \`${{ env.CONFIG_FILE }}\`" >> release_body.txt
        if [ -n "$DEVICE_TAG_PART" ] && [ "$DEVICE_TAG_PART" != "_" ]; then echo "**Device:** \`${{ env.DEVICE_NAME }}\`" >> release_body.txt; fi
        echo "" >> release_body.txt
        echo "### 固件下载 Firmware Download" >> release_body.txt
        echo "请在下方 Assets 中找到固件文件 (通常是一个 .zip 压缩包)。" >> release_body.txt
        echo "Please find firmware files (usually a .zip archive) in the Assets section below." >> release_body.txt
        echo "" >> release_body.txt; echo "---" >> release_body.txt
        echo "⚠️ **刷机前请务必备份重要数据！**" >> release_body.txt
        echo "⚠️ **Backup your important data before flashing!**" >> release_body.txt
        echo "" >> release_body.txt
        echo "_Built by GitHub Actions - Workflow: ${GITHUB_WORKFLOW}_" >> release_body.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release_body.txt
        files: ${{ env.FIRMWARE_ZIP }} # 只上传ZIP包 (修正了此处的注释问题)

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

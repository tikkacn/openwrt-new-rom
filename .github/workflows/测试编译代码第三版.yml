name: 测试编译代码第三版

on:
  repository_dispatch:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 16 * * *'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone Source Code
      working-directory: /workdir
      run: |
        df -hT
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load Custom Configuration
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default || true
        [ -e files ] && mv files openwrt/files || true
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config || true

    - name: Update Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: Configure Build
      run: |
        cd openwrt
        make defconfig

    # 使用actions/cache/restore恢复缓存，但不自动保存
    - name: Restore Package Cache
      id: cache-packages
      uses: actions/cache/restore@v3
      with:
        path: |
          openwrt/staging_dir/packages
          openwrt/staging_dir/hostpkg
          openwrt/build_dir/target-*/packages
          openwrt/bin/packages
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest
        restore-keys: |
          packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest

    - name: Download Package Sources
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec ls -l {} \; || true
        find dl -size -1024c -exec rm -f {} \; || true

    - name: Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo "::group::Compile Firmware"
        echo "Starting compilation..."
        
        # Display if package cache was hit
        if [ "${{ steps.cache-packages.outputs.cache-hit }}" = "true" ]; then
          echo "Package cache was successfully restored!"
          ls -la staging_dir/packages/ || echo "No packages directory"
          ls -la bin/packages/ || echo "No bin/packages directory"
        else
          echo "Package cache was not found or not restored."
        fi
        
        # Use progressive parallelism for compilation
        make -j$(nproc) || make -j8 || make -j4 || make -j1 V=s
        
        echo "::endgroup::"
        
        echo "status=success" >> $GITHUB_OUTPUT
        
        # Detect target for artifact naming
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config > deviceinfo
        if [ -s deviceinfo ]; then
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        else
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*=y' .config | grep -v '=m' | sed -r 's/CONFIG_TARGET_(.*)=y/\1/' | head -1)
        fi
        
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
        # Show firmware size
        echo "Firmware size:"
        du -h bin/targets/*/* 2>/dev/null || echo "No firmware found"

    # 只在成功编译后保存缓存
    - name: Save Package Cache
      if: steps.compile.outputs.status == 'success'
      uses: actions/cache/save@v3
      with:
        path: |
          openwrt/staging_dir/packages
          openwrt/staging_dir/hostpkg
          openwrt/build_dir/target-*/packages
          openwrt/bin/packages
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest

    - name: Organize Files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Release Tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "This is an automated build of OpenWrt firmware." > release.txt
        echo "- Device: ${{ env.DEVICE_NAME }}" >> release.txt
        echo "- Date: $(date +"%Y-%m-%d %H:%M:%S")" >> release.txt
        echo "- Package cache hit: ${{ steps.cache-packages.outputs.cache-hit }}" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware to Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Clean Up Old Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove Old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

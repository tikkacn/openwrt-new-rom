name: 测试编译代码第三版

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 增量缓存优化.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查初始磁盘空间
      run: df -hT

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 1024
        swap-size-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: 检出工作流代码
      uses: actions/checkout@v4

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y --no-install-recommends \
          build-essential curl gawk gcc-multilib g++-multilib git libncurses5-dev \
          libssl-dev python3 rsync subversion unzip wget zlib1g-dev
        sudo apt-get autoremove -y --purge
        sudo apt-get clean -y
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源代码
      run: |
        cd /workdir
        git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
        ln -sf /workdir/openwrt "$GITHUB_WORKSPACE/openwrt"
        echo "OPENWRT_ROOT=/workdir/openwrt" >> $GITHUB_ENV

    - name: 计算 Feeds 和 Config 的哈希
      id: hash
      run: |
        cd openwrt
        [ -e "$GITHUB_WORKSPACE/$FEEDS_CONF" ] && cp "$GITHUB_WORKSPACE/$FEEDS_CONF" feeds.conf.default
        echo "feeds_hash=$(sha256sum feeds.conf.default | awk '{print $1}')" >> $GITHUB_OUTPUT
        [ -e "$GITHUB_WORKSPACE/$CONFIG_FILE" ] && cp "$GITHUB_WORKSPACE/$CONFIG_FILE" .config
        grep "^CONFIG_PACKAGE_" .config | sort > package_list.txt
        echo "package_hash=$(sha256sum package_list.txt | awk '{print $1}')" >> $GITHUB_OUTPUT

    - name: 恢复非核心包缓存
      uses: actions/cache@v4
      id: cache-packages
      with:
        path: ${{ env.OPENWRT_ROOT }}/bin/packages
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ steps.hash.outputs.feeds_hash }}-${{ steps.hash.outputs.package_hash }}
        restore-keys: |
          packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ steps.hash.outputs.feeds_hash }}-
          packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    - name: 加载和更新 Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置和脚本
      run: |
        cd openwrt
        [ -e "$GITHUB_WORKSPACE/files" ] && mv "$GITHUB_WORKSPACE/files" .
        chmod +x "$GITHUB_WORKSPACE/$DIY_P1_SH" "$GITHUB_WORKSPACE/$DIY_P2_SH"
        "$GITHUB_WORKSPACE/$DIY_P1_SH"
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    - name: 下载软件包源码
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc) || make download -j1 V=s

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 保存非核心包缓存
      uses: actions/cache/save@v4
      if: steps.compile.outputs.status == 'success'
      with:
        path: ${{ env.OPENWRT_ROOT }}/bin/packages
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ steps.hash.outputs.feeds_hash }}-${{ steps.hash.outputs.package_hash }}

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 上传固件到 Artifacts
      uses: actions/upload-artifact@v4
      if: steps.organize.outcome == 'success'
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布信息
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "构建时间: $(date +"%Y-%m-%d %H:%M:%S")" > release.txt
        echo "设备型号: ${{ env.DEVICE_NAME }}" >> release.txt
        echo "固件大小: $(du -sh ${{ env.FIRMWARE }})" >> release.txt

    - name: 上传固件到 Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outcome == 'success'
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理旧的工作流
      if: always()
      uses: actions/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

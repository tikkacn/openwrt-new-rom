name: 测试编译代码第三版

on:
  repository_dispatch:
  workflow_dispatch:
  # Uncomment below to enable scheduled builds
  # schedule:
  #   - cron: '0 16 * * *'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  PACKAGES_CACHE_DIR: packages_cache

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Disk Space Info Before Cleanup
      run: |
        echo "Disk space before cleanup:"
        df -hT

    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        
    - name: Remove Unused Software
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/powershell
        sudo apt-get purge -y azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mongodb* dotnet* moby* snapd* || true

    - name: Disk Space Info After Cleanup
      run: |
        echo "Disk space after cleanup:"
        df -hT

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone Source Code
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        echo "OPENWRT_ROOT=$PWD" >> $GITHUB_ENV
        echo "PACKAGE_LASTMOD=$(date +%s)" >> $GITHUB_ENV

    - name: Load Custom Configuration
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: Load Final Configuration
      run: |
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # Try to restore package cache with a static name
    - name: Restore Package Cache
      id: cache-packages
      uses: actions/cache/restore@v3
      with:
        path: |
          openwrt/staging_dir/packages
          openwrt/staging_dir/hostpkg
          openwrt/build_dir/target-*/packages
          openwrt/build_dir/hostpkg
          openwrt/bin/packages
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest
        restore-keys: |
          packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest

    # Cache for ccache
    - name: Restore ccache
      uses: actions/cache/restore@v3
      with:
        path: ~/.ccache
        key: ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest
        restore-keys: |
          ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest
    
    - name: Configure ccache
      run: |
        echo "Setting up ccache..."
        mkdir -p ~/.ccache
        echo "max_size = 5G" > ~/.ccache/ccache.conf
        echo "compression = true" >> ~/.ccache/ccache.conf
        echo "compression_level = 9" >> ~/.ccache/ccache.conf
        echo "hash_dir = false" >> ~/.ccache/ccache.conf
        echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
        echo "Using ccache directory: $HOME/.ccache"

    - name: Make Defconfig
      run: |
        cd openwrt
        make defconfig
        
    - name: Download Package Sources
      id: download
      run: |
        cd openwrt
        make download -j8 || make download -j1 V=s
        find dl -size -1024c -exec ls -l {} \; || true
        find dl -size -1024c -exec rm -f {} \; || true

    - name: Compile Packages Only With Cache
      id: compile-packages
      run: |
        cd openwrt
        echo "::group::Compile Packages"
        
        # Set CCACHE environment
        export CCACHE_DIR=$HOME/.ccache
        ccache -s
        
        # If package cache was not found or partially found
        echo "Building all packages..."
        
        # First identify all selected packages
        grep "^CONFIG_PACKAGE_" .config | cut -d= -f1 | sed 's/CONFIG_PACKAGE_//' > selected_packages.txt
        
        # Build all packages specifically with progressive fallback
        while IFS= read -r pkg; do
          echo "Building package: $pkg"
          make package/${pkg}/compile -j$(nproc) || \
          make package/${pkg}/compile -j8 || \
          make package/${pkg}/compile -j4 || \
          make package/${pkg}/compile -j1 V=s
        done < selected_packages.txt
        
        # Display ccache stats after building
        ccache -s
        
        echo "::endgroup::"
        
        # Package compilation timestamp for reference
        echo "PACKAGES_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

    - name: Compile Firmware
      id: compile-firmware
      run: |
        cd openwrt
        echo "::group::Compile Firmware"
        
        # Set CCACHE environment
        export CCACHE_DIR=$HOME/.ccache
        
        # Build the rest of the firmware with progressive fallback
        echo "Building firmware with progressive parallelism..."
        make -j$(nproc) || \
        make -j8 || \
        make -j4 || \
        make -j1 V=s
        
        echo "::endgroup::"
        
        echo "status=success" >> $GITHUB_OUTPUT
        
        # Detect device name for artifact naming
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config > deviceinfo
        if [ -s deviceinfo ]; then
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        else
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*=y' .config | grep -v '=m' | sed -r 's/CONFIG_TARGET_(.*)=y/\1/' | head -1)
        fi
        
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
        # Show firmware size
        echo "Firmware size:"
        du -h bin/targets/*/*/* 2>/dev/null || echo "No firmware found"

    # Save the package cache only after successful compilation
    - name: Save Package Cache
      if: steps.compile-firmware.outputs.status == 'success'
      uses: actions/cache/save@v3
      with:
        path: |
          openwrt/staging_dir/packages
          openwrt/staging_dir/hostpkg
          openwrt/build_dir/target-*/packages
          openwrt/build_dir/hostpkg
          openwrt/bin/packages
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest

    # Save ccache after successful compilation
    - name: Save ccache
      if: steps.compile-firmware.outputs.status == 'success'
      uses: actions/cache/save@v3
      with:
        path: ~/.ccache
        key: ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-latest

    - name: Check Space Usage
      if: always()
      run: |
        echo "Space usage after compilation:"
        df -hT

    - name: Organize Files
      id: organize
      if: steps.compile-firmware.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate Release Tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile-firmware.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "This is an automated build of OpenWrt firmware." > release.txt
        echo "- Device: ${{ env.DEVICE_NAME }}" >> release.txt
        echo "- Date: $(date +"%Y-%m-%d %H:%M:%S")" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware to Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Clean Up Old Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove Old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

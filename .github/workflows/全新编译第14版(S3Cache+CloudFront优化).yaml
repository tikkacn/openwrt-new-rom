name: 全新编译第14版(S3Cache+CloudFront优化)

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '全新编译，不使用任何恢复的缓存。首次S3填充时应为false。'
        required: false
        default: 'false'
      config_file:
        description: '配置文件 (位于仓库根目录)'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE_NAME: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH_NAME: diy-part1.sh
  DIY_P2_SH_NAME: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

  CCACHE_DIR_PATH: /workdir/ccache
  PACKAGES_BIN_DIR_PATH: /workdir/openwrt/bin
  BUILD_STATE_DIR_PATH: /workdir/build_state

  S3_TARGET_STAGING_DIR_PATH: /workdir/openwrt/staging_dir
  S3_TARGET_HOST_BUILD_DIR_PATH: /workdir/openwrt/build_dir/host
  S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH: /workdir/openwrt/build_dir/toolchain-x86_64_gcc-13.3.0_musl
  S3_TARGET_DL_DIR_PATH: /workdir/openwrt/dl

  S3_STAGING_DIR_ARCHIVE_FILENAME: staging_dir_cache.tar.zst
  S3_HOST_BUILD_DIR_ARCHIVE_FILENAME: host_build_dir_cache.tar.zst
  S3_TOOLCHAIN_BUILD_DIR_ARCHIVE_FILENAME: toolchain_build_dir_cache.tar.zst
  S3_DL_DIR_ARCHIVE_FILENAME: dl_dir_cache.tar.zst

  S3_CONFIG_SNAPSHOT_FILENAME: latest_successful_build.config

  CCACHE_LOGFILE_PATH: /tmp/ccache_detailed.log
  DEBUG_LOG_FILE_PATH: /tmp/build_debug_summary.log

  CF_CDN_DOMAIN: https://d16xdi3lv2va77.cloudfront.net
  CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码 (Checkout)
      uses: actions/checkout@v4

    - name: 设置 S3/CloudFront 缓存路径前缀 (Set S3/CF Cache Path Prefix)
      id: set_s3_prefix
      run: |
        s3_prefix_from_secret="${{ secrets.S3_CACHE_PATH_PREFIX }}"
        final_s3_prefix=""
        if [ -n "$s3_prefix_from_secret" ]; then
          final_s3_prefix="$s3_prefix_from_secret"
        else
          default_prefix="openwrt-caches/${{ env.REPO_BRANCH }}"
          final_s3_prefix="$default_prefix"
        fi
        echo "S3_PATH_PREFIX_KEY=${final_s3_prefix}" >> $GITHUB_ENV
        echo "s3_prefix=${final_s3_prefix}" >> $GITHUB_OUTPUT
        echo "CF_EFFECTIVE_URL_PREFIX=${{ env.CF_CDN_DOMAIN }}/${final_s3_prefix}" >> $GITHUB_ENV
        echo "DEBUG_LOG_ON_RUNNER=${{ github.workspace }}/build_debug_summary_runner.log" >> $GITHUB_ENV

    - name: 优化磁盘空间 (Maximize Build Space)
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480
        swap-size-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 额外清理磁盘空间并检查 (Extra Cleanup & Check)
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
        docker image prune -a -f || true
        docker system prune -af || true
        sudo apt-get clean && sudo apt-get autoremove -y
        df -h

    - name: 初始化环境和安装 AWS CLI (Initialize Environment & Install AWS CLI)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev \
        awscli jq
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        mkdir -p ${{ env.BUILD_STATE_DIR_PATH }} ${{ env.CCACHE_DIR_PATH }} /workdir/openwrt
        chmod -R 777 /workdir

        CONFIG_FILE_ON_RUNNER="${{ github.workspace }}/${{ env.CONFIG_FILE_NAME }}"
        DIY_P1_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P1_SH_NAME }}"
        DIY_P2_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P2_SH_NAME }}"
        echo '#!/bin/bash' > "${DIY_P1_SH_ON_RUNNER}"
        echo "set -eo pipefail" >> "${DIY_P1_SH_ON_RUNNER}"
        echo "echo '[INFO] Running default diy-part1.sh. FEEDS_CONF_URL is: ${{ env.FEEDS_CONF_URL }}'" >> "${DIY_P1_SH_ON_RUNNER}"
        chmod +x "${DIY_P1_SH_ON_RUNNER}"
        echo '#!/bin/bash' > "${DIY_P2_SH_ON_RUNNER}"
        echo "set -eo pipefail" >> "${DIY_P2_SH_ON_RUNNER}"
        echo 'BANNER_DATE=$(date +"%Y%m%d%H%M")' >> "${DIY_P2_SH_ON_RUNNER}"
        echo 'mkdir -p package/lean/default-settings/files' >> "${DIY_P2_SH_ON_RUNNER}"
        echo 'touch package/lean/default-settings/files/zzz-default-settings' >> "${DIY_P2_SH_ON_RUNNER}"
        echo 'sed -i "s/OpenWrt /OpenWrt_S3Build_${BANNER_DATE} /" package/lean/default-settings/files/zzz-default-settings || echo "Banner sed command failed or target file not found."' >> "${DIY_P2_SH_ON_RUNNER}"
        echo "echo '[INFO] Running default diy-part2.sh (Banner updated).'" >> "${DIY_P2_SH_ON_RUNNER}"
        chmod +x "${DIY_P2_SH_ON_RUNNER}"

        if [ ! -f "${CONFIG_FILE_ON_RUNNER}" ]; then
          echo "# Default minimal .config created by workflow" > "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_TARGET_x86=y" >> "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_TARGET_x86_64=y" >> "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> "${CONFIG_FILE_ON_RUNNER}"
          echo "CONFIG_PACKAGE_luci=y" >> "${CONFIG_FILE_ON_RUNNER}"
        fi

    - name: 配置 AWS 凭证 (Configure AWS Credentials)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 克隆源代码并创建基础目录结构 (Clone Source & Setup Dirs)
      working-directory: /workdir
      run: |
        rm -rf /workdir/openwrt
        rm -rf ${{ github.workspace }}/openwrt
        git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        ln -svf /workdir/openwrt ${{ github.workspace }}/openwrt
        cd openwrt
        mkdir -p ${{ env.S3_TARGET_STAGING_DIR_PATH }} ${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }} ${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }} \
                   ${{ env.S3_TARGET_DL_DIR_PATH }} \
                   ${{ env.PACKAGES_BIN_DIR_PATH }} ${{ env.BUILD_STATE_DIR_PATH }} ${{ env.CCACHE_DIR_PATH }}
        mkdir -p logs
        curl -L -o feeds.conf.default "${{ env.FEEDS_CONF_URL }}" || true
        rm -rf .git

    - name: 恢复编译产物缓存 (bin/ 目录)
      uses: actions/cache@v3
      id: cache-packages-bin
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.PACKAGES_BIN_DIR_PATH }}
        key: packages-bin-${{ env.REPO_BRANCH }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE_NAME)) }}-v1

    - name: 恢复CCACHE缓存
      uses: actions/cache@v3
      id: cache-ccache
      with:
        path: ${{ env.CCACHE_DIR_PATH }}
        key: ccache-${{ env.REPO_BRANCH }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE_NAME)) }}-v1

    - name: 恢复构建状态缓存
      uses: actions/cache@v3
      id: cache-state
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.BUILD_STATE_DIR_PATH }}
        key: state-${{ env.REPO_BRANCH }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE_NAME)) }}-v1

    - name: 从 CloudFront CDN 恢复大体积缓存 (Download & Extract Caches from CloudFront)
      if: inputs.clean_build != 'true'
      working-directory: /workdir/openwrt
      env:
        CF_EFFECTIVE_URL_PREFIX: ${{ env.CF_EFFECTIVE_URL_PREFIX }}
      run: |
        set -e
        download_and_extract() {
          local archive_filename="$1"
          local target_dir="$2"
          local archive_url="${CF_EFFECTIVE_URL_PREFIX}/${archive_filename}"
          echo "尝试从 CloudFront 下载: $archive_url"
          if curl -fSL --retry 3 -o "${archive_filename}" "${archive_url}"; then
            rm -rf "${target_dir}"
            tar -I "zstd -T0" -xf "${archive_filename}" -C .
            rm -f "${archive_filename}"
          fi
        }
        download_and_extract "${{ env.S3_STAGING_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_STAGING_DIR_PATH }}"
        download_and_extract "${{ env.S3_HOST_BUILD_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }}"
        download_and_extract "${{ env.S3_TOOLCHAIN_BUILD_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }}"
        download_and_extract "${{ env.S3_DL_DIR_ARCHIVE_FILENAME }}" "${{ env.S3_TARGET_DL_DIR_PATH }}"

    - name: 删除旧S3缓存 (Delete Old S3 Cache)
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_NAME }}
        S3_PATH_PREFIX_KEY: ${{ env.S3_PATH_PREFIX_KEY }}
      run: |
        aws s3 rm "s3://${S3_BUCKET}/${S3_PATH_PREFIX_KEY}/" --recursive --exclude "*" --include "*.tar.zst"

    - name: 配置编译环境 (Configure Build Environment)
      run: |
        cd /workdir/openwrt
        CONFIG_FILE_ON_RUNNER="${{ github.workspace }}/${{ env.CONFIG_FILE_NAME }}"
        DIY_P1_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P1_SH_NAME }}"
        DIY_P2_SH_ON_RUNNER="${{ github.workspace }}/${{ env.DIY_P2_SH_NAME }}"
        "${DIY_P1_SH_ON_RUNNER}"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        if [ -e "${{ github.workspace }}/files" ]; then
          cp -r "${{ github.workspace }}/files" ./
        fi
        cp "${CONFIG_FILE_ON_RUNNER}" ./.config
        cp .config .config.input
        "${DIY_P2_SH_ON_RUNNER}"
        echo "CONFIG_AUTOREMOVE=y" >> .config
        echo "CONFIG_AUTOREBUILD=y" >> .config
        if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config; fi
        if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config; fi
        if grep -q "CONFIG_TARGET_x86=y" .config; then
          if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then echo "CONFIG_GRUB_IMAGES=y" >> .config; fi
          if ! grep -q "CONFIG_TARGET_IMAGES_PAD=y" .config; then echo "CONFIG_TARGET_IMAGES_PAD=y" >> .config; fi
        fi
        make defconfig

    - name: 编译 OpenWrt (Compile OpenWrt)
      id: compile
      run: |
        cd /workdir/openwrt
        make -j$(nproc) V=s || make -j1 V=s

    - name: 整理固件文件 (Organize Firmware Files)
      id: organize
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        FIRMWARE_DIR="/workdir/openwrt/bin/targets"
        FINAL_OUT="/workdir/firmware_output"
        mkdir -p "$FINAL_OUT"
        find "$FIRMWARE_DIR" -type f \( -name "*.bin" -o -name "*.img" -o -name "*.img.gz" \) -exec cp {} "$FINAL_OUT/" \;
        if [ -f "/workdir/openwrt/.config" ]; then cp /workdir/openwrt/.config "$FINAL_OUT/config.txt"; fi
        cd /workdir && zip -r9 firmware.zip firmware_output
        echo "FIRMWARE_ZIP=/workdir/firmware.zip" >> $GITHUB_ENV

    - name: 上传固件 (Upload Firmware Artifact)
      uses: actions/upload-artifact@v4
      if: steps.organize.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_Firmware
        path: /workdir/firmware.zip
        if-no-files-found: warn

    - name: 生成发布标签 (Generate Release Tag)
      id: tag
      if: steps.organize.outcome == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        echo "OpenWrt Firmware Build" > release_body.txt

    - name: 上传固件到Releases (Upload Firmware to Releases)
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release_body.txt
        files: /workdir/firmware.zip

    - name: 删除旧的Releases (Delete Old Releases)
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 打包并上传大体积缓存到 S3 (Pack & Upload Large Caches to S3)
      if: steps.compile.outcome == 'success' && !cancelled()
      working-directory: /workdir/openwrt
      run: |
        S3_BUCKET_NAME="${{ secrets.AWS_S3_BUCKET_NAME }}"
        S3_FULL_PREFIX="${{ env.S3_PATH_PREFIX_KEY }}"
        CONFIG_FILE_TO_UPLOAD=".config"
        s3_pack_and_upload() {
          local source_dir="$1"
          local archive_name="$2"
          local s3_object_key="${S3_FULL_PREFIX}/${archive_name}"
          local local_archive="./${archive_name}"
          if [ ! -d "$source_dir" ]; then return 1; fi
          tar -I "zstd -T0 -3" -cf "$local_archive" "$source_dir"
          aws s3 cp "$local_archive" "s3://${S3_BUCKET_NAME}/${s3_object_key}" --quiet
          rm -f "$local_archive"
        }
        s3_pack_and_upload "$(basename ${{ env.S3_TARGET_STAGING_DIR_PATH }})" "${{ env.S3_STAGING_DIR_ARCHIVE_FILENAME }}"
        s3_pack_and_upload "$(basename ${{ env.S3_TARGET_DL_DIR_PATH }})" "${{ env.S3_DL_DIR_ARCHIVE_FILENAME }}"
        s3_pack_and_upload "build_dir/$(basename ${{ env.S3_TARGET_HOST_BUILD_DIR_PATH }})" "${{ env.S3_HOST_BUILD_DIR_ARCHIVE_FILENAME }}"
        s3_pack_and_upload "build_dir/$(basename ${{ env.S3_TARGET_TOOLCHAIN_BUILD_DIR_PATH }})" "${{ env.S3_TOOLCHAIN_BUILD_DIR_ARCHIVE_FILENAME }}"
        if [ -f "$CONFIG_FILE_TO_UPLOAD" ]; then
          S3_CONFIG_OBJECT_KEY="${S3_FULL_PREFIX}/${{ env.S3_CONFIG_SNAPSHOT_FILENAME }}"
          aws s3 cp "$CONFIG_FILE_TO_UPLOAD" "s3://${S3_BUCKET_NAME}/${S3_CONFIG_OBJECT_KEY}" --quiet
        fi

    - name: 刷新 CloudFront CDN 缓存 (CloudFront Invalidate Cache)
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
        S3_PATH_PREFIX_KEY: ${{ env.S3_PATH_PREFIX_KEY }}
      run: |
        aws cloudfront create-invalidation \
          --distribution-id "$CF_DISTRIBUTION_ID" \
          --paths "/${S3_PATH_PREFIX_KEY}/*"

name: 全新编译第八版(修复)

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH调试'
        required: false
        default: 'false'
      clean_build:
        description: '完全重新编译'
        required: false
        default: 'false'
      config_file:
        description: '配置文件'
        required: false
        default: '增量缓存优化.config'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF_URL: https://github.com/tikkacn/openwrt-new-rom/raw/main/feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config_file || '增量缓存优化.config' }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: /workdir/ccache
  # 缓存目录环境变量
  TOOLCHAIN_DIR: /workdir/openwrt/staging_dir
  TOOLCHAIN_BUILD_DIR: /workdir/openwrt/build_dir/toolchain-x86_64_gcc-13.3.0_musl
  PACKAGES_DIR: /workdir/openwrt/bin/targets
  BUILD_STATE_DIR: /workdir/build_state

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 优化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 20480
        swap-size-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: 额外清理磁盘空间并检查
      run: |
        echo "清理额外磁盘空间..."
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
        sudo rm -rf /usr/share/swift /usr/local/julia* /opt/hostedtoolcache/CodeQL
        docker image prune -a -f || true
        docker system prune -af || true
        sudo apt-get clean
        sudo apt-get autoremove -y
        ROOT_AVAIL=$(df -m /dev/root | tail -1 | awk '{print $4}')
        echo "根分区可用空间: ${ROOT_AVAIL}MB"
        if [ "$ROOT_AVAIL" -lt 20480 ]; then
          echo "错误：/dev/root 可用空间不足 20GB"
          exit 1
        fi
        df -h

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        mkdir -p ${{ env.BUILD_STATE_DIR }} ${{ env.CCACHE_DIR }}
        chmod -R 777 /workdir
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part1.sh
        echo '# Feeds 已通过 FEEDS_CONF_URL 配置' >> $GITHUB_WORKSPACE/diy-part1.sh
        chmod +x $GITHUB_WORKSPACE/diy-part1.sh
        echo '#!/bin/bash' > $GITHUB_WORKSPACE/diy-part2.sh
        echo 'sed -i "s/OpenWrt /OpenWrt_AutoBuild /" package/lean/default-settings/files/zzz-default-settings' >> $GITHUB_WORKSPACE/diy-part2.sh
        chmod +x $GITHUB_WORKSPACE/diy-part2.sh
        if [ ! -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
          echo "警告：配置文件 $CONFIG_FILE 不存在，创建默认配置文件"
          echo "# 创建默认的最小化配置文件" > $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_TARGET_x86_64_DEVICE_generic=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
          echo "CONFIG_PACKAGE_luci=y" >> $GITHUB_WORKSPACE/$CONFIG_FILE
        fi
        df -h

    - name: 克隆源代码并配置 Feeds
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        find . -type f -name "*.sh" -exec chmod +x {} \;
        curl -L -o feeds.conf.default "$FEEDS_CONF_URL" || echo "警告：无法下载 feeds.conf.default，使用仓库默认配置"
        cat feeds.conf.default
        rm -rf .git
        # 创建必要的目录结构以确保缓存正常工作
        mkdir -p ${{ env.PACKAGES_DIR }} ${{ env.TOOLCHAIN_DIR }}
        
        # 确保工具链构建目录存在
        mkdir -p ${{ env.TOOLCHAIN_BUILD_DIR }} ${{ env.BUILD_STATE_DIR }}
        
        # 创建日志目录
        mkdir -p logs

    # 恢复工具链缓存（包含staging_dir和build_dir的工具链）
    - name: 恢复工具链缓存
      uses: actions/cache@v3
      id: cache-toolchain
      if: inputs.clean_build != 'true'
      with:
        path: |
          ${{ env.TOOLCHAIN_DIR }}
          ${{ env.TOOLCHAIN_BUILD_DIR }}
        key: toolchain-${{ env.REPO_BRANCH }}-fixed-cache

    # 恢复编译包缓存
    - name: 恢复编译包缓存
      uses: actions/cache@v3
      id: cache-packages
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.PACKAGES_DIR }}
        key: packages-${{ env.REPO_BRANCH }}-fixed-cache

    # 恢复CCACHE缓存
    - name: 恢复CCACHE缓存
      uses: actions/cache@v3
      id: cache-ccache
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_BRANCH }}-fixed-cache

    # 恢复构建状态缓存
    - name: 恢复构建状态缓存
      uses: actions/cache@v3
      id: cache-state
      if: inputs.clean_build != 'true'
      with:
        path: ${{ env.BUILD_STATE_DIR }}
        key: state-${{ env.REPO_BRANCH }}-fixed-cache

    - name: 检查缓存恢复状态
      run: |
        echo "CONFIG_FILE: ${{ env.CONFIG_FILE }}"
        echo "工具链缓存恢复状态: ${{ steps.cache-toolchain.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        echo "编译包缓存恢复状态: ${{ steps.cache-packages.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        echo "CCACHE缓存恢复状态: ${{ steps.cache-ccache.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        echo "构建状态缓存恢复状态: ${{ steps.cache-state.outputs.cache-hit == 'true' && '成功' || '未找到缓存' }}"
        
        # 检查工具链缓存大小
        echo "工具链目录大小: $(du -sh ${{ env.TOOLCHAIN_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        echo "工具链构建目录大小: $(du -sh ${{ env.TOOLCHAIN_BUILD_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        echo "编译包目录大小: $(du -sh ${{ env.PACKAGES_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        
        # 检查关键工具链文件
        echo "检查关键工具链文件..."
        find ${{ env.TOOLCHAIN_DIR }}/host/bin -name "gcc*" 2>/dev/null | head -5 || echo "未找到主机gcc"
        find ${{ env.TOOLCHAIN_DIR }}/toolchain-* -name "*gcc*" 2>/dev/null | head -5 || echo "未找到交叉编译器gcc"
        
        ls -la ${{ env.BUILD_STATE_DIR }}/ || echo "构建状态目录为空"
        if [ -f "${{ env.BUILD_STATE_DIR }}/config.md5" ]; then
          echo "之前MD5: $(cat ${{ env.BUILD_STATE_DIR }}/config.md5)"
        fi
        
        if [ -d "${{ env.TOOLCHAIN_DIR }}/host/bin" ] && [ -f "${{ env.TOOLCHAIN_DIR }}/host/bin/libdeflate-gzip" ]; then
          echo "工具链包含 libdeflate-gzip，缓存正常"
        else
          echo "警告：工具链缓存缺少 libdeflate-gzip"
        fi
        df -h

    - name: 配置编译环境
      run: |
        cd /workdir/openwrt
        if [ -f ".config" ]; then
          cp .config .config.original
        fi
        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo "更新并安装 Feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        [ -e $GITHUB_WORKSPACE/files ] && cp -r $GITHUB_WORKSPACE/files ./files
        cp $GITHUB_WORKSPACE/$CONFIG_FILE ./.config
        cp .config .config.input
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "CONFIG_AUTOREMOVE=n" >> .config
        echo "CONFIG_AUTOREBUILD=n" >> .config
        
        # 增加固件生成的关键配置
        echo "确保包含必要的固件生成配置..."
        if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then
          echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config
          echo "添加了 CONFIG_TARGET_ROOTFS_SQUASHFS=y"
        fi
        
        if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then
          echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config
          echo "添加了 CONFIG_TARGET_IMAGES_GZIP=y"
        fi
        
        if ! grep -q "CONFIG_TARGET_ROOTFS_TARGZ=y" .config; then
          echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
          echo "添加了 CONFIG_TARGET_ROOTFS_TARGZ=y"
        fi
        
        # 对于x86平台增加额外的镜像配置
        if grep -q "CONFIG_TARGET_x86=y" .config; then
          if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then
            echo "CONFIG_GRUB_IMAGES=y" >> .config
            echo "添加了 CONFIG_GRUB_IMAGES=y"
          fi
          
          if ! grep -q "CONFIG_TARGET_IMAGES_PAD=y" .config; then
            echo "CONFIG_TARGET_IMAGES_PAD=y" >> .config
            echo "添加了 CONFIG_TARGET_IMAGES_PAD=y"
          fi
        fi
        
        make defconfig
        # 修复这里 - 使用排序命令
        grep "^CONFIG_PACKAGE_.*=y" .config.input | sort > packages_input.txt || true
        grep "^CONFIG_PACKAGE_.*=y" .config | sort > packages_defconfig.txt || true
        comm -23 packages_input.txt packages_defconfig.txt > missing_packages.txt
        if [ -s missing_packages.txt ]; then
          echo "警告：以下包在 defconfig 后缺失，将尝试恢复："
          cat missing_packages.txt
          cat missing_packages.txt >> .config
          while read -r line; do
            pkg=$(echo "$line" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
            echo "安装包: $pkg"
            ./scripts/feeds install "$pkg" || echo "警告：无法安装 $pkg，可能不在 feeds 中"
          done < missing_packages.txt
          make defconfig
        else
          echo "所有配置项均保留，无缺失"
        fi
        
        # 显示最终配置中的关键固件生成选项
        echo "最终配置中的镜像生成选项:"
        grep -E "CONFIG_TARGET_ROOTFS|CONFIG_TARGET_IMAGES|CONFIG_GRUB|CONFIG_ISO|CONFIG_EFI" .config || echo "未找到镜像相关配置"
        
        diff .config.input .config > config_diff.txt || echo "配置无差异"
        cat config_diff.txt
        df -h

    - name: 检查源码变化
      id: check-feeds
      run: |
        cd /workdir/openwrt
        mkdir -p ${{ env.BUILD_STATE_DIR }}
        find feeds -type f -name "Makefile" -exec sha256sum {} \; | sort | sha256sum > ${{ env.BUILD_STATE_DIR }}/feeds.sha256
        CURRENT_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR }}/feeds.sha256 | awk '{print $1}')
        PREVIOUS_FEEDS_HASH=$(cat ${{ env.BUILD_STATE_DIR }}/previous_feeds.sha256 2>/dev/null | awk '{print $1}' || echo "")
        
        echo "当前 feeds 哈希: $CURRENT_FEEDS_HASH"
        echo "之前 feeds 哈希: $PREVIOUS_FEEDS_HASH"
        
        if [ "$CURRENT_FEEDS_HASH" != "$PREVIOUS_FEEDS_HASH" ]; then
          echo "feeds_changed=true" >> $GITHUB_ENV
          echo "Feeds 已变更，需要重新编译"
        else
          echo "feeds_changed=false" >> $GITHUB_ENV
          echo "Feeds 未变更，可以使用缓存包"
        fi
        
        # 保存当前哈希值供下次比较
        cp ${{ env.BUILD_STATE_DIR }}/feeds.sha256 ${{ env.BUILD_STATE_DIR }}/previous_feeds.sha256

    - name: 恢复已编译软件包
      if: steps.cache-packages.outputs.cache-hit == 'true'
      run: |
        cd /workdir/openwrt
        mkdir -p bin/targets
        if [ "${{ env.feeds_changed }}" = "true" ]; then
          echo "feeds 已更新，跳过恢复旧的编译包缓存"
        else
          echo "feeds 未变更，使用缓存编译包"
          find ${{ env.PACKAGES_DIR }} -type f | wc -l
        fi

    - name: 开启SSH调试
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.ssh == 'true'

    - name: 下载软件包
      run: |
        cd /workdir/openwrt
        
        # 为单个包下载添加重试机制
        MAX_RETRIES=3
        RETRY_WAIT=10
        
        # 创建包下载重试脚本
        cat > download_with_retry.sh << 'EOF'
        #!/bin/bash
        set -e
        MAX_RETRIES=$1
        RETRY_WAIT=$2
        shift 2
        
        retries=0
        until [ $retries -ge $MAX_RETRIES ]
        do
          echo "尝试下载，第 $((retries+1)) 次，共 $MAX_RETRIES 次..."
          if make download -j8 "$@" 2>&1 | tee download_attempt_$retries.log; then
            echo "下载成功！"
            exit 0
          fi
          retries=$((retries+1))
          if [ $retries -lt $MAX_RETRIES ]; then
            echo "下载失败，等待 $RETRY_WAIT 秒后重试..."
            sleep $RETRY_WAIT
          fi
        done
        
        echo "达到最大重试次数，保存日志以分析失败的包..."
        # 保存最后一次尝试的日志
        mkdir -p logs
        cp download_attempt_$(($retries-1)).log logs/download_failures.log
        exit 1
        EOF
        
        chmod +x download_with_retry.sh
        
        # 使用重试脚本进行下载
        ./download_with_retry.sh $MAX_RETRIES $RETRY_WAIT || make download -j1 V=s
        
        mkdir -p ${{ env.CCACHE_DIR }}
        ccache -o cache_dir=${{ env.CCACHE_DIR }}
        ccache -o max_size=8G  # 增加CCACHE大小
        ccache -z
        df -h

    - name: 检测下载失败的包
      run: |
        cd /workdir/openwrt
        
        # 创建检测下载失败的脚本
        cat > detect_failed_downloads.sh << 'EOF'
        #!/bin/bash
        
        # 检查下载日志中是否有失败的包
        if [ -f "logs/download_failures.log" ]; then
          echo "分析下载失败日志..."
          
          # 提取失败的URL信息
          grep -E "(curl:.*(403|404)|No more mirrors to try)" logs/download_failures.log > failed_urls.txt || true
          
          # 查找失败的包名
          declare -A failed_packages
          
          while IFS= read -r line; do
            # 从URL或错误信息中提取包名
            if [[ $line =~ \/([^\/]+)[-_][0-9].*\.tar ]]; then
              pkg_name="${BASH_REMATCH[1]}"
              failed_packages["$pkg_name"]=1
              echo "检测到下载失败的包: $pkg_name"
            fi
          done < failed_urls.txt
          
          # 如果找到失败的包，则禁用它们
          if [ ${#failed_packages[@]} -gt 0 ]; then
            echo "以下包将被禁用，因为无法下载："
            for pkg in "${!failed_packages[@]}"; do
              echo " - $pkg"
              # 查找所有与包名相关的配置条目
              grep -l "CONFIG_PACKAGE_.*$pkg.*=y" .config | while read config_file; do
                pkgs=$(grep -o "CONFIG_PACKAGE_[^=]*$pkg[^=]*=y" $config_file || true)
                if [ -n "$pkgs" ]; then
                  while IFS= read -r pkg_config; do
                    # 禁用包
                    pkg_name=$(echo "$pkg_config" | cut -d'=' -f1)
                    echo "禁用配置: $pkg_name"
                    sed -i "/$pkg_name=y/d" .config
                    echo "$pkg_name=n" >> .config
                  done <<< "$pkgs"
                fi
              done
            done
            
            # 更新配置
            make defconfig
            echo "已禁用无法下载的包，并更新配置"
            exit 0
          fi
        fi
        
        echo "没有检测到下载失败的包，或无需禁用任何包"
        exit 0
        EOF
        
        chmod +x detect_failed_downloads.sh
        ./detect_failed_downloads.sh

    - name: 智能编译固件
      id: compile
      run: |
        cd /workdir/openwrt
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export PATH="/usr/lib/ccache:$PATH"

        cleanup_temp_files() {
          echo "清理临时文件以释放空间..."
          find /tmp -type f -delete || true
          df -h
        }

        save_cache_info() {
          echo "保存缓存状态信息..."
          mkdir -p ${{ env.BUILD_STATE_DIR }}
          cp .config ${{ env.BUILD_STATE_DIR }}/config.txt
          echo "$TOOLCHAIN_MD5" > ${{ env.BUILD_STATE_DIR }}/toolchain.md5
          echo "$PACKAGE_MD5" > ${{ env.BUILD_STATE_DIR }}/package.md5
          echo "保存构建状态完成"
        }

        handle_failed_downloads() {
          echo "检测到编译失败，尝试识别下载问题..."
          
          # 创建日志目录（若不存在）
          mkdir -p logs
          
          # 分析编译日志
          COMPILE_LOG="logs/compile_error.log"
          echo "$1" > "$COMPILE_LOG"
          
          # 提取下载失败的包
          local failed_packages=()
          
          # 搜索已知的下载失败模式
          if grep -q "No more mirrors to try\|Download failed" "$COMPILE_LOG"; then
            # 尝试找出失败的包名
            local pkg=$(grep -B 5 "No more mirrors to try\|Download failed" "$COMPILE_LOG" | grep -o "package/feeds/[^/]*/[^[:space:]]*" | head -n 1 | awk -F'/' '{print $NF}')
            
            if [ -n "$pkg" ]; then
              failed_packages+=("$pkg")
              echo "检测到包 $pkg 下载失败"
            else
              # 如果无法从日志中提取包名，尝试在当前执行的任务中找
              pkg=$(grep -o "Building package .* in .*" "$COMPILE_LOG" | tail -n 1 | awk '{print $3}')
              if [ -n "$pkg" ]; then
                failed_packages+=("$pkg")
                echo "检测到当前构建的包 $pkg 可能下载失败"
              fi
            fi
          fi
          
          # 如果找到了问题包，禁用它们
          if [ ${#failed_packages[@]} -gt 0 ]; then
            echo "以下包下载失败，将从配置中禁用："
            for pkg in "${failed_packages[@]}"; do
              echo "- $pkg"
              # 查找与包名相关的配置条目
              grep -l "CONFIG_PACKAGE_.*$pkg.*=y" .config | while read config_file; do
                pkgs=$(grep -o "CONFIG_PACKAGE_[^=]*$pkg[^=]*=y" "$config_file" || true)
                if [ -n "$pkgs" ]; then
                  while IFS= read -r pkg_config; do
                    # 禁用包
                    pkg_name=$(echo "$pkg_config" | cut -d'=' -f1)
                    echo "禁用配置: $pkg_name"
                    sed -i "/$pkg_name=y/d" .config
                    echo "$pkg_name=n" >> .config
                  done <<< "$pkgs"
                fi
              done
            done
            
            # 更新配置并重新开始编译
            make defconfig
            echo "重新开始编译流程，跳过有问题的包..."
            return 0  # 继续编译
          fi
          
          return 1  # 无法处理的错误
        }

        compile_firmware() {
          if [ $DO_FULL_BUILD -eq 1 ]; then
            echo "下载依赖..."
            ./download_with_retry.sh $MAX_RETRIES $RETRY_WAIT || make download -j1 V=s
            
            # 检测下载失败的包并禁用
            ./detect_failed_downloads.sh
            
            if [ ! -d "${{ env.TOOLCHAIN_DIR }}/toolchain-"* ]; then
              echo "编译工具链..."
              make -j$(nproc) tools/compile V=s || make -j1 V=s tools/compile
              make -j$(nproc) toolchain/compile V=s || make -j1 V=s toolchain/compile
            else
              echo "工具链已存在，跳过编译"
            fi
            cleanup_temp_files
            echo "编译完整固件..."
            if ! make -j$(nproc) V=s 2>&1 | tee logs/compile_output.log; then
              if handle_failed_downloads "$(cat logs/compile_output.log)"; then
                make -j$(nproc) V=s || make -j1 V=s
              else
                make -j1 V=s
              fi
            fi
          elif [ $DO_PACKAGE_BUILD -eq 1 ] || [ "${{ env.feeds_changed }}" = "true" ]; then
            echo "软件包配置变化或源码更新，编译软件包..."
            make -j$(nproc) package/clean V=s || make -j1 V=s package/clean
            
            if ! make -j$(nproc) package/compile V=s 2>&1 | tee logs/compile_output.log; then
              if handle_failed_downloads "$(cat logs/compile_output.log)"; then
                make -j$(nproc) package/compile V=s || make -j1 V=s package/compile
              else
                make -j1 V=s package/compile
              fi
            fi
            
            make -j$(nproc) package/index V=s || make -j1 V=s package/index
            
            # 确保生成固件 - 不管前面步骤如何，都强制执行
            echo "强制执行固件生成步骤..."
            make -j$(nproc) target/install V=s || make -j1 V=s target/install
          else
            echo "配置和feeds都未变化，执行最小增量编译..."
            # 直接使用缓存的软件包生成固件，不清理和重新编译
            if ! make -j$(nproc) V=s 2>&1 | tee logs/compile_output.log; then
              if handle_failed_downloads "$(cat logs/compile_output.log)"; then
                make -j$(nproc) V=s || make -j1 V=s
              else
                make -j1 V=s
              fi
            fi
          fi

          # 无论编译结果如何，都确保执行固件生成步骤
          echo "确保执行固件生成步骤，无论前面编译是否成功..."
          make -j$(nproc) target/install V=s || make -j1 V=s target/install
          
          # 保存缓存信息
          save_cache_info

          # 检查固件生成结果
          echo "检查固件生成结果:"
          find bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "没有找到固件文件！"
          
          # 如果没有找到固件文件，尝试单独构建镜像
          if [ -z "$(find bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*")" ]; then
            echo "未找到固件文件，尝试单独构建镜像..."
            # 检查是否已经构建了packages
            if [ -d "bin/packages" ]; then
              echo "已有软件包，尝试单独构建固件镜像..."
              make -j1 target/install V=s
              find bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "构建固件仍然失败！"
            fi
          fi
          
          if [ $? -eq 0 ]; then
            echo "编译成功"
          else
            echo "编译失败"
            exit 1
          fi
        }
        
        # 设置下载重试参数
        MAX_RETRIES=3
        RETRY_WAIT=10

        TOOLCHAIN_CONFIG=$(grep "^CONFIG_TARGET" .config | sort)
        TOOLCHAIN_MD5=$(echo "$TOOLCHAIN_CONFIG" | md5sum | awk '{print $1}')
        PREVIOUS_TOOLCHAIN_MD5=$(cat ${{ env.BUILD_STATE_DIR }}/toolchain.md5 2>/dev/null || echo "")
        PACKAGE_CONFIG=$(grep "^CONFIG_PACKAGE" .config | sort)
        PACKAGE_MD5=$(echo "$PACKAGE_CONFIG" | md5sum | awk '{print $1}')
        PREVIOUS_PACKAGE_MD5=$(cat ${{ env.BUILD_STATE_DIR }}/package.md5 2>/dev/null || echo "")
        DO_FULL_BUILD=0
        DO_PACKAGE_BUILD=0

        if [ -z "$PREVIOUS_TOOLCHAIN_MD5" ] || [ "$TOOLCHAIN_MD5" != "$PREVIOUS_TOOLCHAIN_MD5" ] || [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
          echo "工具链配置变化或首次编译，需要全量编译"
          DO_FULL_BUILD=1
        elif [ -z "$PREVIOUS_PACKAGE_MD5" ] || [ "$PACKAGE_MD5" != "$PREVIOUS_PACKAGE_MD5" ]; then
          echo "软件包配置变化，需要编译软件包"
          DO_PACKAGE_BUILD=1
        else
          echo "配置未变，检查源码变化..."
        fi

        compile_firmware

        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | tr '\n' '_')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        ccache -s
        df -h

    # 检查固件生成结果
    - name: 检查固件生成结果
      run: |
        echo "检查固件生成结果..."
        find /workdir/openwrt/bin/targets -type f | sort
        
        # 检查固件文件大小
        echo "固件文件大小:"
        find /workdir/openwrt/bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "未找到固件文件"
        
        # 检查是否有squashfs文件
        echo "检查squashfs文件:"
        find /workdir/openwrt/build_dir -name "*.squashfs" | xargs ls -lh || echo "未找到squashfs文件"
        
        # 如果没有找到固件文件，尝试最后一次强制生成
        if [ -z "$(find /workdir/openwrt/bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*")" ]; then
          echo "警告：未找到固件文件，尝试强制重新生成..."
          cd /workdir/openwrt
          # 确保配置中包含固件生成选项
          if ! grep -q "CONFIG_TARGET_ROOTFS_SQUASHFS=y" .config; then
            echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config
          fi
          if grep -q "CONFIG_TARGET_x86=y" .config; then
            if ! grep -q "CONFIG_GRUB_IMAGES=y" .config; then
              echo "CONFIG_GRUB_IMAGES=y" >> .config
            fi
            if ! grep -q "CONFIG_TARGET_IMAGES_GZIP=y" .config; then
              echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config
            fi
          fi
          make defconfig
          # 强制生成固件
          make -j1 target/install V=s
          echo "重新检查固件文件:"
          find /workdir/openwrt/bin/targets -type f -name "*.bin" -o -name "*combined*" -o -name "*sysupgrade*" | xargs ls -lh || echo "仍然未找到固件文件"
        fi

    # 备份缓存前检查工具链大小
    - name: 检查工具链大小
      if: "!cancelled()"
      run: |
        echo "编译完成，检查工具链大小..."
        echo "工具链目录大小: $(du -sh ${{ env.TOOLCHAIN_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        echo "工具链构建目录大小: $(du -sh ${{ env.TOOLCHAIN_BUILD_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        echo "主机工具链目录: $(du -sh ${{ env.TOOLCHAIN_DIR }}/host 2>/dev/null || echo '目录不存在或为空')"
        echo "目标工具链目录: $(du -sh ${{ env.TOOLCHAIN_DIR }}/toolchain-* 2>/dev/null || echo '目录不存在或为空')"
        echo "CCACHE 目录大小: $(du -sh ${{ env.CCACHE_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        echo "编译包目录大小: $(du -sh ${{ env.PACKAGES_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        echo "构建状态目录大小: $(du -sh ${{ env.BUILD_STATE_DIR }} 2>/dev/null || echo '目录不存在或为空')"
        
        # 检查关键文件
        echo "检查关键工具链文件..."
        find ${{ env.TOOLCHAIN_DIR }}/host/bin -name "gcc*" 2>/dev/null | head -5 || echo "未找到主机gcc"
        find ${{ env.TOOLCHAIN_DIR }}/toolchain-* -name "*gcc*" 2>/dev/null | head -5 || echo "未找到交叉编译器gcc"
        
        # 确保构建状态目录包含时间戳信息
        mkdir -p ${{ env.BUILD_STATE_DIR }}
        echo "缓存创建时间: $(date)" > ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt
        echo "运行ID: ${{ github.run_id }}" >> ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt
        echo "构建分支: ${{ env.REPO_BRANCH }}" >> ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt

    # 保存工具链缓存
    - name: 保存工具链缓存
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: |
          ${{ env.TOOLCHAIN_DIR }}
          ${{ env.TOOLCHAIN_BUILD_DIR }}
        key: toolchain-${{ env.REPO_BRANCH }}-fixed-cache
    
    # 保存编译包缓存
    - name: 保存编译包缓存
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: ${{ env.PACKAGES_DIR }}
        key: packages-${{ env.REPO_BRANCH }}-fixed-cache
    
    # 保存构建状态缓存
    - name: 保存构建状态缓存
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: ${{ env.BUILD_STATE_DIR }}
        key: state-${{ env.REPO_BRANCH }}-fixed-cache
    
    # 保存CCACHE缓存
    - name: 保存CCACHE缓存
      uses: actions/cache@v3
      if: "!cancelled()"
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_BRANCH }}-fixed-cache

    - name: 验证缓存已保存
      if: "!cancelled()"
      run: |
        echo "已完成所有缓存保存，现在可以安全地进行后续文件整理和清理操作"
        # 显示缓存时间戳
        if [ -f "${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt" ]; then
          echo "缓存时间戳内容:"
          cat ${{ env.BUILD_STATE_DIR }}/cache_timestamp.txt
        fi
        df -h

    # 现在可以安全地进行文件整理和上传
    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # 首先广泛搜索所有可能的固件文件
        echo "搜索所有可能的固件文件..."
        find /workdir/openwrt/bin -type f -name "*.bin" -o -name "*.img" -o -name "*sysupgrade*" -o -name "*combined*" | \
          xargs -r ls -lh || echo "未找到可能的固件文件"
          
        # 检查是否有目标目录
        if [ ! -d "/workdir/openwrt/bin/targets" ]; then
          echo "错误：编译目标目录不存在，可能编译失败"
          # 即使没有固件文件也不报错，而是创建一个空的固件目录
          mkdir -p /workdir/openwrt/bin/targets/empty/firmware
          echo "FIRMWARE=/workdir/openwrt/bin/targets/empty/firmware" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 查找所有目标目录
        TARGET_DIRS=$(find /workdir/openwrt/bin/targets -mindepth 2 -maxdepth 2 -type d)
        
        if [ -z "$TARGET_DIRS" ]; then
          echo "警告：未找到具体目标目录，创建通用目录"
          mkdir -p /workdir/openwrt/bin/targets/generic/generic
          TARGET_DIRS="/workdir/openwrt/bin/targets/generic/generic"
        fi
        
        # 对于每个目标目录，尝试查找固件文件
        for TARGET_DIR in $TARGET_DIRS; do
          echo "处理目标目录: $TARGET_DIR"
          cd "$TARGET_DIR"
          
          # 创建固件目录并确保它是空的
          rm -rf firmware
          mkdir -p firmware
          
          # 查找固件文件 - 使用更宽松的匹配规则
          FILES_FOUND=0
          
          # 尝试复制标准固件文件
          for pattern in "*combined*" "*sysupgrade*" "*.img" "*.bin"; do
            echo "尝试复制匹配 $pattern 的文件..."
            if find . -maxdepth 1 -name "$pattern" | grep -q .; then
              find . -maxdepth 1 -name "$pattern" -exec cp -f {} ./firmware/ \;
              FILES_FOUND=1
            fi
          done
          
          # 如果没有找到标准固件文件，尝试复制所有非清单文件
          if [ $FILES_FOUND -eq 0 ]; then
            echo "未找到标准固件文件，尝试复制所有可能的文件..."
            find . -maxdepth 1 -type f -not -name "*.manifest" -not -name "*.txt" -not -name "*.json" \
              -not -name "*.buildinfo" -exec cp -f {} ./firmware/ \;
          fi
          
          # 复制配置文件
          if [ -f "/workdir/openwrt/.config" ]; then
            cp -f /workdir/openwrt/.config ./firmware/config.txt
          fi
          
          # 检查是否成功复制了任何文件
          if [ -n "$(ls -A firmware)" ]; then
            echo "成功复制固件文件到 $TARGET_DIR/firmware"
            echo "固件内容:"
            ls -lh firmware/
            
            echo "FIRMWARE=$TARGET_DIR/firmware" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
            break
          else
            echo "警告: $TARGET_DIR 中未找到可用固件文件"
          fi
        done
        
        # 如果没有找到任何固件文件，使用紧急备用方法
        if [ -z "$FIRMWARE" ]; then
          echo "警告：未能在任何目标目录中找到固件文件，使用紧急备用方法"
          BACKUP_DIR="/workdir/openwrt/bin/targets/generic/backup_firmware"
          mkdir -p "$BACKUP_DIR/firmware"
          
          # 复制所有bin目录下的非包文件
          find /workdir/openwrt/bin -type f -not -path "*/packages/*" -exec cp -f {} "$BACKUP_DIR/firmware/" \;
          
          # 确保至少有一个配置文件
          if [ -f "/workdir/openwrt/.config" ]; then
            cp -f /workdir/openwrt/.config "$BACKUP_DIR/firmware/config.txt"
          else
            echo "# 紧急备用配置" > "$BACKUP_DIR/firmware/config.txt"
          fi
          
          echo "FIRMWARE=$BACKUP_DIR/firmware" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        fi
        
        # 创建固件压缩包
        if [ -n "$FIRMWARE" ]; then
          cd $(dirname "$FIRMWARE")
          zip -r firmware.zip $(basename "$FIRMWARE")
          echo "FIRMWARE_ZIP=$(dirname "$FIRMWARE")/firmware.zip" >> $GITHUB_ENV
        fi

    # 上传固件
    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "## OpenWrt固件构建完成 📦" > release.txt
        echo "📅 构建时间: $(date +"%Y-%m-%d %H:%M")" >> release.txt
        echo "📂 固件下载" >> release.txt
        echo "⚠️ 请在刷机前先做好备份！" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

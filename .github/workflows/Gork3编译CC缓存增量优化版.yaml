name: Build X86_64 OpenWrt（Gork3编译CC增量缓存优化版）

on:
  schedule:
    - cron: '0 16 * * *'
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 增量缓存优化.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  CCACHE_DIR: $GITHUB_WORKSPACE/ccache

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Restore tools/toolchain cache
      uses: actions/cache@v3
      with:
        path: |
          openwrt/staging_dir/toolchain-*
          openwrt/build_dir/toolchain-*
        key: toolchain-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('增量缓存优化.config') }}
        restore-keys: |
          toolchain-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    - name: Restore package cache
      uses: actions/cache@v3
      with:
        path: |
          openwrt/build_dir/target-*/root-*
          openwrt/bin/packages
          package_hashes
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('增量缓存优化.config') }}-${{ github.sha }}
        restore-keys: |
          packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('增量缓存优化.config') }}-

    - name: Restore ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

    - name: Clone source code
      working-directory: ./
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sudo chown -R $USER:$GROUPS .
        find . -type f -name "*.sh" -exec chmod +x {} \;

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Detect config changes
      run: |
        cd openwrt
        grep "^CONFIG_PACKAGE" .config | sort > current_packages.txt
        if [ -f ../previous_packages.txt ]; then
          comm -13 ../previous_packages.txt current_packages.txt > added_packages.txt
          comm -23 ../previous_packages.txt current_packages.txt > removed_packages.txt
          comm -12 ../previous_packages.txt current_packages.txt > unchanged_packages.txt
        else
          cp current_packages.txt added_packages.txt
          touch unchanged_packages.txt removed_packages.txt
        fi
        mv current_packages.txt ../previous_packages.txt

    - name: Detect package source changes
      run: |
        cd openwrt
        mkdir -p ../package_hashes
        for pkg in $(grep "^CONFIG_PACKAGE" .config | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/'); do
          pkg_dir="package/$pkg"
          if [ -d "$pkg_dir" ]; then
            find "$pkg_dir" -type f -not -path "*/.git/*" -exec sha256sum {} \; | sort | sha256sum > "../package_hashes/$pkg.current"
          fi
        done
        touch ../updated_packages.txt
        for pkg in $(cat ../unchanged_packages.txt | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/'); do
          if [ -f "../package_hashes/$pkg.current" ] && [ -f "../package_hashes/$pkg.previous" ]; then
            if ! cmp -s "../package_hashes/$pkg.current" "../package_hashes/$pkg.previous"; then
              echo "CONFIG_PACKAGE_$pkg=y" >> ../updated_packages.txt
            fi
          elif [ -f "../package_hashes/$pkg.current" ]; then
            echo "CONFIG_PACKAGE_$pkg=y" >> ../updated_packages.txt
          fi
          [ -f "../package_hashes/$pkg.current" ] && mv "../package_hashes/$pkg.current" "../package_hashes/$pkg.previous"
        done
        echo "Packages with updated source: $(cat ../updated_packages.txt)"

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        ccache -M 5G
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        echo "Starting compilation with $(nproc) threads and ccache"
        if [ ! -d "staging_dir/toolchain-*" ]; then
          echo "Toolchain not found in cache, compiling..."
          make -j$(nproc) tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }} || make -j1 V=s tools/install toolchain/install
        else
          echo "Toolchain restored from cache, skipping compilation."
        fi
        touch ../compile_list.txt
        cat ../added_packages.txt ../updated_packages.txt | sort -u > ../compile_list.txt
        if [ -s ../removed_packages.txt ]; then
          echo "Cleaning removed packages..."
          while read -r pkg; do
            pkg_name=$(echo "$pkg" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
            echo "Cleaning package: $pkg_name"
            make package/$pkg_name/clean CCACHE_DIR=${{ env.CCACHE_DIR }}
          done < ../removed_packages.txt
        fi
        if [ -s ../compile_list.txt ]; then
          echo "Compiling added or updated packages..."
          while read -r pkg; do
            pkg_name=$(echo "$pkg" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
            echo "Compiling package: $pkg_name"
            make package/$pkg_name/clean CCACHE_DIR=${{ env.CCACHE_DIR }}
            make package/$pkg_name/compile -j$(nproc) CCACHE_DIR=${{ env.CCACHE_DIR }} || make package/$pkg_name/compile -j1 V=s
          done < ../compile_list.txt
        else
          echo "No new or updated packages to compile."
        fi
        rm -rf build_dir/target-*/root-*
        make -j$(nproc) target/install CCACHE_DIR=${{ env.CCACHE_DIR }} || make -j1 V=s target/install
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "固件大小：$(du -sh bin/targets/*/*)"

    - name: Save tools/toolchain cache
      uses: actions/cache@v3
      if: always()
      with:
        path: |
          openwrt/staging_dir/toolchain-*
          openwrt/build_dir/toolchain-*
        key: toolchain-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('增量缓存优化.config') }}

    - name: Save package cache
      uses: actions/cache@v3
      if: always()
      with:
        path: |
          openwrt/build_dir/target-*/root-*
          openwrt/bin/packages
          package_hashes
        key: packages-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('增量缓存优化.config') }}-${{ github.sha }}

    - name: Save ccache
      uses: actions/cache@v3
      if: always()
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ github.sha }}

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

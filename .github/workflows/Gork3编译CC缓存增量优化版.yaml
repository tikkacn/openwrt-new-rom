name: Build X86_64 OpenWrt（Gork3编译CC增量缓存优化版）

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 增量缓存优化.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  CCACHE_DIR: $GITHUB_WORKSPACE/ccache
  WORKSPACE: $GITHUB_WORKSPACE

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      actions: write

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools libexpat1-dev libz-dev liblzma-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Clone source code and prepare config
      working-directory: ./
      run: |
        rm -rf openwrt
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sudo chown -R $USER:$GROUPS .
        find . -type f -name "*.sh" -exec chmod +x {} \;
        if [ ! -e "${{ env.WORKSPACE }}/${{ env.CONFIG_FILE }}" ]; then
          echo "Error: CONFIG_FILE (${{ env.CONFIG_FILE }}) not found in ${{ env.WORKSPACE }}!"
          exit 1
        fi
        cp "${{ env.WORKSPACE }}/${{ env.CONFIG_FILE }}" .config

    - name: Get source and package version hashes
      id: hashes
      run: |
        SOURCE_SHA=$(git ls-remote ${{ env.REPO_URL }} ${{ env.REPO_BRANCH }} | awk '{print $1}')
        echo "SOURCE_SHA=$SOURCE_SHA" >> $GITHUB_ENV
        cd openwrt
        touch ../package_versions.txt
        for pkg in $(grep "^CONFIG_PACKAGE" .config | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/'); do
          pkg_dir=$(find package feeds -type d -name "$pkg" | head -n 1)
          if [ -n "$pkg_dir" ]; then
            pkg_version=$(grep "PKG_VERSION:=" "$pkg_dir/Makefile" | cut -d'=' -f2 || echo "unknown")
            echo "$pkg:$pkg_version" >> ../package_versions.txt
          fi
        done
        cd ..
        PACKAGE_VERSIONS_HASH=$(sha256sum package_versions.txt | awk '{print $1}')
        echo "PACKAGE_VERSIONS_HASH=$PACKAGE_VERSIONS_HASH" >> $GITHUB_ENV

    - name: Restore tools/toolchain cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.WORKSPACE }}/openwrt/staging_dir/toolchain-*
          ${{ env.WORKSPACE }}/openwrt/build_dir/toolchain-*
        key: toolchain-${{ env.SOURCE_SHA }}

    - name: Restore package cache file
      uses: actions/cache@v3
      with:
        path: ${{ env.WORKSPACE }}/package_cache/packages.tar.gz
        key: packages-${{ env.PACKAGE_VERSIONS_HASH }}

    - name: Extract package caches
      run: |
        cd openwrt
        mkdir -p build_dir/target-*
        if [ -f "${{ env.WORKSPACE }}/package_cache/packages.tar.gz" ]; then
          echo "Restoring package caches..."
          tar -xzf ${{ env.WORKSPACE }}/package_cache/packages.tar.gz -C build_dir/target-* || echo "Failed to extract package caches"
        else
          echo "No package caches found to restore."
        fi

    - name: Restore ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.SOURCE_SHA }}

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        cd openwrt
        chmod +x $DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package and resolve dependencies
      id: package
      run: |
        cd openwrt
        make defconfig
        make oldconfig <<< "y"
        timeout 30m make download -j2 V=s || echo "Warning: Download timed out or failed, proceeding..."

    - name: Detect changes and compile
      id: compile
      run: |
        cd openwrt
        ccache -M 5G || { echo "Failed to set ccache max size"; exit 1; }
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        ccache -z
        echo "Starting compilation with ccache"

        if [ ! -d "staging_dir/toolchain-*" ]; then
          echo "Toolchain not found in cache, compiling..."
          make -j$(nproc) tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j8 tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j4 tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j1 V=s tools/install toolchain/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache
        else
          echo "Toolchain restored from cache, skipping compilation."
        fi

        grep "^CONFIG_PACKAGE" .config | sort > ${{ env.WORKSPACE }}/current_packages.txt
        echo "Checking previous_packages.txt..."
        ls -l ${{ env.WORKSPACE }}/previous_packages.txt || echo "previous_packages.txt not found"
        if [ ! -f "${{ env.WORKSPACE }}/previous_packages.txt" ]; then
          echo "First run detected, compiling all packages..."
          make -j$(nproc) CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j8 CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j4 CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j1 V=s CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache
          cp ${{ env.WORKSPACE }}/current_packages.txt ${{ env.WORKSPACE }}/previous_packages.txt
        else
          echo "Incremental build detected..."
          comm -13 ${{ env.WORKSPACE }}/previous_packages.txt ${{ env.WORKSPACE }}/current_packages.txt > ${{ env.WORKSPACE }}/added_packages.txt
          comm -23 ${{ env.WORKSPACE }}/previous_packages.txt ${{ env.WORKSPACE }}/current_packages.txt > ${{ env.WORKSPACE }}/removed_packages.txt
          comm -12 ${{ env.WORKSPACE }}/previous_packages.txt ${{ env.WORKSPACE }}/current_packages.txt > ${{ env.WORKSPACE }}/unchanged_packages.txt || touch ${{ env.WORKSPACE }}/unchanged_packages.txt
          cat ${{ env.WORKSPACE }}/added_packages.txt > ${{ env.WORKSPACE }}/compile_list.txt

          mkdir -p ${{ env.WORKSPACE }}/package_hashes
          for pkg in $(grep "^CONFIG_PACKAGE" .config | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/'); do
            pkg_dir=$(find package feeds -type d -name "$pkg" | head -n 1)
            if [ -n "$pkg_dir" ]; then
              find "$pkg_dir" -type f -not -path "*/.git/*" -exec sha256sum {} \; | sort | sha256sum > "${{ env.WORKSPACE }}/package_hashes/$pkg.current"
            fi
          done
          if [ -s ${{ env.WORKSPACE }}/unchanged_packages.txt ]; then
            for pkg in $(cat ${{ env.WORKSPACE }}/unchanged_packages.txt | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/'); do
              if [ -f "${{ env.WORKSPACE }}/package_hashes/$pkg.current" ] && [ -f "${{ env.WORKSPACE }}/package_hashes/$pkg.previous" ]; then
                if ! cmp -s "${{ env.WORKSPACE }}/package_hashes/$pkg.current" "${{ env.WORKSPACE }}/package_hashes/$pkg.previous"; then
                  echo "CONFIG_PACKAGE_$pkg=y" >> ${{ env.WORKSPACE }}/compile_list.txt
                fi
              elif [ -f "${{ env.WORKSPACE }}/package_hashes/$pkg.current" ]; then
                echo "CONFIG_PACKAGE_$pkg=y" >> ${{ env.WORKSPACE }}/compile_list.txt
              fi
              [ -f "${{ env.WORKSPACE }}/package_hashes/$pkg.current" ] && mv "${{ env.WORKSPACE }}/package_hashes/$pkg.current" "${{ env.WORKSPACE }}/package_hashes/$pkg.previous"
            done
          fi

          if [ -s ${{ env.WORKSPACE }}/removed_packages.txt ]; then
            echo "Cleaning removed packages..."
            while read -r pkg; do
              pkg_name=$(echo "$pkg" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
              pkg_dir=$(find package feeds -type d -name "$pkg_name" | head -n 1)
              if [ -n "$pkg_dir" ]; then
                echo "Cleaning package: $pkg_name"
                make package/$pkg_name/clean CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || echo "Warning: Failed to clean $pkg_name"
              fi
            done < ${{ env.WORKSPACE }}/removed_packages.txt
          fi

          if [ -s ${{ env.WORKSPACE }}/compile_list.txt ]; then
            echo "Compiling added or updated packages..."
            while read -r pkg; do
              pkg_name=$(echo "$pkg" | sed 's/CONFIG_PACKAGE_\(.*\)=y/\1/')
              pkg_dir=$(find package feeds -type d -name "$pkg_name" | head -n 1)
              if [ -n "$pkg_dir" ]; then
                echo "Compiling package: $pkg_name"
                make package/$pkg_name/clean CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || echo "Warning: Failed to clean $pkg_name"
                make package/$pkg_name/compile -j$(nproc) CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
                make -j8 package/$pkg_name/compile CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
                make -j4 package/$pkg_name/compile CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
                make -j1 V=s package/$pkg_name/compile CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache
                if [ ! -d "build_dir/target-*/$pkg_name-*" ]; then
                  echo "Warning: Compilation of $pkg_name failed, no output found."
                fi
              fi
            done < ${{ env.WORKSPACE }}/compile_list.txt
          else
            echo "No new or updated packages to compile."
          fi

          echo "Building target filesystem..."
          make -j$(nproc) target/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j8 target/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j4 target/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache || \
          make -j1 V=s target/install CCACHE_DIR=${{ env.CCACHE_DIR }} CCACHE=ccache
          mv ${{ env.WORKSPACE }}/current_packages.txt ${{ env.WORKSPACE }}/previous_packages.txt
        fi

        ccache -s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Save tools/toolchain cache
      id: save-toolchain-cache
      uses: actions/cache@v3
      if: always()
      with:
        path: |
          ${{ env.WORKSPACE }}/openwrt/staging_dir/toolchain-*
          ${{ env.WORKSPACE }}/openwrt/build_dir/toolchain-*
        key: toolchain-${{ env.SOURCE_SHA }}

    - name: Prepare and save package caches
      run: |
        cd openwrt
        mkdir -p ${{ env.WORKSPACE }}/package_cache
        echo "Saving all package caches..."
        if [ -d "build_dir/target-*" ] && [ "$(ls -A build_dir/target-*)" ]; then
          tar -czf ${{ env.WORKSPACE }}/package_cache/packages.tar.gz -C build_dir/target-* .
          echo "Packages cached to ${{ env.WORKSPACE }}/package_cache/packages.tar.gz"
        else
          echo "No package build directories found to cache or directory is empty."
        fi

    - name: Save package caches
      uses: actions/cache@v3
      if: always()
      with:
        path: ${{ env.WORKSPACE }}/package_cache/packages.tar.gz
        key: packages-${{ env.PACKAGE_VERSIONS_HASH }}

    - name: Save ccache
      id: save-ccache
      uses: actions/cache@v3
      if: always()
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ env.SOURCE_SHA }}

    - name: Verify caches
      if: always()
      run: |
        echo "Toolchain cache contents:"
        ls -lR ${{ env.WORKSPACE }}/openwrt/staging_dir/toolchain-* || echo "No toolchain files saved"
        echo "Package cache contents:"
        ls -l ${{ env.WORKSPACE }}/package_cache/packages.tar.gz || echo "No package caches saved"
        echo "ccache contents:"
        ls -lR ${{ env.CCACHE_DIR }} || echo "No ccache files saved"
        ccache -s || echo "ccache stats not available"

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ github.run_id }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
